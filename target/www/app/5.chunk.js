(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[5],{

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss":
/*!******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss ***!
  \******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 1.25rem 0 0 0; }\\n\\n.nb-theme-default :host .echarts {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 1.25rem 0 0 0; }\\n\\n.nb-theme-cosmic :host .echarts {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 1.25rem 0 0 0; }\\n\\n.nb-theme-corporate :host .echarts {\\n  width: 100%;\\n  height: 576px; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss":
/*!************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss ***!
  \************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-default :host /deep/ agm-map {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-cosmic :host /deep/ agm-map {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-corporate :host /deep/ agm-map {\\n  width: 100%;\\n  height: 576px; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss":
/*!****************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss ***!
  \****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-default :host /deep/ .leaflet-container {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-cosmic :host /deep/ .leaflet-container {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-corporate :host /deep/ .leaflet-container {\\n  width: 100%;\\n  height: 576px; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-default :host /deep/ agm-map {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-cosmic :host /deep/ agm-map {\\n  width: 100%;\\n  height: 576px; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0; }\\n\\n.nb-theme-corporate :host /deep/ agm-map {\\n  width: 100%;\\n  height: 576px; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss":
/*!***********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./bubble-map.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL2J1YmJsZS9idWJibGUtbWFwLmNvbXBvbmVudC5zY3NzP2Y5MmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLDRTQUF1Sjs7QUFFcEw7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9idWJibGUvYnViYmxlLW1hcC5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9idWJibGUtbWFwLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.ts":
/*!*********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar http_1 = __webpack_require__(/*! @angular/common/http */ \"./node_modules/@angular/common/fesm5/http.js\");\nvar rxjs_1 = __webpack_require__(/*! rxjs */ \"./node_modules/rxjs/_esm5/index.js\");\nvar operators_1 = __webpack_require__(/*! rxjs/operators */ \"./node_modules/rxjs/_esm5/operators/index.js\");\nvar theme_1 = __webpack_require__(/*! @nebular/theme */ \"./node_modules/@nebular/theme/index.js\");\nvar echarts_1 = __webpack_require__(/*! echarts */ \"./node_modules/echarts/index.js\");\nvar BubbleMapComponent = /** @class */ (function () {\n    function BubbleMapComponent(theme, http) {\n        var _this = this;\n        this.theme = theme;\n        this.http = http;\n        this.latlong = {};\n        this.max = -Infinity;\n        this.min = Infinity;\n        this.alive = true;\n        rxjs_1.combineLatest([this.http.get('assets/map/world.json'), this.theme.getJsTheme()])\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function (_a) {\n            var map = _a[0], config = _a[1];\n            echarts_1.registerMap('world', map);\n            var colors = config.variables;\n            _this.bubbleTheme = config.variables.bubbleMap;\n            _this.geoColors = [colors.primary, colors.info, colors.success, colors.warning, colors.danger];\n            _this.latlong = {\n                AD: { latitude: 42.5, longitude: 1.5 },\n                AE: { latitude: 24, longitude: 54 },\n                AF: { latitude: 33, longitude: 65 },\n                AG: { latitude: 17.05, longitude: -61.8 },\n                AI: { latitude: 18.25, longitude: -63.1667 },\n                AL: { latitude: 41, longitude: 20 },\n                AM: { latitude: 40, longitude: 45 },\n                AN: { latitude: 12.25, longitude: -68.75 },\n                AO: { latitude: -12.5, longitude: 18.5 },\n                AP: { latitude: 35, longitude: 105 },\n                AQ: { latitude: -90, longitude: 0 },\n                AR: { latitude: -34, longitude: -64 },\n                AS: { latitude: -14.3333, longitude: -170 },\n                AT: { latitude: 47.3333, longitude: 13.3333 },\n                AU: { latitude: -27, longitude: 133 },\n                AW: { latitude: 12.5, longitude: -69.9667 },\n                AZ: { latitude: 40.5, longitude: 47.5 },\n                BA: { latitude: 44, longitude: 18 },\n                BB: { latitude: 13.1667, longitude: -59.5333 },\n                BD: { latitude: 24, longitude: 90 },\n                BE: { latitude: 50.8333, longitude: 4 },\n                BF: { latitude: 13, longitude: -2 },\n                BG: { latitude: 43, longitude: 25 },\n                BH: { latitude: 26, longitude: 50.55 },\n                BI: { latitude: -3.5, longitude: 30 },\n                BJ: { latitude: 9.5, longitude: 2.25 },\n                BM: { latitude: 32.3333, longitude: -64.75 },\n                BN: { latitude: 4.5, longitude: 114.6667 },\n                BO: { latitude: -17, longitude: -65 },\n                BR: { latitude: -10, longitude: -55 },\n                BS: { latitude: 24.25, longitude: -76 },\n                BT: { latitude: 27.5, longitude: 90.5 },\n                BV: { latitude: -54.4333, longitude: 3.4 },\n                BW: { latitude: -22, longitude: 24 },\n                BY: { latitude: 53, longitude: 28 },\n                BZ: { latitude: 17.25, longitude: -88.75 },\n                CA: { latitude: 54, longitude: -100 },\n                CC: { latitude: -12.5, longitude: 96.8333 },\n                CD: { latitude: 0, longitude: 25 },\n                CF: { latitude: 7, longitude: 21 },\n                CG: { latitude: -1, longitude: 15 },\n                CH: { latitude: 47, longitude: 8 },\n                CI: { latitude: 8, longitude: -5 },\n                CK: { latitude: -21.2333, longitude: -159.7667 },\n                CL: { latitude: -30, longitude: -71 },\n                CM: { latitude: 6, longitude: 12 },\n                CN: { latitude: 35, longitude: 105 },\n                CO: { latitude: 4, longitude: -72 },\n                CR: { latitude: 10, longitude: -84 },\n                CU: { latitude: 21.5, longitude: -80 },\n                CV: { latitude: 16, longitude: -24 },\n                CX: { latitude: -10.5, longitude: 105.6667 },\n                CY: { latitude: 35, longitude: 33 },\n                CZ: { latitude: 49.75, longitude: 15.5 },\n                DE: { latitude: 51, longitude: 9 },\n                DJ: { latitude: 11.5, longitude: 43 },\n                DK: { latitude: 56, longitude: 10 },\n                DM: { latitude: 15.4167, longitude: -61.3333 },\n                DO: { latitude: 19, longitude: -70.6667 },\n                DZ: { latitude: 28, longitude: 3 },\n                EC: { latitude: -2, longitude: -77.5 },\n                EE: { latitude: 59, longitude: 26 },\n                EG: { latitude: 27, longitude: 30 },\n                EH: { latitude: 24.5, longitude: -13 },\n                ER: { latitude: 15, longitude: 39 },\n                ES: { latitude: 40, longitude: -4 },\n                ET: { latitude: 8, longitude: 38 },\n                EU: { latitude: 47, longitude: 8 },\n                FI: { latitude: 62, longitude: 26 },\n                FJ: { latitude: -18, longitude: 175 },\n                FK: { latitude: -51.75, longitude: -59 },\n                FM: { latitude: 6.9167, longitude: 158.25 },\n                FO: { latitude: 62, longitude: -7 },\n                FR: { latitude: 46, longitude: 2 },\n                GA: { latitude: -1, longitude: 11.75 },\n                GB: { latitude: 54, longitude: -2 },\n                GD: { latitude: 12.1167, longitude: -61.6667 },\n                GE: { latitude: 42, longitude: 43.5 },\n                GF: { latitude: 4, longitude: -53 },\n                GH: { latitude: 8, longitude: -2 },\n                GI: { latitude: 36.1833, longitude: -5.3667 },\n                GL: { latitude: 72, longitude: -40 },\n                GM: { latitude: 13.4667, longitude: -16.5667 },\n                GN: { latitude: 11, longitude: -10 },\n                GP: { latitude: 16.25, longitude: -61.5833 },\n                GQ: { latitude: 2, longitude: 10 },\n                GR: { latitude: 39, longitude: 22 },\n                GS: { latitude: -54.5, longitude: -37 },\n                GT: { latitude: 15.5, longitude: -90.25 },\n                GU: { latitude: 13.4667, longitude: 144.7833 },\n                GW: { latitude: 12, longitude: -15 },\n                GY: { latitude: 5, longitude: -59 },\n                HK: { latitude: 22.25, longitude: 114.1667 },\n                HM: { latitude: -53.1, longitude: 72.5167 },\n                HN: { latitude: 15, longitude: -86.5 },\n                HR: { latitude: 45.1667, longitude: 15.5 },\n                HT: { latitude: 19, longitude: -72.4167 },\n                HU: { latitude: 47, longitude: 20 },\n                ID: { latitude: -5, longitude: 120 },\n                IE: { latitude: 53, longitude: -8 },\n                IL: { latitude: 31.5, longitude: 34.75 },\n                IN: { latitude: 20, longitude: 77 },\n                IO: { latitude: -6, longitude: 71.5 },\n                IQ: { latitude: 33, longitude: 44 },\n                IR: { latitude: 32, longitude: 53 },\n                IS: { latitude: 65, longitude: -18 },\n                IT: { latitude: 42.8333, longitude: 12.8333 },\n                JM: { latitude: 18.25, longitude: -77.5 },\n                JO: { latitude: 31, longitude: 36 },\n                JP: { latitude: 36, longitude: 138 },\n                KE: { latitude: 1, longitude: 38 },\n                KG: { latitude: 41, longitude: 75 },\n                KH: { latitude: 13, longitude: 105 },\n                KI: { latitude: 1.4167, longitude: 173 },\n                KM: { latitude: -12.1667, longitude: 44.25 },\n                KN: { latitude: 17.3333, longitude: -62.75 },\n                KP: { latitude: 40, longitude: 127 },\n                KR: { latitude: 37, longitude: 127.5 },\n                KW: { latitude: 29.3375, longitude: 47.6581 },\n                KY: { latitude: 19.5, longitude: -80.5 },\n                KZ: { latitude: 48, longitude: 68 },\n                LA: { latitude: 18, longitude: 105 },\n                LB: { latitude: 33.8333, longitude: 35.8333 },\n                LC: { latitude: 13.8833, longitude: -61.1333 },\n                LI: { latitude: 47.1667, longitude: 9.5333 },\n                LK: { latitude: 7, longitude: 81 },\n                LR: { latitude: 6.5, longitude: -9.5 },\n                LS: { latitude: -29.5, longitude: 28.5 },\n                LT: { latitude: 55, longitude: 24 },\n                LU: { latitude: 49.75, longitude: 6 },\n                LV: { latitude: 57, longitude: 25 },\n                LY: { latitude: 25, longitude: 17 },\n                MA: { latitude: 32, longitude: -5 },\n                MC: { latitude: 43.7333, longitude: 7.4 },\n                MD: { latitude: 47, longitude: 29 },\n                ME: { latitude: 42.5, longitude: 19.4 },\n                MG: { latitude: -20, longitude: 47 },\n                MH: { latitude: 9, longitude: 168 },\n                MK: { latitude: 41.8333, longitude: 22 },\n                ML: { latitude: 17, longitude: -4 },\n                MM: { latitude: 22, longitude: 98 },\n                MN: { latitude: 46, longitude: 105 },\n                MO: { latitude: 22.1667, longitude: 113.55 },\n                MP: { latitude: 15.2, longitude: 145.75 },\n                MQ: { latitude: 14.6667, longitude: -61 },\n                MR: { latitude: 20, longitude: -12 },\n                MS: { latitude: 16.75, longitude: -62.2 },\n                MT: { latitude: 35.8333, longitude: 14.5833 },\n                MU: { latitude: -20.2833, longitude: 57.55 },\n                MV: { latitude: 3.25, longitude: 73 },\n                MW: { latitude: -13.5, longitude: 34 },\n                MX: { latitude: 23, longitude: -102 },\n                MY: { latitude: 2.5, longitude: 112.5 },\n                MZ: { latitude: -18.25, longitude: 35 },\n                NA: { latitude: -22, longitude: 17 },\n                NC: { latitude: -21.5, longitude: 165.5 },\n                NE: { latitude: 16, longitude: 8 },\n                NF: { latitude: -29.0333, longitude: 167.95 },\n                NG: { latitude: 10, longitude: 8 },\n                NI: { latitude: 13, longitude: -85 },\n                NL: { latitude: 52.5, longitude: 5.75 },\n                NO: { latitude: 62, longitude: 10 },\n                NP: { latitude: 28, longitude: 84 },\n                NR: { latitude: -0.5333, longitude: 166.9167 },\n                NU: { latitude: -19.0333, longitude: -169.8667 },\n                NZ: { latitude: -41, longitude: 174 },\n                OM: { latitude: 21, longitude: 57 },\n                PA: { latitude: 9, longitude: -80 },\n                PE: { latitude: -10, longitude: -76 },\n                PF: { latitude: -15, longitude: -140 },\n                PG: { latitude: -6, longitude: 147 },\n                PH: { latitude: 13, longitude: 122 },\n                PK: { latitude: 30, longitude: 70 },\n                PL: { latitude: 52, longitude: 20 },\n                PM: { latitude: 46.8333, longitude: -56.3333 },\n                PR: { latitude: 18.25, longitude: -66.5 },\n                PS: { latitude: 32, longitude: 35.25 },\n                PT: { latitude: 39.5, longitude: -8 },\n                PW: { latitude: 7.5, longitude: 134.5 },\n                PY: { latitude: -23, longitude: -58 },\n                QA: { latitude: 25.5, longitude: 51.25 },\n                RE: { latitude: -21.1, longitude: 55.6 },\n                RO: { latitude: 46, longitude: 25 },\n                RS: { latitude: 44, longitude: 21 },\n                RU: { latitude: 60, longitude: 100 },\n                RW: { latitude: -2, longitude: 30 },\n                SA: { latitude: 25, longitude: 45 },\n                SB: { latitude: -8, longitude: 159 },\n                SC: { latitude: -4.5833, longitude: 55.6667 },\n                SD: { latitude: 15, longitude: 30 },\n                SE: { latitude: 62, longitude: 15 },\n                SG: { latitude: 1.3667, longitude: 103.8 },\n                SH: { latitude: -15.9333, longitude: -5.7 },\n                SI: { latitude: 46, longitude: 15 },\n                SJ: { latitude: 78, longitude: 20 },\n                SK: { latitude: 48.6667, longitude: 19.5 },\n                SL: { latitude: 8.5, longitude: -11.5 },\n                SM: { latitude: 43.7667, longitude: 12.4167 },\n                SN: { latitude: 14, longitude: -14 },\n                SO: { latitude: 10, longitude: 49 },\n                SR: { latitude: 4, longitude: -56 },\n                ST: { latitude: 1, longitude: 7 },\n                SV: { latitude: 13.8333, longitude: -88.9167 },\n                SY: { latitude: 35, longitude: 38 },\n                SZ: { latitude: -26.5, longitude: 31.5 },\n                TC: { latitude: 21.75, longitude: -71.5833 },\n                TD: { latitude: 15, longitude: 19 },\n                TF: { latitude: -43, longitude: 67 },\n                TG: { latitude: 8, longitude: 1.1667 },\n                TH: { latitude: 15, longitude: 100 },\n                TJ: { latitude: 39, longitude: 71 },\n                TK: { latitude: -9, longitude: -172 },\n                TM: { latitude: 40, longitude: 60 },\n                TN: { latitude: 34, longitude: 9 },\n                TO: { latitude: -20, longitude: -175 },\n                TR: { latitude: 39, longitude: 35 },\n                TT: { latitude: 11, longitude: -61 },\n                TV: { latitude: -8, longitude: 178 },\n                TW: { latitude: 23.5, longitude: 121 },\n                TZ: { latitude: -6, longitude: 35 },\n                UA: { latitude: 49, longitude: 32 },\n                UG: { latitude: 1, longitude: 32 },\n                UM: { latitude: 19.2833, longitude: 166.6 },\n                US: { latitude: 38, longitude: -97 },\n                UY: { latitude: -33, longitude: -56 },\n                UZ: { latitude: 41, longitude: 64 },\n                VA: { latitude: 41.9, longitude: 12.45 },\n                VC: { latitude: 13.25, longitude: -61.2 },\n                VE: { latitude: 8, longitude: -66 },\n                VG: { latitude: 18.5, longitude: -64.5 },\n                VI: { latitude: 18.3333, longitude: -64.8333 },\n                VN: { latitude: 16, longitude: 106 },\n                VU: { latitude: -16, longitude: 167 },\n                WF: { latitude: -13.3, longitude: -176.2 },\n                WS: { latitude: -13.5833, longitude: -172.3333 },\n                YE: { latitude: 15, longitude: 48 },\n                YT: { latitude: -12.8333, longitude: 45.1667 },\n                ZA: { latitude: -29, longitude: 24 },\n                ZM: { latitude: -15, longitude: 30 },\n                ZW: { latitude: -20, longitude: 30 }\n            };\n            _this.mapData = [\n                { code: 'AF', name: 'Afghanistan', value: 32358260, color: _this.getRandomGeoColor() },\n                { code: 'AL', name: 'Albania', value: 3215988, color: _this.getRandomGeoColor() },\n                { code: 'DZ', name: 'Algeria', value: 35980193, color: _this.getRandomGeoColor() },\n                { code: 'AO', name: 'Angola', value: 19618432, color: _this.getRandomGeoColor() },\n                { code: 'AR', name: 'Argentina', value: 40764561, color: _this.getRandomGeoColor() },\n                { code: 'AM', name: 'Armenia', value: 3100236, color: _this.getRandomGeoColor() },\n                { code: 'AU', name: 'Australia', value: 22605732, color: _this.getRandomGeoColor() },\n                { code: 'AT', name: 'Austria', value: 8413429, color: _this.getRandomGeoColor() },\n                { code: 'AZ', name: 'Azerbaijan', value: 9306023, color: _this.getRandomGeoColor() },\n                { code: 'BH', name: 'Bahrain', value: 1323535, color: _this.getRandomGeoColor() },\n                { code: 'BD', name: 'Bangladesh', value: 150493658, color: _this.getRandomGeoColor() },\n                { code: 'BY', name: 'Belarus', value: 9559441, color: _this.getRandomGeoColor() },\n                { code: 'BE', name: 'Belgium', value: 10754056, color: _this.getRandomGeoColor() },\n                { code: 'BJ', name: 'Benin', value: 9099922, color: _this.getRandomGeoColor() },\n                { code: 'BT', name: 'Bhutan', value: 738267, color: _this.getRandomGeoColor() },\n                { code: 'BO', name: 'Bolivia', value: 10088108, color: _this.getRandomGeoColor() },\n                { code: 'BA', name: 'Bosnia and Herzegovina', value: 3752228, color: _this.getRandomGeoColor() },\n                { code: 'BW', name: 'Botswana', value: 2030738, color: _this.getRandomGeoColor() },\n                { code: 'BR', name: 'Brazil', value: 196655014, color: _this.getRandomGeoColor() },\n                { code: 'BN', name: 'Brunei', value: 405938, color: _this.getRandomGeoColor() },\n                { code: 'BG', name: 'Bulgaria', value: 7446135, color: _this.getRandomGeoColor() },\n                { code: 'BF', name: 'Burkina Faso', value: 16967845, color: _this.getRandomGeoColor() },\n                { code: 'BI', name: 'Burundi', value: 8575172, color: _this.getRandomGeoColor() },\n                { code: 'KH', name: 'Cambodia', value: 14305183, color: _this.getRandomGeoColor() },\n                { code: 'CM', name: 'Cameroon', value: 20030362, color: _this.getRandomGeoColor() },\n                { code: 'CA', name: 'Canada', value: 34349561, color: _this.getRandomGeoColor() },\n                { code: 'CV', name: 'Cape Verde', value: 500585, color: _this.getRandomGeoColor() },\n                { code: 'CF', name: 'Central African Rep.', value: 4486837, color: _this.getRandomGeoColor() },\n                { code: 'TD', name: 'Chad', value: 11525496, color: _this.getRandomGeoColor() },\n                { code: 'CL', name: 'Chile', value: 17269525, color: _this.getRandomGeoColor() },\n                { code: 'CN', name: 'China', value: 1347565324, color: _this.getRandomGeoColor() },\n                { code: 'CO', name: 'Colombia', value: 46927125, color: _this.getRandomGeoColor() },\n                { code: 'KM', name: 'Comoros', value: 753943, color: _this.getRandomGeoColor() },\n                { code: 'CD', name: 'Congo, Dem. Rep.', value: 67757577, color: _this.getRandomGeoColor() },\n                { code: 'CG', name: 'Congo, Rep.', value: 4139748, color: _this.getRandomGeoColor() },\n                { code: 'CR', name: 'Costa Rica', value: 4726575, color: _this.getRandomGeoColor() },\n                { code: 'CI', name: \"Cote d'Ivoire\", value: 20152894, color: _this.getRandomGeoColor() },\n                { code: 'HR', name: 'Croatia', value: 4395560, color: _this.getRandomGeoColor() },\n                { code: 'CU', name: 'Cuba', value: 11253665, color: _this.getRandomGeoColor() },\n                { code: 'CY', name: 'Cyprus', value: 1116564, color: _this.getRandomGeoColor() },\n                { code: 'CZ', name: 'Czech Rep.', value: 10534293, color: _this.getRandomGeoColor() },\n                { code: 'DK', name: 'Denmark', value: 5572594, color: _this.getRandomGeoColor() },\n                { code: 'DJ', name: 'Djibouti', value: 905564, color: _this.getRandomGeoColor() },\n                { code: 'DO', name: 'Dominican Rep.', value: 10056181, color: _this.getRandomGeoColor() },\n                { code: 'EC', name: 'Ecuador', value: 14666055, color: _this.getRandomGeoColor() },\n                { code: 'EG', name: 'Egypt', value: 82536770, color: _this.getRandomGeoColor() },\n                { code: 'SV', name: 'El Salvador', value: 6227491, color: _this.getRandomGeoColor() },\n                { code: 'GQ', name: 'Equatorial Guinea', value: 720213, color: _this.getRandomGeoColor() },\n                { code: 'ER', name: 'Eritrea', value: 5415280, color: _this.getRandomGeoColor() },\n                { code: 'EE', name: 'Estonia', value: 1340537, color: _this.getRandomGeoColor() },\n                { code: 'ET', name: 'Ethiopia', value: 84734262, color: _this.getRandomGeoColor() },\n                { code: 'FJ', name: 'Fiji', value: 868406, color: _this.getRandomGeoColor() },\n                { code: 'FI', name: 'Finland', value: 5384770, color: _this.getRandomGeoColor() },\n                { code: 'FR', name: 'France', value: 63125894, color: _this.getRandomGeoColor() },\n                { code: 'GA', name: 'Gabon', value: 1534262, color: _this.getRandomGeoColor() },\n                { code: 'GM', name: 'Gambia', value: 1776103, color: _this.getRandomGeoColor() },\n                { code: 'GE', name: 'Georgia', value: 4329026, color: _this.getRandomGeoColor() },\n                { code: 'DE', name: 'Germany', value: 82162512, color: _this.getRandomGeoColor() },\n                { code: 'GH', name: 'Ghana', value: 24965816, color: _this.getRandomGeoColor() },\n                { code: 'GR', name: 'Greece', value: 11390031, color: _this.getRandomGeoColor() },\n                { code: 'GT', name: 'Guatemala', value: 14757316, color: _this.getRandomGeoColor() },\n                { code: 'GN', name: 'Guinea', value: 10221808, color: _this.getRandomGeoColor() },\n                { code: 'GW', name: 'Guinea-Bissau', value: 1547061, color: _this.getRandomGeoColor() },\n                { code: 'GY', name: 'Guyana', value: 756040, color: _this.getRandomGeoColor() },\n                { code: 'HT', name: 'Haiti', value: 10123787, color: _this.getRandomGeoColor() },\n                { code: 'HN', name: 'Honduras', value: 7754687, color: _this.getRandomGeoColor() },\n                { code: 'HK', name: 'Hong Kong, China', value: 7122187, color: _this.getRandomGeoColor() },\n                { code: 'HU', name: 'Hungary', value: 9966116, color: _this.getRandomGeoColor() },\n                { code: 'IS', name: 'Iceland', value: 324366, color: _this.getRandomGeoColor() },\n                { code: 'IN', name: 'India', value: 1241491960, color: _this.getRandomGeoColor() },\n                { code: 'ID', name: 'Indonesia', value: 242325638, color: _this.getRandomGeoColor() },\n                { code: 'IR', name: 'Iran', value: 74798599, color: _this.getRandomGeoColor() },\n                { code: 'IQ', name: 'Iraq', value: 32664942, color: _this.getRandomGeoColor() },\n                { code: 'IE', name: 'Ireland', value: 4525802, color: _this.getRandomGeoColor() },\n                { code: 'IL', name: 'Israel', value: 7562194, color: _this.getRandomGeoColor() },\n                { code: 'IT', name: 'Italy', value: 60788694, color: _this.getRandomGeoColor() },\n                { code: 'JM', name: 'Jamaica', value: 2751273, color: _this.getRandomGeoColor() },\n                { code: 'JP', name: 'Japan', value: 126497241, color: _this.getRandomGeoColor() },\n                { code: 'JO', name: 'Jordan', value: 6330169, color: _this.getRandomGeoColor() },\n                { code: 'KZ', name: 'Kazakhstan', value: 16206750, color: _this.getRandomGeoColor() },\n                { code: 'KE', name: 'Kenya', value: 41609728, color: _this.getRandomGeoColor() },\n                { code: 'KP', name: 'Korea, Dem. Rep.', value: 24451285, color: _this.getRandomGeoColor() },\n                { code: 'KR', name: 'Korea, Rep.', value: 48391343, color: _this.getRandomGeoColor() },\n                { code: 'KW', name: 'Kuwait', value: 2818042, color: _this.getRandomGeoColor() },\n                { code: 'KG', name: 'Kyrgyzstan', value: 5392580, color: _this.getRandomGeoColor() },\n                { code: 'LA', name: 'Laos', value: 6288037, color: _this.getRandomGeoColor() },\n                { code: 'LV', name: 'Latvia', value: 2243142, color: _this.getRandomGeoColor() },\n                { code: 'LB', name: 'Lebanon', value: 4259405, color: _this.getRandomGeoColor() },\n                { code: 'LS', name: 'Lesotho', value: 2193843, color: _this.getRandomGeoColor() },\n                { code: 'LR', name: 'Liberia', value: 4128572, color: _this.getRandomGeoColor() },\n                { code: 'LY', name: 'Libya', value: 6422772, color: _this.getRandomGeoColor() },\n                { code: 'LT', name: 'Lithuania', value: 3307481, color: _this.getRandomGeoColor() },\n                { code: 'LU', name: 'Luxembourg', value: 515941, color: _this.getRandomGeoColor() },\n                { code: 'MK', name: 'Macedonia, FYR', value: 2063893, color: _this.getRandomGeoColor() },\n                { code: 'MG', name: 'Madagascar', value: 21315135, color: _this.getRandomGeoColor() },\n                { code: 'MW', name: 'Malawi', value: 15380888, color: _this.getRandomGeoColor() },\n                { code: 'MY', name: 'Malaysia', value: 28859154, color: _this.getRandomGeoColor() },\n                { code: 'ML', name: 'Mali', value: 15839538, color: _this.getRandomGeoColor() },\n                { code: 'MR', name: 'Mauritania', value: 3541540, color: _this.getRandomGeoColor() },\n                { code: 'MU', name: 'Mauritius', value: 1306593, color: _this.getRandomGeoColor() },\n                { code: 'MX', name: 'Mexico', value: 114793341, color: _this.getRandomGeoColor() },\n                { code: 'MD', name: 'Moldova', value: 3544864, color: _this.getRandomGeoColor() },\n                { code: 'MN', name: 'Mongolia', value: 2800114, color: _this.getRandomGeoColor() },\n                { code: 'ME', name: 'Montenegro', value: 632261, color: _this.getRandomGeoColor() },\n                { code: 'MA', name: 'Morocco', value: 32272974, color: _this.getRandomGeoColor() },\n                { code: 'MZ', name: 'Mozambique', value: 23929708, color: _this.getRandomGeoColor() },\n                { code: 'MM', name: 'Myanmar', value: 48336763, color: _this.getRandomGeoColor() },\n                { code: 'NA', name: 'Namibia', value: 2324004, color: _this.getRandomGeoColor() },\n                { code: 'NP', name: 'Nepal', value: 30485798, color: _this.getRandomGeoColor() },\n                { code: 'NL', name: 'Netherlands', value: 16664746, color: _this.getRandomGeoColor() },\n                { code: 'NZ', name: 'New Zealand', value: 4414509, color: _this.getRandomGeoColor() },\n                { code: 'NI', name: 'Nicaragua', value: 5869859, color: _this.getRandomGeoColor() },\n                { code: 'NE', name: 'Niger', value: 16068994, color: _this.getRandomGeoColor() },\n                { code: 'NG', name: 'Nigeria', value: 162470737, color: _this.getRandomGeoColor() },\n                { code: 'NO', name: 'Norway', value: 4924848, color: _this.getRandomGeoColor() },\n                { code: 'OM', name: 'Oman', value: 2846145, color: _this.getRandomGeoColor() },\n                { code: 'PK', name: 'Pakistan', value: 176745364, color: _this.getRandomGeoColor() },\n                { code: 'PA', name: 'Panama', value: 3571185, color: _this.getRandomGeoColor() },\n                { code: 'PG', name: 'Papua New Guinea', value: 7013829, color: _this.getRandomGeoColor() },\n                { code: 'PY', name: 'Paraguay', value: 6568290, color: _this.getRandomGeoColor() },\n                { code: 'PE', name: 'Peru', value: 29399817, color: _this.getRandomGeoColor() },\n                { code: 'PH', name: 'Philippines', value: 94852030, color: _this.getRandomGeoColor() },\n                { code: 'PL', name: 'Poland', value: 38298949, color: _this.getRandomGeoColor() },\n                { code: 'PT', name: 'Portugal', value: 10689663, color: _this.getRandomGeoColor() },\n                { code: 'PR', name: 'Puerto Rico', value: 3745526, color: _this.getRandomGeoColor() },\n                { code: 'QA', name: 'Qatar', value: 1870041, color: _this.getRandomGeoColor() },\n                { code: 'RO', name: 'Romania', value: 21436495, color: _this.getRandomGeoColor() },\n                { code: 'RU', name: 'Russia', value: 142835555, color: _this.getRandomGeoColor() },\n                { code: 'RW', name: 'Rwanda', value: 10942950, color: _this.getRandomGeoColor() },\n                { code: 'SA', name: 'Saudi Arabia', value: 28082541, color: _this.getRandomGeoColor() },\n                { code: 'SN', name: 'Senegal', value: 12767556, color: _this.getRandomGeoColor() },\n                { code: 'RS', name: 'Serbia', value: 9853969, color: _this.getRandomGeoColor() },\n                { code: 'SL', name: 'Sierra Leone', value: 5997486, color: _this.getRandomGeoColor() },\n                { code: 'SG', name: 'Singapore', value: 5187933, color: _this.getRandomGeoColor() },\n                { code: 'SK', name: 'Slovak Republic', value: 5471502, color: _this.getRandomGeoColor() },\n                { code: 'SI', name: 'Slovenia', value: 2035012, color: _this.getRandomGeoColor() },\n                { code: 'SB', name: 'Solomon Islands', value: 552267, color: _this.getRandomGeoColor() },\n                { code: 'SO', name: 'Somalia', value: 9556873, color: _this.getRandomGeoColor() },\n                { code: 'ZA', name: 'South Africa', value: 50459978, color: _this.getRandomGeoColor() },\n                { code: 'ES', name: 'Spain', value: 46454895, color: _this.getRandomGeoColor() },\n                { code: 'LK', name: 'Sri Lanka', value: 21045394, color: _this.getRandomGeoColor() },\n                { code: 'SD', name: 'Sudan', value: 34735288, color: _this.getRandomGeoColor() },\n                { code: 'SR', name: 'Suriname', value: 529419, color: _this.getRandomGeoColor() },\n                { code: 'SZ', name: 'Swaziland', value: 1203330, color: _this.getRandomGeoColor() },\n                { code: 'SE', name: 'Sweden', value: 9440747, color: _this.getRandomGeoColor() },\n                { code: 'CH', name: 'Switzerland', value: 7701690, color: _this.getRandomGeoColor() },\n                { code: 'SY', name: 'Syria', value: 20766037, color: _this.getRandomGeoColor() },\n                { code: 'TW', name: 'Taiwan', value: 23072000, color: _this.getRandomGeoColor() },\n                { code: 'TJ', name: 'Tajikistan', value: 6976958, color: _this.getRandomGeoColor() },\n                { code: 'TZ', name: 'Tanzania', value: 46218486, color: _this.getRandomGeoColor() },\n                { code: 'TH', name: 'Thailand', value: 69518555, color: _this.getRandomGeoColor() },\n                { code: 'TG', name: 'Togo', value: 6154813, color: _this.getRandomGeoColor() },\n                { code: 'TT', name: 'Trinidad and Tobago', value: 1346350, color: _this.getRandomGeoColor() },\n                { code: 'TN', name: 'Tunisia', value: 10594057, color: _this.getRandomGeoColor() },\n                { code: 'TR', name: 'Turkey', value: 73639596, color: _this.getRandomGeoColor() },\n                { code: 'TM', name: 'Turkmenistan', value: 5105301, color: _this.getRandomGeoColor() },\n                { code: 'UG', name: 'Uganda', value: 34509205, color: _this.getRandomGeoColor() },\n                { code: 'UA', name: 'Ukraine', value: 45190180, color: _this.getRandomGeoColor() },\n                { code: 'AE', name: 'United Arab Emirates', value: 7890924, color: _this.getRandomGeoColor() },\n                { code: 'GB', name: 'United Kingdom', value: 62417431, color: _this.getRandomGeoColor() },\n                { code: 'US', name: 'United States', value: 313085380, color: _this.getRandomGeoColor() },\n                { code: 'UY', name: 'Uruguay', value: 3380008, color: _this.getRandomGeoColor() },\n                { code: 'UZ', name: 'Uzbekistan', value: 27760267, color: _this.getRandomGeoColor() },\n                { code: 'VE', name: 'Venezuela', value: 29436891, color: _this.getRandomGeoColor() },\n                { code: 'PS', name: 'West Bank and Gaza', value: 4152369, color: _this.getRandomGeoColor() },\n                { code: 'VN', name: 'Vietnam', value: 88791996, color: _this.getRandomGeoColor() },\n                { code: 'YE', name: 'Yemen, Rep.', value: 24799880, color: _this.getRandomGeoColor() },\n                { code: 'ZM', name: 'Zambia', value: 13474959, color: _this.getRandomGeoColor() },\n                { code: 'ZW', name: 'Zimbabwe', value: 12754378, color: _this.getRandomGeoColor() }\n            ];\n            _this.mapData.forEach(function (itemOpt) {\n                if (itemOpt.value > _this.max) {\n                    _this.max = itemOpt.value;\n                }\n                if (itemOpt.value < _this.min) {\n                    _this.min = itemOpt.value;\n                }\n            });\n            _this.options = {\n                title: {\n                    text: 'World Population (2011)',\n                    left: 'center',\n                    top: 'top',\n                    textStyle: {\n                        color: _this.bubbleTheme.titleColor\n                    }\n                },\n                tooltip: {\n                    trigger: 'item',\n                    formatter: function (params) {\n                        return params.name + \": \" + params.value[2];\n                    }\n                },\n                visualMap: {\n                    show: false,\n                    min: 0,\n                    max: _this.max,\n                    inRange: {\n                        symbolSize: [6, 60]\n                    }\n                },\n                geo: {\n                    name: 'World Population (2010)',\n                    type: 'map',\n                    map: 'world',\n                    roam: true,\n                    label: {\n                        emphasis: {\n                            show: false\n                        }\n                    },\n                    itemStyle: {\n                        normal: {\n                            areaColor: _this.bubbleTheme.areaColor,\n                            borderColor: _this.bubbleTheme.areaBorderColor\n                        },\n                        emphasis: {\n                            areaColor: _this.bubbleTheme.areaHoverColor\n                        }\n                    },\n                    zoom: 1.1\n                },\n                series: [\n                    {\n                        type: 'scatter',\n                        coordinateSystem: 'geo',\n                        data: _this.mapData.map(function (itemOpt) {\n                            return {\n                                name: itemOpt.name,\n                                value: [_this.latlong[itemOpt.code].longitude, _this.latlong[itemOpt.code].latitude, itemOpt.value],\n                                itemStyle: {\n                                    normal: {\n                                        color: itemOpt.color\n                                    }\n                                }\n                            };\n                        })\n                    }\n                ]\n            };\n        });\n    }\n    BubbleMapComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    BubbleMapComponent.prototype.getRandomGeoColor = function () {\n        var index = Math.round(Math.random() * this.geoColors.length);\n        return this.geoColors[index];\n    };\n    var _a, _b;\n    BubbleMapComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-bubble-map',\n            styles: [__webpack_require__(/*! ./bubble-map.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.scss\")],\n            template: \"\\n    <nb-card>\\n    <nb-card-header>Bubble Maps</nb-card-header>\\n      <nb-card-body>\\n        <div echarts [options]=\\\"options\\\" class=\\\"echarts\\\"></div>\\n      </nb-card-body>\\n    </nb-card>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _a : Object, typeof (_b = typeof http_1.HttpClient !== \"undefined\" && http_1.HttpClient) === \"function\" ? _b : Object])\n    ], BubbleMapComponent);\n    return BubbleMapComponent;\n}());\nexports.BubbleMapComponent = BubbleMapComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss":
/*!*****************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./gmaps.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL2dtYXBzL2dtYXBzLmNvbXBvbmVudC5zY3NzPzc0MGYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLGlTQUFrSjs7QUFFL0s7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9nbWFwcy9nbWFwcy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9nbWFwcy5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.ts":
/*!***************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar GmapsComponent = /** @class */ (function () {\n    function GmapsComponent() {\n        this.lat = 51.678418;\n        this.lng = 7.809007;\n    }\n    GmapsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-gmaps',\n            styles: [__webpack_require__(/*! ./gmaps.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.scss\")],\n            template: \"\\n    <nb-card>\\n      <nb-card-header>Google Maps</nb-card-header>\\n      <nb-card-body>\\n        <agm-map [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\">\\n          <agm-marker [latitude]=\\\"lat\\\" [longitude]=\\\"lng\\\"></agm-marker>\\n        </agm-map>\\n      </nb-card-body>\\n    </nb-card>\\n  \"\n        })\n    ], GmapsComponent);\n    return GmapsComponent;\n}());\nexports.GmapsComponent = GmapsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL2dtYXBzL2dtYXBzLmNvbXBvbmVudC50cz8zMTI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQWdCMUM7SUFkQTtRQWVJLFFBQUcsR0FBRyxTQUFTLENBQUM7UUFDaEIsUUFBRyxHQUFHLFFBQVEsQ0FBQztJQUNuQixDQUFDO0lBSFksY0FBYztRQWQxQixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFdBQVc7WUFDckIsU0FBUyxtQkFBRyxzR0FBeUI7WUFDckMsUUFBUSxFQUFFLGdTQVNYO1NBQ0YsQ0FBQztPQUNXLGNBQWMsQ0FHMUI7SUFBRCxxQkFBQztDQUFBO0FBSFksd0NBQWMiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL2dtYXBzL2dtYXBzLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1nbWFwcycsXG4gICAgc3R5bGVVcmxzOiBbJy4vZ21hcHMuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZTogYFxuICAgIDxuYi1jYXJkPlxuICAgICAgPG5iLWNhcmQtaGVhZGVyPkdvb2dsZSBNYXBzPC9uYi1jYXJkLWhlYWRlcj5cbiAgICAgIDxuYi1jYXJkLWJvZHk+XG4gICAgICAgIDxhZ20tbWFwIFtsYXRpdHVkZV09XCJsYXRcIiBbbG9uZ2l0dWRlXT1cImxuZ1wiPlxuICAgICAgICAgIDxhZ20tbWFya2VyIFtsYXRpdHVkZV09XCJsYXRcIiBbbG9uZ2l0dWRlXT1cImxuZ1wiPjwvYWdtLW1hcmtlcj5cbiAgICAgICAgPC9hZ20tbWFwPlxuICAgICAgPC9uYi1jYXJkLWJvZHk+XG4gICAgPC9uYi1jYXJkPlxuICBgXG59KVxuZXhwb3J0IGNsYXNzIEdtYXBzQ29tcG9uZW50IHtcbiAgICBsYXQgPSA1MS42Nzg0MTg7XG4gICAgbG5nID0gNy44MDkwMDc7XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss":
/*!*********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./leaflet.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL2xlYWZsZXQvbGVhZmxldC5jb21wb25lbnQuc2Nzcz8wMDdmIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyx1U0FBb0o7O0FBRWpMO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL21hcHMvbGVhZmxldC9sZWFmbGV0LmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2xlYWZsZXQuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.ts":
/*!*******************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.ts ***!
  \*******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar L = __webpack_require__(/*! leaflet */ \"./node_modules/leaflet/dist/leaflet-src.js\");\n__webpack_require__(/*! style-loader!leaflet/dist/leaflet.css */ \"./node_modules/style-loader/index.js!./node_modules/leaflet/dist/leaflet.css\");\nvar LeafletComponent = /** @class */ (function () {\n    function LeafletComponent() {\n        this.options = {\n            layers: [L.tileLayer('http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', { maxZoom: 18, attribution: '...' })],\n            zoom: 5,\n            center: L.latLng({ lat: 38.991709, lng: -76.886109 })\n        };\n    }\n    LeafletComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-leaflet',\n            styles: [__webpack_require__(/*! ./leaflet.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.scss\")],\n            template: \"\\n    <nb-card>\\n      <nb-card-header>Leaflet Maps</nb-card-header>\\n      <nb-card-body>\\n        <div leaflet [leafletOptions]=\\\"options\\\"></div>\\n      </nb-card-body>\\n    </nb-card>\\n  \"\n        })\n    ], LeafletComponent);\n    return LeafletComponent;\n}());\nexports.LeafletComponent = LeafletComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL2xlYWZsZXQvbGVhZmxldC5jb21wb25lbnQudHM/ZTVkYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFFMUMseUZBQTZCO0FBQzdCLGlKQUErQztBQWMvQztJQVpBO1FBYUksWUFBTyxHQUFHO1lBQ04sTUFBTSxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxtREFBbUQsRUFBRSxFQUFFLE9BQU8sRUFBRSxFQUFFLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxDQUFDLENBQUM7WUFDL0csSUFBSSxFQUFFLENBQUM7WUFDUCxNQUFNLEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxFQUFFLEdBQUcsRUFBRSxTQUFTLEVBQUUsR0FBRyxFQUFFLENBQUMsU0FBUyxFQUFFLENBQUM7U0FDeEQsQ0FBQztJQUNOLENBQUM7SUFOWSxnQkFBZ0I7UUFaNUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsbUJBQUcsNEdBQTJCO1lBQ3ZDLFFBQVEsRUFBRSxpTUFPWDtTQUNGLENBQUM7T0FDVyxnQkFBZ0IsQ0FNNUI7SUFBRCx1QkFBQztDQUFBO0FBTlksNENBQWdCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9sZWFmbGV0L2xlYWZsZXQuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCAqIGFzIEwgZnJvbSAnbGVhZmxldCc7XG5pbXBvcnQgJ3N0eWxlLWxvYWRlciFsZWFmbGV0L2Rpc3QvbGVhZmxldC5jc3MnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1sZWFmbGV0JyxcbiAgICBzdHlsZVVybHM6IFsnLi9sZWFmbGV0LmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGU6IGBcbiAgICA8bmItY2FyZD5cbiAgICAgIDxuYi1jYXJkLWhlYWRlcj5MZWFmbGV0IE1hcHM8L25iLWNhcmQtaGVhZGVyPlxuICAgICAgPG5iLWNhcmQtYm9keT5cbiAgICAgICAgPGRpdiBsZWFmbGV0IFtsZWFmbGV0T3B0aW9uc109XCJvcHRpb25zXCI+PC9kaXY+XG4gICAgICA8L25iLWNhcmQtYm9keT5cbiAgICA8L25iLWNhcmQ+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTGVhZmxldENvbXBvbmVudCB7XG4gICAgb3B0aW9ucyA9IHtcbiAgICAgICAgbGF5ZXJzOiBbTC50aWxlTGF5ZXIoJ2h0dHA6Ly97c30udGlsZS5vcGVuc3RyZWV0bWFwLm9yZy97en0ve3h9L3t5fS5wbmcnLCB7IG1heFpvb206IDE4LCBhdHRyaWJ1dGlvbjogJy4uLicgfSldLFxuICAgICAgICB6b29tOiA1LFxuICAgICAgICBjZW50ZXI6IEwubGF0TG5nKHsgbGF0OiAzOC45OTE3MDksIGxuZzogLTc2Ljg4NjEwOSB9KVxuICAgIH07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/maps-routing.module.ts":
/*!*************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/maps-routing.module.ts ***!
  \*************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar router_1 = __webpack_require__(/*! @angular/router */ \"./node_modules/@angular/router/fesm5/router.js\");\nvar maps_component_1 = __webpack_require__(/*! ./maps.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/maps.component.ts\");\nvar gmaps_component_1 = __webpack_require__(/*! ./gmaps/gmaps.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/gmaps/gmaps.component.ts\");\nvar leaflet_component_1 = __webpack_require__(/*! ./leaflet/leaflet.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/leaflet/leaflet.component.ts\");\nvar bubble_map_component_1 = __webpack_require__(/*! ./bubble/bubble-map.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/bubble/bubble-map.component.ts\");\nvar search_map_component_1 = __webpack_require__(/*! ./search-map/search-map.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.ts\");\nvar map_component_1 = __webpack_require__(/*! ./search-map/map/map.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.ts\");\nvar search_component_1 = __webpack_require__(/*! ./search-map/search/search.component */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts\");\nvar routes = [\n    {\n        path: '',\n        component: maps_component_1.MapsComponent,\n        children: [\n            {\n                path: 'gmaps',\n                component: gmaps_component_1.GmapsComponent\n            },\n            {\n                path: 'leaflet',\n                component: leaflet_component_1.LeafletComponent\n            },\n            {\n                path: 'bubble',\n                component: bubble_map_component_1.BubbleMapComponent\n            },\n            {\n                path: 'searchmap',\n                component: search_map_component_1.SearchMapComponent\n            }\n        ]\n    }\n];\nvar MapsRoutingModule = /** @class */ (function () {\n    function MapsRoutingModule() {\n    }\n    MapsRoutingModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [router_1.RouterModule.forChild(routes)],\n            exports: [router_1.RouterModule]\n        })\n    ], MapsRoutingModule);\n    return MapsRoutingModule;\n}());\nexports.MapsRoutingModule = MapsRoutingModule;\nexports.routedComponents = [\n    maps_component_1.MapsComponent,\n    gmaps_component_1.GmapsComponent,\n    leaflet_component_1.LeafletComponent,\n    bubble_map_component_1.BubbleMapComponent,\n    search_map_component_1.SearchMapComponent,\n    map_component_1.MapComponent,\n    search_component_1.SearchComponent\n];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL21hcHMtcm91dGluZy5tb2R1bGUudHM/NDUxZCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBeUM7QUFDekMsNEdBQXVEO0FBRXZELG1JQUFpRDtBQUNqRCxrSkFBeUQ7QUFDekQsNEpBQStEO0FBQy9ELG1LQUFtRTtBQUNuRSwyS0FBdUU7QUFDdkUsOEpBQThEO0FBQzlELDZLQUF1RTtBQUV2RSxJQUFNLE1BQU0sR0FBVztJQUNuQjtRQUNJLElBQUksRUFBRSxFQUFFO1FBQ1IsU0FBUyxFQUFFLDhCQUFhO1FBQ3hCLFFBQVEsRUFBRTtZQUNOO2dCQUNJLElBQUksRUFBRSxPQUFPO2dCQUNiLFNBQVMsRUFBRSxnQ0FBYzthQUM1QjtZQUNEO2dCQUNJLElBQUksRUFBRSxTQUFTO2dCQUNmLFNBQVMsRUFBRSxvQ0FBZ0I7YUFDOUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsUUFBUTtnQkFDZCxTQUFTLEVBQUUseUNBQWtCO2FBQ2hDO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFdBQVc7Z0JBQ2pCLFNBQVMsRUFBRSx5Q0FBa0I7YUFDaEM7U0FDSjtLQUNKO0NBQ0osQ0FBQztBQU1GO0lBQUE7SUFBZ0MsQ0FBQztJQUFwQixpQkFBaUI7UUFKN0IsZUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFLENBQUMscUJBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsT0FBTyxFQUFFLENBQUMscUJBQVksQ0FBQztTQUMxQixDQUFDO09BQ1csaUJBQWlCLENBQUc7SUFBRCx3QkFBQztDQUFBO0FBQXBCLDhDQUFpQjtBQUVqQix3QkFBZ0IsR0FBRztJQUM1Qiw4QkFBYTtJQUNiLGdDQUFjO0lBQ2Qsb0NBQWdCO0lBQ2hCLHlDQUFrQjtJQUNsQix5Q0FBa0I7SUFDbEIsNEJBQVk7SUFDWixrQ0FBZTtDQUNsQixDQUFDIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9tYXBzLXJvdXRpbmcubW9kdWxlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFJvdXRlcywgUm91dGVyTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvcm91dGVyJztcblxuaW1wb3J0IHsgTWFwc0NvbXBvbmVudCB9IGZyb20gJy4vbWFwcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgR21hcHNDb21wb25lbnQgfSBmcm9tICcuL2dtYXBzL2dtYXBzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBMZWFmbGV0Q29tcG9uZW50IH0gZnJvbSAnLi9sZWFmbGV0L2xlYWZsZXQuY29tcG9uZW50JztcbmltcG9ydCB7IEJ1YmJsZU1hcENvbXBvbmVudCB9IGZyb20gJy4vYnViYmxlL2J1YmJsZS1tYXAuY29tcG9uZW50JztcbmltcG9ydCB7IFNlYXJjaE1hcENvbXBvbmVudCB9IGZyb20gJy4vc2VhcmNoLW1hcC9zZWFyY2gtbWFwLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBNYXBDb21wb25lbnQgfSBmcm9tICcuL3NlYXJjaC1tYXAvbWFwL21hcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2VhcmNoQ29tcG9uZW50IH0gZnJvbSAnLi9zZWFyY2gtbWFwL3NlYXJjaC9zZWFyY2guY29tcG9uZW50JztcblxuY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gICAge1xuICAgICAgICBwYXRoOiAnJyxcbiAgICAgICAgY29tcG9uZW50OiBNYXBzQ29tcG9uZW50LFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICdnbWFwcycsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBHbWFwc0NvbXBvbmVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAnbGVhZmxldCcsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBMZWFmbGV0Q29tcG9uZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICdidWJibGUnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogQnViYmxlTWFwQ29tcG9uZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICdzZWFyY2htYXAnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogU2VhcmNoTWFwQ29tcG9uZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG5dO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQocm91dGVzKV0sXG4gICAgZXhwb3J0czogW1JvdXRlck1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgTWFwc1JvdXRpbmdNb2R1bGUge31cblxuZXhwb3J0IGNvbnN0IHJvdXRlZENvbXBvbmVudHMgPSBbXG4gICAgTWFwc0NvbXBvbmVudCxcbiAgICBHbWFwc0NvbXBvbmVudCxcbiAgICBMZWFmbGV0Q29tcG9uZW50LFxuICAgIEJ1YmJsZU1hcENvbXBvbmVudCxcbiAgICBTZWFyY2hNYXBDb21wb25lbnQsXG4gICAgTWFwQ29tcG9uZW50LFxuICAgIFNlYXJjaENvbXBvbmVudFxuXTtcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/maps-routing.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/maps.component.ts":
/*!********************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/maps.component.ts ***!
  \********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar MapsComponent = /** @class */ (function () {\n    function MapsComponent() {\n    }\n    MapsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-maps',\n            template: \"\\n    <router-outlet></router-outlet>\\n  \"\n        })\n    ], MapsComponent);\n    return MapsComponent;\n}());\nexports.MapsComponent = MapsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL21hcHMuY29tcG9uZW50LnRzP2IwZTkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBUTFDO0lBQUE7SUFBNEIsQ0FBQztJQUFoQixhQUFhO1FBTnpCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsVUFBVTtZQUNwQixRQUFRLEVBQUUsMkNBRVg7U0FDRixDQUFDO09BQ1csYUFBYSxDQUFHO0lBQUQsb0JBQUM7Q0FBQTtBQUFoQixzQ0FBYSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL21hcHMvbWFwcy5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtbWFwcycsXG4gICAgdGVtcGxhdGU6IGBcbiAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTWFwc0NvbXBvbmVudCB7fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/maps.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/maps.module.ts":
/*!*****************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/maps.module.ts ***!
  \*****************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar core_2 = __webpack_require__(/*! @agm/core */ \"./node_modules/@agm/core/fesm5/agm-core.js\");\nvar ngx_leaflet_1 = __webpack_require__(/*! @asymmetrik/ngx-leaflet */ \"./node_modules/@asymmetrik/ngx-leaflet/dist/index.js\");\nvar ngx_echarts_1 = __webpack_require__(/*! ngx-echarts */ \"./node_modules/ngx-echarts/fesm5/ngx-echarts.js\");\nvar theme_module_1 = __webpack_require__(/*! ../../@theme/theme.module */ \"./src/main/webapp/app/ngx-admin/@theme/theme.module.ts\");\nvar maps_routing_module_1 = __webpack_require__(/*! ./maps-routing.module */ \"./src/main/webapp/app/ngx-admin/pages/maps/maps-routing.module.ts\");\nvar MapsModule = /** @class */ (function () {\n    function MapsModule() {\n    }\n    MapsModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [\n                theme_module_1.ThemeModule,\n                core_2.AgmCoreModule.forRoot({\n                    apiKey: 'AIzaSyCpVhQiwAllg1RAFaxMWSpQruuGARy0Y1k',\n                    libraries: ['places']\n                }),\n                ngx_leaflet_1.LeafletModule.forRoot(),\n                maps_routing_module_1.MapsRoutingModule,\n                ngx_echarts_1.NgxEchartsModule\n            ],\n            exports: [],\n            declarations: maps_routing_module_1.routedComponents.slice()\n        })\n    ], MapsModule);\n    return MapsModule;\n}());\nexports.MapsModule = MapsModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL21hcHMubW9kdWxlLnRzPzA3OGQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQXlDO0FBQ3pDLGdHQUEwQztBQUMxQywrSEFBd0Q7QUFDeEQsOEdBQStDO0FBRS9DLG9JQUF3RDtBQUN4RCxrSkFBNEU7QUFnQjVFO0lBQUE7SUFBeUIsQ0FBQztJQUFiLFVBQVU7UUFkdEIsZUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFO2dCQUNMLDBCQUFXO2dCQUNYLG9CQUFhLENBQUMsT0FBTyxDQUFDO29CQUNsQixNQUFNLEVBQUUseUNBQXlDO29CQUNqRCxTQUFTLEVBQUUsQ0FBQyxRQUFRLENBQUM7aUJBQ3hCLENBQUM7Z0JBQ0YsMkJBQWEsQ0FBQyxPQUFPLEVBQUU7Z0JBQ3ZCLHVDQUFpQjtnQkFDakIsOEJBQWdCO2FBQ25CO1lBQ0QsT0FBTyxFQUFFLEVBQUU7WUFDWCxZQUFZLEVBQU0sc0NBQWdCLFFBQUM7U0FDdEMsQ0FBQztPQUNXLFVBQVUsQ0FBRztJQUFELGlCQUFDO0NBQUE7QUFBYixnQ0FBVSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL21hcHMvbWFwcy5tb2R1bGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgQWdtQ29yZU1vZHVsZSB9IGZyb20gJ0BhZ20vY29yZSc7XG5pbXBvcnQgeyBMZWFmbGV0TW9kdWxlIH0gZnJvbSAnQGFzeW1tZXRyaWsvbmd4LWxlYWZsZXQnO1xuaW1wb3J0IHsgTmd4RWNoYXJ0c01vZHVsZSB9IGZyb20gJ25neC1lY2hhcnRzJztcblxuaW1wb3J0IHsgVGhlbWVNb2R1bGUgfSBmcm9tICcuLi8uLi9AdGhlbWUvdGhlbWUubW9kdWxlJztcbmltcG9ydCB7IE1hcHNSb3V0aW5nTW9kdWxlLCByb3V0ZWRDb21wb25lbnRzIH0gZnJvbSAnLi9tYXBzLXJvdXRpbmcubW9kdWxlJztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbXG4gICAgICAgIFRoZW1lTW9kdWxlLFxuICAgICAgICBBZ21Db3JlTW9kdWxlLmZvclJvb3Qoe1xuICAgICAgICAgICAgYXBpS2V5OiAnQUl6YVN5Q3BWaFFpd0FsbGcxUkFGYXhNV1NwUXJ1dUdBUnkwWTFrJyxcbiAgICAgICAgICAgIGxpYnJhcmllczogWydwbGFjZXMnXVxuICAgICAgICB9KSxcbiAgICAgICAgTGVhZmxldE1vZHVsZS5mb3JSb290KCksXG4gICAgICAgIE1hcHNSb3V0aW5nTW9kdWxlLFxuICAgICAgICBOZ3hFY2hhcnRzTW9kdWxlXG4gICAgXSxcbiAgICBleHBvcnRzOiBbXSxcbiAgICBkZWNsYXJhdGlvbnM6IFsuLi5yb3V0ZWRDb21wb25lbnRzXVxufSlcbmV4cG9ydCBjbGFzcyBNYXBzTW9kdWxlIHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/maps.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/entity/Location.ts":
/*!********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/entity/Location.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar Location = /** @class */ (function () {\n    function Location(latitude, longitude) {\n        if (latitude === void 0) { latitude = 53.9; }\n        if (longitude === void 0) { longitude = 27.5667; }\n        this.latitude = latitude;\n        this.longitude = longitude;\n    }\n    return Location;\n}());\nexports.Location = Location;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvZW50aXR5L0xvY2F0aW9uLnRzPzQzNWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQTtJQUNJLGtCQUFtQixRQUF1QixFQUFTLFNBQTJCO1FBQTNELDBDQUF1QjtRQUFTLCtDQUEyQjtRQUEzRCxhQUFRLEdBQVIsUUFBUSxDQUFlO1FBQVMsY0FBUyxHQUFULFNBQVMsQ0FBa0I7SUFBRyxDQUFDO0lBQ3RGLGVBQUM7QUFBRCxDQUFDO0FBRlksNEJBQVEiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvZW50aXR5L0xvY2F0aW9uLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0IGNsYXNzIExvY2F0aW9uIHtcbiAgICBjb25zdHJ1Y3RvcihwdWJsaWMgbGF0aXR1ZGU6IG51bWJlciA9IDUzLjksIHB1YmxpYyBsb25naXR1ZGU6IG51bWJlciA9IDI3LjU2NjcpIHt9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/entity/Location.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.html":
/*!************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.html ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<agm-map [latitude]=\\\"latitude\\\" [longitude]=\\\"longitude\\\" [scrollwheel]=\\\"false\\\" [zoom]=\\\"zoom\\\"> <agm-marker [latitude]=\\\"latitude\\\" [longitude]=\\\"longitude\\\"></agm-marker> </agm-map> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvbWFwL21hcC5jb21wb25lbnQuaHRtbD9mYjViIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9zZWFyY2gtbWFwL21hcC9tYXAuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGFnbS1tYXAgW2xhdGl0dWRlXT1cXFwibGF0aXR1ZGVcXFwiIFtsb25naXR1ZGVdPVxcXCJsb25naXR1ZGVcXFwiIFtzY3JvbGx3aGVlbF09XFxcImZhbHNlXFxcIiBbem9vbV09XFxcInpvb21cXFwiPiA8YWdtLW1hcmtlciBbbGF0aXR1ZGVdPVxcXCJsYXRpdHVkZVxcXCIgW2xvbmdpdHVkZV09XFxcImxvbmdpdHVkZVxcXCI+PC9hZ20tbWFya2VyPiA8L2FnbS1tYXA+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss":
/*!************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./map.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvbWFwL21hcC5jb21wb25lbnQuc2Nzcz8xYjQ4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyw0U0FBc0o7O0FBRW5MO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL21hcHMvc2VhcmNoLW1hcC9tYXAvbWFwLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21hcC5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.ts":
/*!**********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar Location_1 = __webpack_require__(/*! ../entity/Location */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/entity/Location.ts\");\nvar MapComponent = /** @class */ (function () {\n    function MapComponent() {\n    }\n    Object.defineProperty(MapComponent.prototype, \"searchedLocation\", {\n        set: function (searchedLocation) {\n            this.latitude = searchedLocation.latitude;\n            this.longitude = searchedLocation.longitude;\n            this.zoom = 12;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    MapComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // set up current location\n        if ('geolocation' in navigator) {\n            navigator.geolocation.getCurrentPosition(function (position) {\n                _this.searchedLocation = new Location_1.Location(position.coords.latitude, position.coords.longitude);\n            });\n        }\n    };\n    var _a, _b;\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof Location_1.Location !== \"undefined\" && Location_1.Location) === \"function\" ? _a : Object),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof Location_1.Location !== \"undefined\" && Location_1.Location) === \"function\" ? _b : Object])\n    ], MapComponent.prototype, \"searchedLocation\", null);\n    MapComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-map',\n            template: __webpack_require__(/*! ./map.component.html */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.html\"),\n            styles: [__webpack_require__(/*! ./map.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.scss\")]\n        })\n    ], MapComponent);\n    return MapComponent;\n}());\nexports.MapComponent = MapComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvbWFwL21hcC5jb21wb25lbnQudHM/ZDI0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBeUQ7QUFDekQsMklBQThDO0FBTzlDO0lBQUE7SUFvQkEsQ0FBQztJQWRHLHNCQUFXLDBDQUFnQjthQUEzQixVQUE0QixnQkFBMEI7WUFDbEQsSUFBSSxDQUFDLFFBQVEsR0FBRyxnQkFBZ0IsQ0FBQyxRQUFRLENBQUM7WUFDMUMsSUFBSSxDQUFDLFNBQVMsR0FBRyxnQkFBZ0IsQ0FBQyxTQUFTLENBQUM7WUFDNUMsSUFBSSxDQUFDLElBQUksR0FBRyxFQUFFLENBQUM7UUFDbkIsQ0FBQzs7O09BQUE7SUFFRCwrQkFBUSxHQUFSO1FBQUEsaUJBT0M7UUFORywwQkFBMEI7UUFDMUIsSUFBSSxhQUFhLElBQUksU0FBUyxFQUFFO1lBQzVCLFNBQVMsQ0FBQyxXQUFXLENBQUMsa0JBQWtCLENBQUMsa0JBQVE7Z0JBQzdDLEtBQUksQ0FBQyxnQkFBZ0IsR0FBRyxJQUFJLG1CQUFRLENBQUMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxRQUFRLEVBQUUsUUFBUSxDQUFDLE1BQU0sQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUM5RixDQUFDLENBQUMsQ0FBQztTQUNOO0lBQ0wsQ0FBQzs7SUFiRDtRQURDLFlBQUssRUFBRTs4REFDc0MsbUJBQVEsb0JBQVIsbUJBQVE7cUVBQVIsbUJBQVEsb0JBQVIsbUJBQVE7d0RBSXJEO0lBVlEsWUFBWTtRQUx4QixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFNBQVM7WUFDbkIsNkJBQWEsMkdBQXNCO1lBQ25DLFNBQVMsbUJBQUcsMkdBQXVCO1NBQ3RDLENBQUM7T0FDVyxZQUFZLENBb0J4QjtJQUFELG1CQUFDO0NBQUE7QUFwQlksb0NBQVkiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvbWFwL21hcC5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQsIElucHV0LCBPbkluaXQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IExvY2F0aW9uIH0gZnJvbSAnLi4vZW50aXR5L0xvY2F0aW9uJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtbWFwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vbWFwLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnLi9tYXAuY29tcG9uZW50LnNjc3MnXVxufSlcbmV4cG9ydCBjbGFzcyBNYXBDb21wb25lbnQgaW1wbGVtZW50cyBPbkluaXQge1xuICAgIGxhdGl0dWRlOiBudW1iZXI7XG4gICAgbG9uZ2l0dWRlOiBudW1iZXI7XG4gICAgem9vbTogbnVtYmVyO1xuXG4gICAgQElucHV0KClcbiAgICBwdWJsaWMgc2V0IHNlYXJjaGVkTG9jYXRpb24oc2VhcmNoZWRMb2NhdGlvbjogTG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5sYXRpdHVkZSA9IHNlYXJjaGVkTG9jYXRpb24ubGF0aXR1ZGU7XG4gICAgICAgIHRoaXMubG9uZ2l0dWRlID0gc2VhcmNoZWRMb2NhdGlvbi5sb25naXR1ZGU7XG4gICAgICAgIHRoaXMuem9vbSA9IDEyO1xuICAgIH1cblxuICAgIG5nT25Jbml0KCk6IHZvaWQge1xuICAgICAgICAvLyBzZXQgdXAgY3VycmVudCBsb2NhdGlvblxuICAgICAgICBpZiAoJ2dlb2xvY2F0aW9uJyBpbiBuYXZpZ2F0b3IpIHtcbiAgICAgICAgICAgIG5hdmlnYXRvci5nZW9sb2NhdGlvbi5nZXRDdXJyZW50UG9zaXRpb24ocG9zaXRpb24gPT4ge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VhcmNoZWRMb2NhdGlvbiA9IG5ldyBMb2NhdGlvbihwb3NpdGlvbi5jb29yZHMubGF0aXR1ZGUsIHBvc2l0aW9uLmNvb3Jkcy5sb25naXR1ZGUpO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/map/map.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.html":
/*!***************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.html ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Google Maps with search</nb-card-header> <nb-card-body> <ngx-search (positionChanged)=\\\"updateLocation($event)\\\"></ngx-search> <ngx-map [searchedLocation]=\\\"searchedLocation\\\"></ngx-map> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvc2VhcmNoLW1hcC5jb21wb25lbnQuaHRtbD8zMGI5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9zZWFyY2gtbWFwL3NlYXJjaC1tYXAuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPG5iLWNhcmQ+IDxuYi1jYXJkLWhlYWRlcj5Hb29nbGUgTWFwcyB3aXRoIHNlYXJjaDwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxuZ3gtc2VhcmNoIChwb3NpdGlvbkNoYW5nZWQpPVxcXCJ1cGRhdGVMb2NhdGlvbigkZXZlbnQpXFxcIj48L25neC1zZWFyY2g+IDxuZ3gtbWFwIFtzZWFyY2hlZExvY2F0aW9uXT1cXFwic2VhcmNoZWRMb2NhdGlvblxcXCI+PC9uZ3gtbWFwPiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.ts":
/*!*************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.ts ***!
  \*************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar Location_1 = __webpack_require__(/*! ./entity/Location */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/entity/Location.ts\");\nvar SearchMapComponent = /** @class */ (function () {\n    function SearchMapComponent() {\n        this.searchedLocation = new Location_1.Location();\n    }\n    SearchMapComponent.prototype.updateLocation = function (event) {\n        this.searchedLocation = new Location_1.Location(event.latitude, event.longitude);\n    };\n    SearchMapComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-search-map',\n            template: __webpack_require__(/*! ./search-map.component.html */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.html\")\n        })\n    ], SearchMapComponent);\n    return SearchMapComponent;\n}());\nexports.SearchMapComponent = SearchMapComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvc2VhcmNoLW1hcC5jb21wb25lbnQudHM/OWE2ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFDMUMsMElBQTZDO0FBTTdDO0lBSkE7UUFLSSxxQkFBZ0IsR0FBYSxJQUFJLG1CQUFRLEVBQUUsQ0FBQztJQUtoRCxDQUFDO0lBSEcsMkNBQWMsR0FBZCxVQUFlLEtBQWU7UUFDMUIsSUFBSSxDQUFDLGdCQUFnQixHQUFHLElBQUksbUJBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLEtBQUssQ0FBQyxTQUFTLENBQUMsQ0FBQztJQUMxRSxDQUFDO0lBTFEsa0JBQWtCO1FBSjlCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLDZCQUFhLHFIQUE2QjtTQUM3QyxDQUFDO09BQ1csa0JBQWtCLENBTTlCO0lBQUQseUJBQUM7Q0FBQTtBQU5ZLGdEQUFrQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL21hcHMvc2VhcmNoLW1hcC9zZWFyY2gtbWFwLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICcuL2VudGl0eS9Mb2NhdGlvbic7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LXNlYXJjaC1tYXAnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2gtbWFwLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTZWFyY2hNYXBDb21wb25lbnQge1xuICAgIHNlYXJjaGVkTG9jYXRpb246IExvY2F0aW9uID0gbmV3IExvY2F0aW9uKCk7XG5cbiAgICB1cGRhdGVMb2NhdGlvbihldmVudDogTG9jYXRpb24pIHtcbiAgICAgICAgdGhpcy5zZWFyY2hlZExvY2F0aW9uID0gbmV3IExvY2F0aW9uKGV2ZW50LmxhdGl0dWRlLCBldmVudC5sb25naXR1ZGUpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/search-map.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.html":
/*!******************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.html ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"form-group\\\"> <input placeholder=\\\"search for location\\\" autocorrect=\\\"off\\\" autocapitalize=\\\"off\\\" spellcheck=\\\"off\\\" type=\\\"text\\\" class=\\\"form-control search-location\\\" #search> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvc2VhcmNoL3NlYXJjaC5jb21wb25lbnQuaHRtbD85YWU3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvbWFwcy9zZWFyY2gtbWFwL3NlYXJjaC9zZWFyY2guY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwiZm9ybS1ncm91cFxcXCI+IDxpbnB1dCBwbGFjZWhvbGRlcj1cXFwic2VhcmNoIGZvciBsb2NhdGlvblxcXCIgYXV0b2NvcnJlY3Q9XFxcIm9mZlxcXCIgYXV0b2NhcGl0YWxpemU9XFxcIm9mZlxcXCIgc3BlbGxjaGVjaz1cXFwib2ZmXFxcIiB0eXBlPVxcXCJ0ZXh0XFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sIHNlYXJjaC1sb2NhdGlvblxcXCIgI3NlYXJjaD4gPC9kaXY+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts":
/*!****************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar core_2 = __webpack_require__(/*! @agm/core */ \"./node_modules/@agm/core/fesm5/agm-core.js\");\nvar Location_1 = __webpack_require__(/*! ../entity/Location */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/entity/Location.ts\");\nvar SearchComponent = /** @class */ (function () {\n    function SearchComponent(mapsAPILoader, ngZone) {\n        this.mapsAPILoader = mapsAPILoader;\n        this.ngZone = ngZone;\n        this.positionChanged = new core_1.EventEmitter();\n    }\n    SearchComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // load Places Autocomplete\n        this.mapsAPILoader.load().then(function () {\n            var autocomplete = new google.maps.places.Autocomplete(_this.searchElementRef.nativeElement, {\n                types: ['address']\n            });\n            autocomplete.addListener('place_changed', function () {\n                _this.ngZone.run(function () {\n                    // get the place result\n                    var place = autocomplete.getPlace();\n                    // verify result\n                    if (place.geometry === undefined || place.geometry === null) {\n                        return;\n                    }\n                    _this.positionChanged.emit(new Location_1.Location(place.geometry.location.lat(), place.geometry.location.lng()));\n                });\n            });\n        });\n    };\n    var _a, _b, _c;\n    tslib_1.__decorate([\n        core_1.Output(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], SearchComponent.prototype, \"positionChanged\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('search'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _a : Object)\n    ], SearchComponent.prototype, \"searchElementRef\", void 0);\n    SearchComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-search',\n            template: __webpack_require__(/*! ./search.component.html */ \"./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.html\")\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof core_2.MapsAPILoader !== \"undefined\" && core_2.MapsAPILoader) === \"function\" ? _b : Object, typeof (_c = typeof core_1.NgZone !== \"undefined\" && core_1.NgZone) === \"function\" ? _c : Object])\n    ], SearchComponent);\n    return SearchComponent;\n}());\nexports.SearchComponent = SearchComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9tYXBzL3NlYXJjaC1tYXAvc2VhcmNoL3NlYXJjaC5jb21wb25lbnQudHM/YjU0MSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBdUc7QUFDdkcsZ0dBQTBDO0FBQzFDLDJJQUE4QztBQU05QztJQUtJLHlCQUFvQixhQUE0QixFQUFVLE1BQWM7UUFBcEQsa0JBQWEsR0FBYixhQUFhLENBQWU7UUFBVSxXQUFNLEdBQU4sTUFBTSxDQUFRO1FBSjlELG9CQUFlLEdBQUcsSUFBSSxtQkFBWSxFQUFZLENBQUM7SUFJa0IsQ0FBQztJQUU1RSxrQ0FBUSxHQUFSO1FBQUEsaUJBb0JDO1FBbkJHLDJCQUEyQjtRQUMzQixJQUFJLENBQUMsYUFBYSxDQUFDLElBQUksRUFBRSxDQUFDLElBQUksQ0FBQztZQUMzQixJQUFNLFlBQVksR0FBRyxJQUFJLE1BQU0sQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLFlBQVksQ0FBQyxLQUFJLENBQUMsZ0JBQWdCLENBQUMsYUFBYSxFQUFFO2dCQUMxRixLQUFLLEVBQUUsQ0FBQyxTQUFTLENBQUM7YUFDckIsQ0FBQyxDQUFDO1lBQ0gsWUFBWSxDQUFDLFdBQVcsQ0FBQyxlQUFlLEVBQUU7Z0JBQ3RDLEtBQUksQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDO29CQUNaLHVCQUF1QjtvQkFDdkIsSUFBTSxLQUFLLEdBQW1DLFlBQVksQ0FBQyxRQUFRLEVBQUUsQ0FBQztvQkFFdEUsZ0JBQWdCO29CQUNoQixJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssU0FBUyxJQUFJLEtBQUssQ0FBQyxRQUFRLEtBQUssSUFBSSxFQUFFO3dCQUN6RCxPQUFPO3FCQUNWO29CQUVELEtBQUksQ0FBQyxlQUFlLENBQUMsSUFBSSxDQUFDLElBQUksbUJBQVEsQ0FBQyxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsRUFBRSxLQUFLLENBQUMsUUFBUSxDQUFDLFFBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxDQUFDLENBQUM7Z0JBQzFHLENBQUMsQ0FBQyxDQUFDO1lBQ1AsQ0FBQyxDQUFDLENBQUM7UUFDUCxDQUFDLENBQUMsQ0FBQztJQUNQLENBQUM7O0lBMUJTO1FBQVQsYUFBTSxFQUFFOzs0REFBZ0Q7SUFFcEM7UUFBcEIsZ0JBQVMsQ0FBQyxRQUFRLENBQUM7OERBQTBCLGlCQUFVLG9CQUFWLGlCQUFVOzZEQUFDO0lBSGhELGVBQWU7UUFKM0IsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxZQUFZO1lBQ3RCLDZCQUFhLG9IQUF5QjtTQUN6QyxDQUFDO3FFQU1xQyxvQkFBYSxvQkFBYixvQkFBYSxvREFBa0IsYUFBTSxvQkFBTixhQUFNO09BTC9ELGVBQWUsQ0E0QjNCO0lBQUQsc0JBQUM7Q0FBQTtBQTVCWSwwQ0FBZSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL21hcHMvc2VhcmNoLW1hcC9zZWFyY2gvc2VhcmNoLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCwgRWxlbWVudFJlZiwgRXZlbnRFbWl0dGVyLCBOZ1pvbmUsIE9uSW5pdCwgT3V0cHV0LCBWaWV3Q2hpbGQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE1hcHNBUElMb2FkZXIgfSBmcm9tICdAYWdtL2NvcmUnO1xuaW1wb3J0IHsgTG9jYXRpb24gfSBmcm9tICcuLi9lbnRpdHkvTG9jYXRpb24nO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1zZWFyY2gnLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zZWFyY2guY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNlYXJjaENvbXBvbmVudCBpbXBsZW1lbnRzIE9uSW5pdCB7XG4gICAgQE91dHB1dCgpIHBvc2l0aW9uQ2hhbmdlZCA9IG5ldyBFdmVudEVtaXR0ZXI8TG9jYXRpb24+KCk7XG5cbiAgICBAVmlld0NoaWxkKCdzZWFyY2gnKSBwdWJsaWMgc2VhcmNoRWxlbWVudFJlZjogRWxlbWVudFJlZjtcblxuICAgIGNvbnN0cnVjdG9yKHByaXZhdGUgbWFwc0FQSUxvYWRlcjogTWFwc0FQSUxvYWRlciwgcHJpdmF0ZSBuZ1pvbmU6IE5nWm9uZSkge31cblxuICAgIG5nT25Jbml0KCkge1xuICAgICAgICAvLyBsb2FkIFBsYWNlcyBBdXRvY29tcGxldGVcbiAgICAgICAgdGhpcy5tYXBzQVBJTG9hZGVyLmxvYWQoKS50aGVuKCgpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IGF1dG9jb21wbGV0ZSA9IG5ldyBnb29nbGUubWFwcy5wbGFjZXMuQXV0b2NvbXBsZXRlKHRoaXMuc2VhcmNoRWxlbWVudFJlZi5uYXRpdmVFbGVtZW50LCB7XG4gICAgICAgICAgICAgICAgdHlwZXM6IFsnYWRkcmVzcyddXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIGF1dG9jb21wbGV0ZS5hZGRMaXN0ZW5lcigncGxhY2VfY2hhbmdlZCcsICgpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLm5nWm9uZS5ydW4oKCkgPT4ge1xuICAgICAgICAgICAgICAgICAgICAvLyBnZXQgdGhlIHBsYWNlIHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICBjb25zdCBwbGFjZTogZ29vZ2xlLm1hcHMucGxhY2VzLlBsYWNlUmVzdWx0ID0gYXV0b2NvbXBsZXRlLmdldFBsYWNlKCk7XG5cbiAgICAgICAgICAgICAgICAgICAgLy8gdmVyaWZ5IHJlc3VsdFxuICAgICAgICAgICAgICAgICAgICBpZiAocGxhY2UuZ2VvbWV0cnkgPT09IHVuZGVmaW5lZCB8fCBwbGFjZS5nZW9tZXRyeSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgICAgdGhpcy5wb3NpdGlvbkNoYW5nZWQuZW1pdChuZXcgTG9jYXRpb24ocGxhY2UuZ2VvbWV0cnkubG9jYXRpb24ubGF0KCksIHBsYWNlLmdlb21ldHJ5LmxvY2F0aW9uLmxuZygpKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfSk7XG4gICAgfVxufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts\n");

/***/ })

}]);