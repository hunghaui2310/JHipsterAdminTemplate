(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[8],{

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss ***!
  \*************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  display: flex;\\n  align-items: center; }\\n\\n.nb-theme-default :host .action-groups-header {\\n  flex-basis: 20%;\\n  color: #2a2a2a;\\n  font-family: Exo;\\n  font-size: 1.125rem;\\n  font-weight: 600; }\\n\\n.nb-theme-default :host .nb-actions {\\n  flex-basis: 80%; }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-default :host nb-card-body {\\n    flex-direction: column;\\n    align-items: flex-start;\\n    padding: 0.75rem; }\\n    [dir=ltr] .nb-theme-default :host nb-card-body .action-groups-header {\\n      margin: 0 0 0.5rem 0.25rem; }\\n    [dir=rtl] .nb-theme-default :host nb-card-body .action-groups-header {\\n      margin: 0 0.25rem 0.5rem 0; }\\n  .nb-theme-default :host nb-action {\\n    padding: 0 0.5rem; }\\n    .nb-theme-default :host nb-action /deep/ .control-icon {\\n      font-size: 1.75rem; }\\n  .nb-theme-default :host nb-user /deep/ .user-container {\\n    font-size: 0.875rem; }\\n  .nb-theme-default :host nb-user /deep/ .user-picture {\\n    height: 1.75rem;\\n    width: 1.75rem; } }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-default :host nb-action {\\n    padding: 0 0.375rem; }\\n    .nb-theme-default :host nb-action /deep/ .control-icon {\\n      font-size: 1.5rem; }\\n  .nb-theme-default :host nb-user /deep/ .user-container {\\n    font-size: 0.75rem; }\\n  .nb-theme-default :host nb-user /deep/ .user-picture {\\n    height: 1.5rem;\\n    width: 1.5rem; }\\n  .nb-theme-default :host nb-card-body {\\n    padding-left: 0;\\n    padding-right: 0; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  display: flex;\\n  align-items: center; }\\n\\n.nb-theme-cosmic :host .action-groups-header {\\n  flex-basis: 20%;\\n  color: #ffffff;\\n  font-family: Exo;\\n  font-size: 1.125rem;\\n  font-weight: 500; }\\n\\n.nb-theme-cosmic :host .nb-actions {\\n  flex-basis: 80%; }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-cosmic :host nb-card-body {\\n    flex-direction: column;\\n    align-items: flex-start;\\n    padding: 0.75rem; }\\n    [dir=ltr] .nb-theme-cosmic :host nb-card-body .action-groups-header {\\n      margin: 0 0 0.5rem 0.25rem; }\\n    [dir=rtl] .nb-theme-cosmic :host nb-card-body .action-groups-header {\\n      margin: 0 0.25rem 0.5rem 0; }\\n  .nb-theme-cosmic :host nb-action {\\n    padding: 0 0.5rem; }\\n    .nb-theme-cosmic :host nb-action /deep/ .control-icon {\\n      font-size: 1.75rem; }\\n  .nb-theme-cosmic :host nb-user /deep/ .user-container {\\n    font-size: 0.875rem; }\\n  .nb-theme-cosmic :host nb-user /deep/ .user-picture {\\n    height: 1.75rem;\\n    width: 1.75rem; } }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-cosmic :host nb-action {\\n    padding: 0 0.375rem; }\\n    .nb-theme-cosmic :host nb-action /deep/ .control-icon {\\n      font-size: 1.5rem; }\\n  .nb-theme-cosmic :host nb-user /deep/ .user-container {\\n    font-size: 0.75rem; }\\n  .nb-theme-cosmic :host nb-user /deep/ .user-picture {\\n    height: 1.5rem;\\n    width: 1.5rem; }\\n  .nb-theme-cosmic :host nb-card-body {\\n    padding-left: 0;\\n    padding-right: 0; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  display: flex;\\n  align-items: center; }\\n\\n.nb-theme-corporate :host .action-groups-header {\\n  flex-basis: 20%;\\n  color: #181818;\\n  font-family: Exo;\\n  font-size: 1.125rem;\\n  font-weight: 600; }\\n\\n.nb-theme-corporate :host .nb-actions {\\n  flex-basis: 80%; }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-corporate :host nb-card-body {\\n    flex-direction: column;\\n    align-items: flex-start;\\n    padding: 0.75rem; }\\n    [dir=ltr] .nb-theme-corporate :host nb-card-body .action-groups-header {\\n      margin: 0 0 0.5rem 0.25rem; }\\n    [dir=rtl] .nb-theme-corporate :host nb-card-body .action-groups-header {\\n      margin: 0 0.25rem 0.5rem 0; }\\n  .nb-theme-corporate :host nb-action {\\n    padding: 0 0.5rem; }\\n    .nb-theme-corporate :host nb-action /deep/ .control-icon {\\n      font-size: 1.75rem; }\\n  .nb-theme-corporate :host nb-user /deep/ .user-container {\\n    font-size: 0.875rem; }\\n  .nb-theme-corporate :host nb-user /deep/ .user-picture {\\n    height: 1.75rem;\\n    width: 1.75rem; } }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-corporate :host nb-action {\\n    padding: 0 0.375rem; }\\n    .nb-theme-corporate :host nb-action /deep/ .control-icon {\\n      font-size: 1.5rem; }\\n  .nb-theme-corporate :host nb-user /deep/ .user-container {\\n    font-size: 0.75rem; }\\n  .nb-theme-corporate :host nb-user /deep/ .user-picture {\\n    height: 1.5rem;\\n    width: 1.5rem; }\\n  .nb-theme-corporate :host nb-card-body {\\n    padding-left: 0;\\n    padding-right: 0; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss ***!
  \*****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-default :host .button-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-cosmic :host .button-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-corporate :host .button-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss":
/*!*****************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss ***!
  \*****************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host /deep/ .container-title {\\n  color: #a4abb3;\\n  font-family: Exo;\\n  margin-bottom: 0.5rem; }\\n\\n.nb-theme-default :host /deep/ .header {\\n  font-size: 0.875rem; }\\n\\n.nb-theme-default :host /deep/ .subheader {\\n  font-size: 0.75rem;\\n  font-weight: 300;\\n  color: #a4abb3; }\\n\\n.nb-theme-default :host /deep/ .btn-demo {\\n  width: 180px; }\\n\\n.nb-theme-default :host /deep/ .state-container {\\n  display: flex; }\\n  .nb-theme-default :host /deep/ .state-container:not(:last-child) {\\n    margin-bottom: 1rem; }\\n  .nb-theme-default :host /deep/ .state-container .state-value {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 0.375rem; }\\n  .nb-theme-default :host /deep/ .state-container .state-details {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n    height: 50px; }\\n\\n[dir=ltr] .nb-theme-default :host /deep/ .example-container {\\n  padding-right: 0; }\\n\\n[dir=rtl] .nb-theme-default :host /deep/ .example-container {\\n  padding-left: 0; }\\n\\n.nb-theme-default :host /deep/ .example-container .container-btn {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-default :host /deep/ .block-level-buttons .btn-group {\\n  margin-bottom: 1rem; }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-default :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    align-items: left; }\\n    .nb-theme-default :host ngx-default-buttons /deep/ nb-card-header span {\\n      margin-bottom: 1rem; } }\\n\\n@media (max-width: 399.98px) {\\n  [dir=ltr] .nb-theme-default :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-default :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-left: 1rem; }\\n  .nb-theme-default :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    margin-bottom: 0.5rem; }\\n  .nb-theme-default :host ngx-block-level-buttons /deep/ .btn-primary {\\n    padding: 0.75rem 1rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host /deep/ .container-title {\\n  color: #a1a1e5;\\n  font-family: Exo;\\n  margin-bottom: 0.5rem; }\\n\\n.nb-theme-cosmic :host /deep/ .header {\\n  font-size: 0.875rem; }\\n\\n.nb-theme-cosmic :host /deep/ .subheader {\\n  font-size: 0.75rem;\\n  font-weight: 300;\\n  color: #a1a1e5; }\\n\\n.nb-theme-cosmic :host /deep/ .btn-demo {\\n  width: 180px; }\\n\\n.nb-theme-cosmic :host /deep/ .state-container {\\n  display: flex; }\\n  .nb-theme-cosmic :host /deep/ .state-container:not(:last-child) {\\n    margin-bottom: 1rem; }\\n  .nb-theme-cosmic :host /deep/ .state-container .state-value {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 0.5rem; }\\n  .nb-theme-cosmic :host /deep/ .state-container .state-details {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n    height: 50px; }\\n\\n[dir=ltr] .nb-theme-cosmic :host /deep/ .example-container {\\n  padding-right: 0; }\\n\\n[dir=rtl] .nb-theme-cosmic :host /deep/ .example-container {\\n  padding-left: 0; }\\n\\n.nb-theme-cosmic :host /deep/ .example-container .container-btn {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-cosmic :host /deep/ .block-level-buttons .btn-group {\\n  margin-bottom: 1rem; }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-cosmic :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    align-items: left; }\\n    .nb-theme-cosmic :host ngx-default-buttons /deep/ nb-card-header span {\\n      margin-bottom: 1rem; } }\\n\\n@media (max-width: 399.98px) {\\n  [dir=ltr] .nb-theme-cosmic :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-cosmic :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-left: 1rem; }\\n  .nb-theme-cosmic :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    margin-bottom: 0.5rem; }\\n  .nb-theme-cosmic :host ngx-block-level-buttons /deep/ .btn-primary {\\n    padding: 0.75rem 1rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host /deep/ .container-title {\\n  color: #a4abb3;\\n  font-family: Exo;\\n  margin-bottom: 0.5rem; }\\n\\n.nb-theme-corporate :host /deep/ .header {\\n  font-size: 0.875rem; }\\n\\n.nb-theme-corporate :host /deep/ .subheader {\\n  font-size: 0.75rem;\\n  font-weight: 300;\\n  color: #a4abb3; }\\n\\n.nb-theme-corporate :host /deep/ .btn-demo {\\n  width: 180px; }\\n\\n.nb-theme-corporate :host /deep/ .state-container {\\n  display: flex; }\\n  .nb-theme-corporate :host /deep/ .state-container:not(:last-child) {\\n    margin-bottom: 1rem; }\\n  .nb-theme-corporate :host /deep/ .state-container .state-value {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 0.75rem;\\n    border-radius: 0.75rem; }\\n  .nb-theme-corporate :host /deep/ .state-container .state-details {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n    height: 50px; }\\n\\n[dir=ltr] .nb-theme-corporate :host /deep/ .example-container {\\n  padding-right: 0; }\\n\\n[dir=rtl] .nb-theme-corporate :host /deep/ .example-container {\\n  padding-left: 0; }\\n\\n.nb-theme-corporate :host /deep/ .example-container .container-btn {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-corporate :host /deep/ .block-level-buttons .btn-group {\\n  margin-bottom: 1rem; }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-corporate :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    align-items: left; }\\n    .nb-theme-corporate :host ngx-default-buttons /deep/ nb-card-header span {\\n      margin-bottom: 1rem; } }\\n\\n@media (max-width: 399.98px) {\\n  [dir=ltr] .nb-theme-corporate :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-corporate :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-left: 1rem; }\\n  .nb-theme-corporate :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    margin-bottom: 0.5rem; }\\n  .nb-theme-corporate :host ngx-block-level-buttons /deep/ .btn-primary {\\n    padding: 0.75rem 1rem; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss ***!
  \*****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\n.nb-theme-default :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-default :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-default :host .primary-container .original {\\n  background-color: #8a7fff; }\\n\\n.nb-theme-default :host .primary-container .hover:hover, .nb-theme-default :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #9a91ff;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .primary-container .active:active, .nb-theme-default :host .primary-container .active.active, .nb-theme-default :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #776ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #8a7fff; }\\n\\n.nb-theme-default :host .success-container .original {\\n  background-color: #40dc7e; }\\n\\n.nb-theme-default :host .success-container .hover:hover, .nb-theme-default :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #5be190;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .success-container .active:active, .nb-theme-default :host .success-container .active.active, .nb-theme-default :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #37bd6c;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #40dc7e; }\\n\\n.nb-theme-default :host .warning-container .original {\\n  background-color: #ffa100; }\\n\\n.nb-theme-default :host .warning-container .hover:hover, .nb-theme-default :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffae24;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .warning-container .active:active, .nb-theme-default :host .warning-container .active.active, .nb-theme-default :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8a00;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa100; }\\n\\n.nb-theme-default :host .info-container .original {\\n  background-color: #4ca6ff; }\\n\\n.nb-theme-default :host .info-container .hover:hover, .nb-theme-default :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #65b2ff;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .info-container .active:active, .nb-theme-default :host .info-container .active.active, .nb-theme-default :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #418fdb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #4ca6ff; }\\n\\n.nb-theme-default :host .danger-container .original {\\n  background-color: #ff4c6a; }\\n\\n.nb-theme-default :host .danger-container .hover:hover, .nb-theme-default :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff657f;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .danger-container .active:active, .nb-theme-default :host .danger-container .active.active, .nb-theme-default :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db415b;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff4c6a; }\\n\\n.nb-theme-default :host .secondary-container .original {\\n  border: 2px solid #dadfe6; }\\n\\n.nb-theme-default :host .secondary-container .hover:hover, .nb-theme-default :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #dfe3ea;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .secondary-container .active:active, .nb-theme-default :host .secondary-container .active.active, .nb-theme-default :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #bbc0c6;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #dadfe6; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-default :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\n.nb-theme-cosmic :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-cosmic :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-cosmic :host .primary-container .original {\\n  background-color: #7659ff; }\\n\\n.nb-theme-cosmic :host .primary-container .hover:hover, .nb-theme-cosmic :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #8970ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .primary-container .active:active, .nb-theme-cosmic :host .primary-container .active.active, .nb-theme-cosmic :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #654ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .success-container .original {\\n  background-color: #00d977; }\\n\\n.nb-theme-cosmic :host .success-container .hover:hover, .nb-theme-cosmic :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #24de8a;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .success-container .active:active, .nb-theme-cosmic :host .success-container .active.active, .nb-theme-cosmic :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #00bb66;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #00d977; }\\n\\n.nb-theme-cosmic :host .warning-container .original {\\n  background-color: #ffa100; }\\n\\n.nb-theme-cosmic :host .warning-container .hover:hover, .nb-theme-cosmic :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffae24;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .warning-container .active:active, .nb-theme-cosmic :host .warning-container .active.active, .nb-theme-cosmic :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8a00;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa100; }\\n\\n.nb-theme-cosmic :host .info-container .original {\\n  background-color: #0088ff; }\\n\\n.nb-theme-cosmic :host .info-container .hover:hover, .nb-theme-cosmic :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #2499ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .info-container .active:active, .nb-theme-cosmic :host .info-container .active.active, .nb-theme-cosmic :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #0075db;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #0088ff; }\\n\\n.nb-theme-cosmic :host .danger-container .original {\\n  background-color: #ff386a; }\\n\\n.nb-theme-cosmic :host .danger-container .hover:hover, .nb-theme-cosmic :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff547f;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .danger-container .active:active, .nb-theme-cosmic :host .danger-container .active.active, .nb-theme-cosmic :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db305b;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff386a; }\\n\\n.nb-theme-cosmic :host .secondary-container .original {\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .hover:hover, .nb-theme-cosmic :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #8970ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .secondary-container .active:active, .nb-theme-cosmic :host .secondary-container .active.active, .nb-theme-cosmic :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #654ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #7659ff; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-cosmic :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\n.nb-theme-corporate :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-corporate :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-corporate :host .primary-container .original {\\n  background-color: #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .hover:hover, .nb-theme-corporate :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #87aeff;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .primary-container .active:active, .nb-theme-corporate :host .primary-container .active.active, .nb-theme-corporate :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #638adb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #73a1ff; }\\n\\n.nb-theme-corporate :host .success-container .original {\\n  background-color: #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .hover:hover, .nb-theme-corporate :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #74d6e7;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .success-container .active:active, .nb-theme-corporate :host .success-container .active.active, .nb-theme-corporate :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #50b2c3;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #5dcfe3; }\\n\\n.nb-theme-corporate :host .warning-container .original {\\n  background-color: #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .hover:hover, .nb-theme-corporate :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffb080;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .warning-container .active:active, .nb-theme-corporate :host .warning-container .active.active, .nb-theme-corporate :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8c5c;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa36b; }\\n\\n.nb-theme-corporate :host .info-container .original {\\n  background-color: #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .hover:hover, .nb-theme-corporate :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #c491ef;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .info-container .active:active, .nb-theme-corporate :host .info-container .active.active, .nb-theme-corporate :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #a06dcb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ba7fec; }\\n\\n.nb-theme-corporate :host .danger-container .original {\\n  background-color: #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .hover:hover, .nb-theme-corporate :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff8094;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .danger-container .active:active, .nb-theme-corporate :host .danger-container .active.active, .nb-theme-corporate :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db5c71;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff6b83; }\\n\\n.nb-theme-corporate :host .secondary-container .original {\\n  border: 2px solid #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .hover:hover, .nb-theme-corporate :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #f0f4f6;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .secondary-container .active:active, .nb-theme-corporate :host .secondary-container .active.active, .nb-theme-corporate :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #ccd0d3;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #edf2f5; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-corporate :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss ***!
  \***********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-default :host .none {\\n  position: relative;\\n  transform: rotate(45deg); }\\n  .nb-theme-default :host .none::before, .nb-theme-default :host .none::after {\\n    position: absolute;\\n    content: '';\\n    background: #dadfe6; }\\n  .nb-theme-default :host .none::before {\\n    left: 50%;\\n    top: 10%;\\n    transform: translateX(-50%);\\n    width: 1px;\\n    height: 80%; }\\n  .nb-theme-default :host .none::after {\\n    top: 50%;\\n    left: 10%;\\n    transform: translateY(-50%);\\n    height: 1px;\\n    width: 80%; }\\n\\n.nb-theme-default :host .shadow {\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .primary-container .color {\\n  background-color: #8a7fff; }\\n\\n.nb-theme-default :host .primary-container .gradient {\\n  background-image: linear-gradient(to right, #b57fff, #8a7fff); }\\n\\n.nb-theme-default :host .primary-container .glow {\\n  box-shadow: 0 0 0 0 #9f7fff; }\\n\\n.nb-theme-default :host .primary-container .bevel {\\n  box-shadow: 0 0 0 0 #896ddb; }\\n\\n.nb-theme-default :host .warning-container .color {\\n  background-color: #ffa100; }\\n\\n.nb-theme-default :host .warning-container .gradient {\\n  background-image: linear-gradient(to right, #ffcc00, #ffa100); }\\n\\n.nb-theme-default :host .warning-container .glow {\\n  box-shadow: 0 0 0 0 #ffb600; }\\n\\n.nb-theme-default :host .warning-container .bevel {\\n  box-shadow: 0 0 0 0 #db9d00; }\\n\\n.nb-theme-default :host .success-container .color {\\n  background-color: #40dc7e; }\\n\\n.nb-theme-default :host .success-container .gradient {\\n  background-image: linear-gradient(to right, #40dcb2, #40dc7e); }\\n\\n.nb-theme-default :host .success-container .glow {\\n  box-shadow: 0 0 0 0 #40dc98; }\\n\\n.nb-theme-default :host .success-container .bevel {\\n  box-shadow: 0 0 0 0 #37bd83; }\\n\\n.nb-theme-default :host .info-container .color {\\n  background-color: #4ca6ff; }\\n\\n.nb-theme-default :host .info-container .gradient {\\n  background-image: linear-gradient(to right, #4cc4ff, #4ca6ff); }\\n\\n.nb-theme-default :host .info-container .glow {\\n  box-shadow: 0 0 0 0 #4cb5ff; }\\n\\n.nb-theme-default :host .info-container .bevel {\\n  box-shadow: 0 0 0 0 #419cdb; }\\n\\n.nb-theme-default :host .danger-container .color {\\n  background-color: #ff4c6a; }\\n\\n.nb-theme-default :host .danger-container .gradient {\\n  background-image: linear-gradient(to right, #ff4ca6, #ff4c6a); }\\n\\n.nb-theme-default :host .danger-container .glow {\\n  box-shadow: 0 0 0 0 #ff4c88; }\\n\\n.nb-theme-default :host .danger-container .bevel {\\n  box-shadow: 0 0 0 0 #db4175; }\\n\\n.nb-theme-default :host .secondary-container .color {\\n  background-color: transparent; }\\n\\n.nb-theme-default :host .secondary-container .border {\\n  border: 2px solid #dadfe6; }\\n\\n.nb-theme-default :host .secondary-container .glow {\\n  box-shadow: 0 0 0 0 #dadde6; }\\n\\n.nb-theme-default :host .secondary-container .bevel {\\n  box-shadow: 0 0 0 0 #bbbec6; }\\n\\n.nb-theme-default :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-default :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-cosmic :host .none {\\n  position: relative;\\n  transform: rotate(45deg); }\\n  .nb-theme-cosmic :host .none::before, .nb-theme-cosmic :host .none::after {\\n    position: absolute;\\n    content: '';\\n    background: #342e73; }\\n  .nb-theme-cosmic :host .none::before {\\n    left: 50%;\\n    top: 10%;\\n    transform: translateX(-50%);\\n    width: 1px;\\n    height: 80%; }\\n  .nb-theme-cosmic :host .none::after {\\n    top: 50%;\\n    left: 10%;\\n    transform: translateY(-50%);\\n    height: 1px;\\n    width: 80%; }\\n\\n.nb-theme-cosmic :host .shadow {\\n  box-shadow: 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\\n\\n.nb-theme-cosmic :host .primary-container .color {\\n  background-color: #7659ff; }\\n\\n.nb-theme-cosmic :host .primary-container .gradient {\\n  background-image: linear-gradient(to right, #ad59ff, #7659ff); }\\n\\n.nb-theme-cosmic :host .primary-container .glow {\\n  box-shadow: 0 2px 8px 0 #9259ff; }\\n\\n.nb-theme-cosmic :host .primary-container .bevel {\\n  box-shadow: 0 3px 0 0 #7e4ddb; }\\n\\n.nb-theme-cosmic :host .warning-container .color {\\n  background-color: #ffa100; }\\n\\n.nb-theme-cosmic :host .warning-container .gradient {\\n  background-image: linear-gradient(to right, #ffcc00, #ffa100); }\\n\\n.nb-theme-cosmic :host .warning-container .glow {\\n  box-shadow: 0 2px 8px 0 #ffb600; }\\n\\n.nb-theme-cosmic :host .warning-container .bevel {\\n  box-shadow: 0 3px 0 0 #db9d00; }\\n\\n.nb-theme-cosmic :host .success-container .color {\\n  background-color: #00d977; }\\n\\n.nb-theme-cosmic :host .success-container .gradient {\\n  background-image: linear-gradient(to right, #00d9bf, #00d977); }\\n\\n.nb-theme-cosmic :host .success-container .glow {\\n  box-shadow: 0 2px 8px 0 #00d99b; }\\n\\n.nb-theme-cosmic :host .success-container .bevel {\\n  box-shadow: 0 3px 0 0 #00bb85; }\\n\\n.nb-theme-cosmic :host .info-container .color {\\n  background-color: #0088ff; }\\n\\n.nb-theme-cosmic :host .info-container .gradient {\\n  background-image: linear-gradient(to right, #00b3ff, #0088ff); }\\n\\n.nb-theme-cosmic :host .info-container .glow {\\n  box-shadow: 0 2px 8px 0 #009dff; }\\n\\n.nb-theme-cosmic :host .info-container .bevel {\\n  box-shadow: 0 3px 0 0 #0087db; }\\n\\n.nb-theme-cosmic :host .danger-container .color {\\n  background-color: #ff386a; }\\n\\n.nb-theme-cosmic :host .danger-container .gradient {\\n  background-image: linear-gradient(to right, #ff38ac, #ff386a); }\\n\\n.nb-theme-cosmic :host .danger-container .glow {\\n  box-shadow: 0 2px 8px 0 #ff388b; }\\n\\n.nb-theme-cosmic :host .danger-container .bevel {\\n  box-shadow: 0 3px 0 0 #db3078; }\\n\\n.nb-theme-cosmic :host .secondary-container .color {\\n  background-color: transparent; }\\n\\n.nb-theme-cosmic :host .secondary-container .border {\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .glow {\\n  box-shadow: 0 2px 8px 0 #9259ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .bevel {\\n  box-shadow: 0 3px 0 0 #7e4ddb; }\\n\\n.nb-theme-cosmic :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-cosmic :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-corporate :host .none {\\n  position: relative;\\n  transform: rotate(45deg); }\\n  .nb-theme-corporate :host .none::before, .nb-theme-corporate :host .none::after {\\n    position: absolute;\\n    content: '';\\n    background: #dadfe6; }\\n  .nb-theme-corporate :host .none::before {\\n    left: 50%;\\n    top: 10%;\\n    transform: translateX(-50%);\\n    width: 1px;\\n    height: 80%; }\\n  .nb-theme-corporate :host .none::after {\\n    top: 50%;\\n    left: 10%;\\n    transform: translateY(-50%);\\n    height: 1px;\\n    width: 80%; }\\n\\n.nb-theme-corporate :host .shadow {\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .primary-container .color {\\n  background-color: #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .gradient {\\n  background-image: linear-gradient(to right, #73a1ff, #73a1ff); }\\n\\n.nb-theme-corporate :host .primary-container .glow {\\n  box-shadow: 0 0 20px 0 #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .bevel {\\n  box-shadow: 0 0 0 0 #638adb; }\\n\\n.nb-theme-corporate :host .warning-container .color {\\n  background-color: #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .gradient {\\n  background-image: linear-gradient(to right, #ffa36b, #ffa36b); }\\n\\n.nb-theme-corporate :host .warning-container .glow {\\n  box-shadow: 0 0 20px 0 #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .bevel {\\n  box-shadow: 0 0 0 0 #db8c5c; }\\n\\n.nb-theme-corporate :host .success-container .color {\\n  background-color: #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .gradient {\\n  background-image: linear-gradient(to right, #5dcfe3, #5dcfe3); }\\n\\n.nb-theme-corporate :host .success-container .glow {\\n  box-shadow: 0 0 20px 0 #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .bevel {\\n  box-shadow: 0 0 0 0 #50b2c3; }\\n\\n.nb-theme-corporate :host .info-container .color {\\n  background-color: #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .gradient {\\n  background-image: linear-gradient(to right, #ba7fec, #ba7fec); }\\n\\n.nb-theme-corporate :host .info-container .glow {\\n  box-shadow: 0 0 20px 0 #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .bevel {\\n  box-shadow: 0 0 0 0 #a06dcb; }\\n\\n.nb-theme-corporate :host .danger-container .color {\\n  background-color: #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .gradient {\\n  background-image: linear-gradient(to right, #ff6b83, #ff6b83); }\\n\\n.nb-theme-corporate :host .danger-container .glow {\\n  box-shadow: 0 0 20px 0 #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .bevel {\\n  box-shadow: 0 0 0 0 #db5c71; }\\n\\n.nb-theme-corporate :host .secondary-container .color {\\n  background-color: #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .border {\\n  border: 2px solid #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .glow {\\n  box-shadow: 0 0 0 0 #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .bevel {\\n  box-shadow: 0 0 0 0 #ccd0d3; }\\n\\n.nb-theme-corporate :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-corporate :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss":
/*!*****************************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss ***!
  \*****************************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-actions > nb-action {\\n  padding: 0; }\\n\\n.nb-theme-default :host nb-action i {\\n  color: #a4abb3;\\n  font-size: 2.5rem; }\\n  [dir=ltr] .nb-theme-default :host nb-action i {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-default :host nb-action i {\\n    margin-left: 1rem; }\\n\\n.nb-theme-default :host nb-action span {\\n  font-family: Exo;\\n  font-weight: 600;\\n  color: #2a2a2a;\\n  text-transform: uppercase; }\\n\\n@media (max-width: 991.98px) {\\n  .nb-theme-default :host nb-actions nb-action {\\n    padding: 0 0.75rem; } }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-default :host nb-card-body {\\n    padding: 1rem; }\\n  .nb-theme-default :host nb-action {\\n    font-size: 0.75rem; }\\n    .nb-theme-default :host nb-action i {\\n      font-size: 2rem; }\\n      [dir=ltr] .nb-theme-default :host nb-action i {\\n        margin-right: 0.5rem; }\\n      [dir=rtl] .nb-theme-default :host nb-action i {\\n        margin-left: 0.5rem; } }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-default :host nb-action i {\\n    font-size: 1.75rem;\\n    margin: 0; }\\n  .nb-theme-default :host span {\\n    display: none; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-actions > nb-action {\\n  padding: 0; }\\n\\n.nb-theme-cosmic :host nb-action i {\\n  color: #a1a1e5;\\n  font-size: 2.5rem; }\\n  [dir=ltr] .nb-theme-cosmic :host nb-action i {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-cosmic :host nb-action i {\\n    margin-left: 1rem; }\\n\\n.nb-theme-cosmic :host nb-action span {\\n  font-family: Exo;\\n  font-weight: 600;\\n  color: #ffffff;\\n  text-transform: uppercase; }\\n\\n@media (max-width: 991.98px) {\\n  .nb-theme-cosmic :host nb-actions nb-action {\\n    padding: 0 0.75rem; } }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-cosmic :host nb-card-body {\\n    padding: 1rem; }\\n  .nb-theme-cosmic :host nb-action {\\n    font-size: 0.75rem; }\\n    .nb-theme-cosmic :host nb-action i {\\n      font-size: 2rem; }\\n      [dir=ltr] .nb-theme-cosmic :host nb-action i {\\n        margin-right: 0.5rem; }\\n      [dir=rtl] .nb-theme-cosmic :host nb-action i {\\n        margin-left: 0.5rem; } }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-cosmic :host nb-action i {\\n    font-size: 1.75rem;\\n    margin: 0; }\\n  .nb-theme-cosmic :host span {\\n    display: none; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-actions > nb-action {\\n  padding: 0; }\\n\\n.nb-theme-corporate :host nb-action i {\\n  color: #a4abb3;\\n  font-size: 2.5rem;\\n  color: #d3dbe5; }\\n  [dir=ltr] .nb-theme-corporate :host nb-action i {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-corporate :host nb-action i {\\n    margin-left: 1rem; }\\n\\n.nb-theme-corporate :host nb-action span {\\n  font-family: Exo;\\n  font-weight: 600;\\n  color: #181818;\\n  text-transform: uppercase; }\\n\\n@media (max-width: 991.98px) {\\n  .nb-theme-corporate :host nb-actions nb-action {\\n    padding: 0 0.75rem; } }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-corporate :host nb-card-body {\\n    padding: 1rem; }\\n  .nb-theme-corporate :host nb-action {\\n    font-size: 0.75rem; }\\n    .nb-theme-corporate :host nb-action i {\\n      font-size: 2rem; }\\n      [dir=ltr] .nb-theme-corporate :host nb-action i {\\n        margin-right: 0.5rem; }\\n      [dir=rtl] .nb-theme-corporate :host nb-action i {\\n        margin-left: 0.5rem; } }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-corporate :host nb-action i {\\n    font-size: 1.75rem;\\n    margin: 0; }\\n  .nb-theme-corporate :host span {\\n    display: none; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss ***!
  \*****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\n.nb-theme-default :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-default :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-default :host .primary-container .original {\\n  background-color: #8a7fff; }\\n\\n.nb-theme-default :host .primary-container .hover:hover, .nb-theme-default :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #9a91ff;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .primary-container .active:active, .nb-theme-default :host .primary-container .active.active, .nb-theme-default :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #776ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #8a7fff; }\\n\\n.nb-theme-default :host .success-container .original {\\n  background-color: #40dc7e; }\\n\\n.nb-theme-default :host .success-container .hover:hover, .nb-theme-default :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #5be190;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .success-container .active:active, .nb-theme-default :host .success-container .active.active, .nb-theme-default :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #37bd6c;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #40dc7e; }\\n\\n.nb-theme-default :host .warning-container .original {\\n  background-color: #ffa100; }\\n\\n.nb-theme-default :host .warning-container .hover:hover, .nb-theme-default :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffae24;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .warning-container .active:active, .nb-theme-default :host .warning-container .active.active, .nb-theme-default :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8a00;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa100; }\\n\\n.nb-theme-default :host .info-container .original {\\n  background-color: #4ca6ff; }\\n\\n.nb-theme-default :host .info-container .hover:hover, .nb-theme-default :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #65b2ff;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .info-container .active:active, .nb-theme-default :host .info-container .active.active, .nb-theme-default :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #418fdb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #4ca6ff; }\\n\\n.nb-theme-default :host .danger-container .original {\\n  background-color: #ff4c6a; }\\n\\n.nb-theme-default :host .danger-container .hover:hover, .nb-theme-default :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff657f;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .danger-container .active:active, .nb-theme-default :host .danger-container .active.active, .nb-theme-default :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db415b;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff4c6a; }\\n\\n.nb-theme-default :host .secondary-container .original {\\n  border: 2px solid #dadfe6; }\\n\\n.nb-theme-default :host .secondary-container .hover:hover, .nb-theme-default :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #dfe3ea;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .secondary-container .active:active, .nb-theme-default :host .secondary-container .active.active, .nb-theme-default :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #bbc0c6;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #dadfe6; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-default :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\n.nb-theme-cosmic :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-cosmic :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-cosmic :host .primary-container .original {\\n  background-color: #7659ff; }\\n\\n.nb-theme-cosmic :host .primary-container .hover:hover, .nb-theme-cosmic :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #8970ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .primary-container .active:active, .nb-theme-cosmic :host .primary-container .active.active, .nb-theme-cosmic :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #654ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .success-container .original {\\n  background-color: #00d977; }\\n\\n.nb-theme-cosmic :host .success-container .hover:hover, .nb-theme-cosmic :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #24de8a;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .success-container .active:active, .nb-theme-cosmic :host .success-container .active.active, .nb-theme-cosmic :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #00bb66;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #00d977; }\\n\\n.nb-theme-cosmic :host .warning-container .original {\\n  background-color: #ffa100; }\\n\\n.nb-theme-cosmic :host .warning-container .hover:hover, .nb-theme-cosmic :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffae24;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .warning-container .active:active, .nb-theme-cosmic :host .warning-container .active.active, .nb-theme-cosmic :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8a00;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa100; }\\n\\n.nb-theme-cosmic :host .info-container .original {\\n  background-color: #0088ff; }\\n\\n.nb-theme-cosmic :host .info-container .hover:hover, .nb-theme-cosmic :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #2499ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .info-container .active:active, .nb-theme-cosmic :host .info-container .active.active, .nb-theme-cosmic :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #0075db;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #0088ff; }\\n\\n.nb-theme-cosmic :host .danger-container .original {\\n  background-color: #ff386a; }\\n\\n.nb-theme-cosmic :host .danger-container .hover:hover, .nb-theme-cosmic :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff547f;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .danger-container .active:active, .nb-theme-cosmic :host .danger-container .active.active, .nb-theme-cosmic :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db305b;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff386a; }\\n\\n.nb-theme-cosmic :host .secondary-container .original {\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .hover:hover, .nb-theme-cosmic :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #8970ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .secondary-container .active:active, .nb-theme-cosmic :host .secondary-container .active.active, .nb-theme-cosmic :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #654ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #7659ff; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-cosmic :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n\\n.nb-theme-corporate :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-corporate :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-corporate :host .primary-container .original {\\n  background-color: #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .hover:hover, .nb-theme-corporate :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #87aeff;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .primary-container .active:active, .nb-theme-corporate :host .primary-container .active.active, .nb-theme-corporate :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #638adb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #73a1ff; }\\n\\n.nb-theme-corporate :host .success-container .original {\\n  background-color: #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .hover:hover, .nb-theme-corporate :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #74d6e7;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .success-container .active:active, .nb-theme-corporate :host .success-container .active.active, .nb-theme-corporate :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #50b2c3;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #5dcfe3; }\\n\\n.nb-theme-corporate :host .warning-container .original {\\n  background-color: #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .hover:hover, .nb-theme-corporate :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffb080;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .warning-container .active:active, .nb-theme-corporate :host .warning-container .active.active, .nb-theme-corporate :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8c5c;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa36b; }\\n\\n.nb-theme-corporate :host .info-container .original {\\n  background-color: #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .hover:hover, .nb-theme-corporate :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #c491ef;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .info-container .active:active, .nb-theme-corporate :host .info-container .active.active, .nb-theme-corporate :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #a06dcb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ba7fec; }\\n\\n.nb-theme-corporate :host .danger-container .original {\\n  background-color: #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .hover:hover, .nb-theme-corporate :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff8094;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .danger-container .active:active, .nb-theme-corporate :host .danger-container .active.active, .nb-theme-corporate :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db5c71;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff6b83; }\\n\\n.nb-theme-corporate :host .secondary-container .original {\\n  border: 2px solid #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .hover:hover, .nb-theme-corporate :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #f0f4f6;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .secondary-container .active:active, .nb-theme-corporate :host .secondary-container .active.active, .nb-theme-corporate :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #ccd0d3;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #edf2f5; }\\n\\n@media (min-width: 1400px) {\\n  .nb-theme-corporate :host .example-container {\\n    flex: 0 0 20%;\\n    max-width: 20%; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss":
/*!*************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss ***!
  \*************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0 0 29px;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between; }\\n\\n.nb-theme-default :host .shape-container {\\n  margin: 1.25rem 1.25rem 0; }\\n\\n.nb-theme-default :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-default :host .subheader {\\n  margin-bottom: 1rem;\\n  font-size: 0.875rem; }\\n  .nb-theme-default :host .subheader span:nth-child(2) {\\n    color: #2a2a2a;\\n    font-weight: 600; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0 0 29px;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between; }\\n\\n.nb-theme-cosmic :host .shape-container {\\n  margin: 1.25rem 1.25rem 0; }\\n\\n.nb-theme-cosmic :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-cosmic :host .subheader {\\n  margin-bottom: 1rem;\\n  font-size: 0.875rem; }\\n  .nb-theme-cosmic :host .subheader span:nth-child(2) {\\n    color: #ffffff;\\n    font-weight: 600; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0 0 29px;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between; }\\n\\n.nb-theme-corporate :host .shape-container {\\n  margin: 1.25rem 1.25rem 0; }\\n\\n.nb-theme-corporate :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-corporate :host .subheader {\\n  margin-bottom: 1rem;\\n  font-size: 0.875rem; }\\n  .nb-theme-corporate :host .subheader span:nth-child(2) {\\n    color: #181818;\\n    font-weight: 600; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss":
/*!***********************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss ***!
  \***********************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-default :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-default :host .size-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n.nb-theme-default :host .subheader {\\n  margin-bottom: 0.75rem;\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  color: #2a2a2a; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-cosmic :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-cosmic :host .size-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n.nb-theme-cosmic :host .subheader {\\n  margin-bottom: 0.75rem;\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  color: #ffffff; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-corporate :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-corporate :host .size-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n.nb-theme-corporate :host .subheader {\\n  margin-bottom: 0.75rem;\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  color: #181818; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss":
/*!***********************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss ***!
  \***********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-default :host nb-card-body input {\\n    width: 100%; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-cosmic :host nb-card-body input {\\n    width: 100%; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-corporate :host nb-card-body input {\\n    width: 100%; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss":
/*!*************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss ***!
  \*************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  overflow: visible; }\\n\\n.nb-theme-default :host .input-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .validation-checkboxes {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-default :host .validation-checkboxes .custom-control {\\n    margin-left: 1rem; }\\n\\n.nb-theme-default :host .demo-checkboxes {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .demo-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .demo-disabled-checkbox-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .demo-checkboxes-radio {\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.nb-theme-default :host .demo-rating {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-default :host .star {\\n  font-size: 1.5rem;\\n  color: #a4abb3; }\\n\\n.nb-theme-default :host .filled {\\n  color: #a4abb3; }\\n\\n.nb-theme-default :host .rating-header {\\n  line-height: 2rem;\\n  font-size: 1.25rem;\\n  font-family: Exo;\\n  font-weight: 500;\\n  color: #2a2a2a; }\\n\\n.nb-theme-default :host .current-rate {\\n  font-size: 1.5rem;\\n  color: #2a2a2a; }\\n  [dir=ltr] .nb-theme-default :host .current-rate {\\n    padding-left: 1rem; }\\n  [dir=rtl] .nb-theme-default :host .current-rate {\\n    padding-right: 1rem; }\\n\\n.nb-theme-default :host .full-name-inputs {\\n  display: flex; }\\n\\n.nb-theme-default :host .input-group.has-person-icon {\\n  position: relative; }\\n  .nb-theme-default :host .input-group.has-person-icon .form-control {\\n    padding-left: 3rem; }\\n  .nb-theme-default :host .input-group.has-person-icon::before {\\n    content: '\\\\F47D';\\n    font-family: 'Ionicons';\\n    font-size: 2rem;\\n    position: absolute;\\n    z-index: 100;\\n    left: 1rem;\\n    top: 0.25rem; }\\n\\n.nb-theme-default :host .dropdown {\\n  min-width: 7rem; }\\n\\n.nb-theme-default :host .dropdown-menu {\\n  width: auto; }\\n\\n.nb-theme-default :host .form-group label {\\n  padding: 0 0 0.75rem; }\\n\\n.nb-theme-default :host ngb-rating {\\n  outline: none; }\\n\\n.nb-theme-default :host ngb-rating i {\\n  color: #40dc7e; }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-default :host button:not(.btn-icon) {\\n    padding: 0.75rem 1rem;\\n    font-size: 0.75rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  overflow: visible; }\\n\\n.nb-theme-cosmic :host .input-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .validation-checkboxes {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-cosmic :host .validation-checkboxes .custom-control {\\n    margin-left: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-checkboxes {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-disabled-checkbox-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-checkboxes-radio {\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.nb-theme-cosmic :host .demo-rating {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-cosmic :host .star {\\n  font-size: 1.5rem;\\n  color: #a1a1e5; }\\n\\n.nb-theme-cosmic :host .filled {\\n  color: #a1a1e5; }\\n\\n.nb-theme-cosmic :host .rating-header {\\n  line-height: 2rem;\\n  font-size: 1.25rem;\\n  font-family: Exo;\\n  font-weight: 500;\\n  color: #ffffff; }\\n\\n.nb-theme-cosmic :host .current-rate {\\n  font-size: 1.5rem;\\n  color: #ffffff; }\\n  [dir=ltr] .nb-theme-cosmic :host .current-rate {\\n    padding-left: 1rem; }\\n  [dir=rtl] .nb-theme-cosmic :host .current-rate {\\n    padding-right: 1rem; }\\n\\n.nb-theme-cosmic :host .full-name-inputs {\\n  display: flex; }\\n\\n.nb-theme-cosmic :host .input-group.has-person-icon {\\n  position: relative; }\\n  .nb-theme-cosmic :host .input-group.has-person-icon .form-control {\\n    padding-left: 3rem; }\\n  .nb-theme-cosmic :host .input-group.has-person-icon::before {\\n    content: '\\\\F47D';\\n    font-family: 'Ionicons';\\n    font-size: 2rem;\\n    position: absolute;\\n    z-index: 100;\\n    left: 1rem;\\n    top: 0.25rem; }\\n\\n.nb-theme-cosmic :host .dropdown {\\n  min-width: 7rem; }\\n\\n.nb-theme-cosmic :host .dropdown-menu {\\n  width: auto; }\\n\\n.nb-theme-cosmic :host .form-group label {\\n  padding: 0 0 0.75rem; }\\n\\n.nb-theme-cosmic :host ngb-rating {\\n  outline: none; }\\n\\n.nb-theme-cosmic :host ngb-rating i {\\n  color: #00d977;\\n  color: #7659ff; }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-cosmic :host button:not(.btn-icon) {\\n    padding: 0.75rem 1rem;\\n    font-size: 0.75rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  overflow: visible; }\\n\\n.nb-theme-corporate :host .input-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .validation-checkboxes {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-corporate :host .validation-checkboxes .custom-control {\\n    margin-left: 1rem; }\\n\\n.nb-theme-corporate :host .demo-checkboxes {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .demo-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .demo-disabled-checkbox-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .demo-checkboxes-radio {\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.nb-theme-corporate :host .demo-rating {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-corporate :host .star {\\n  font-size: 1.5rem;\\n  color: #a4abb3; }\\n\\n.nb-theme-corporate :host .filled {\\n  color: #a4abb3; }\\n\\n.nb-theme-corporate :host .rating-header {\\n  line-height: 2rem;\\n  font-size: 1.25rem;\\n  font-family: Exo;\\n  font-weight: 500;\\n  color: #181818; }\\n\\n.nb-theme-corporate :host .current-rate {\\n  font-size: 1.5rem;\\n  color: #181818; }\\n  [dir=ltr] .nb-theme-corporate :host .current-rate {\\n    padding-left: 1rem; }\\n  [dir=rtl] .nb-theme-corporate :host .current-rate {\\n    padding-right: 1rem; }\\n\\n.nb-theme-corporate :host .full-name-inputs {\\n  display: flex; }\\n\\n.nb-theme-corporate :host .input-group.has-person-icon {\\n  position: relative; }\\n  .nb-theme-corporate :host .input-group.has-person-icon .form-control {\\n    padding-left: 3rem; }\\n  .nb-theme-corporate :host .input-group.has-person-icon::before {\\n    content: '\\\\F47D';\\n    font-family: 'Ionicons';\\n    font-size: 2rem;\\n    position: absolute;\\n    z-index: 100;\\n    left: 1rem;\\n    top: 0.25rem; }\\n\\n.nb-theme-corporate :host .dropdown {\\n  min-width: 7rem; }\\n\\n.nb-theme-corporate :host .dropdown-menu {\\n  width: auto; }\\n\\n.nb-theme-corporate :host .form-group label {\\n  padding: 0 0 0.75rem; }\\n\\n.nb-theme-corporate :host ngb-rating {\\n  outline: none; }\\n\\n.nb-theme-corporate :host ngb-rating i {\\n  color: #5dcfe3; }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-corporate :host button:not(.btn-icon) {\\n    padding: 0.75rem 1rem;\\n    font-size: 0.75rem; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss":
/*!***************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss ***!
  \***************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host .full-width {\\n  flex: 1;\\n  min-width: 220px; }\\n\\n.nb-theme-default :host nb-checkbox {\\n  margin-bottom: 1rem; }\\n\\n[dir=ltr] .nb-theme-default :host .form-inline > * {\\n  margin: 0 1.5rem 1.5rem 0; }\\n\\n[dir=rtl] .nb-theme-default :host .form-inline > * {\\n  margin: 0 0 1.5rem 1.5rem; }\\n\\n.nb-theme-default :host nb-card.inline-form-card nb-card-body {\\n  padding-bottom: 0; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host .full-width {\\n  flex: 1;\\n  min-width: 220px; }\\n\\n.nb-theme-cosmic :host nb-checkbox {\\n  margin-bottom: 1rem; }\\n\\n[dir=ltr] .nb-theme-cosmic :host .form-inline > * {\\n  margin: 0 1.5rem 1.5rem 0; }\\n\\n[dir=rtl] .nb-theme-cosmic :host .form-inline > * {\\n  margin: 0 0 1.5rem 1.5rem; }\\n\\n.nb-theme-cosmic :host nb-card.inline-form-card nb-card-body {\\n  padding-bottom: 0; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host .full-width {\\n  flex: 1;\\n  min-width: 220px; }\\n\\n.nb-theme-corporate :host nb-checkbox {\\n  margin-bottom: 1rem; }\\n\\n[dir=ltr] .nb-theme-corporate :host .form-inline > * {\\n  margin: 0 1.5rem 1.5rem 0; }\\n\\n[dir=rtl] .nb-theme-corporate :host .form-inline > * {\\n  margin: 0 0 1.5rem 1.5rem; }\\n\\n.nb-theme-corporate :host nb-card.inline-form-card nb-card-body {\\n  padding-bottom: 0; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.html":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.html ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-body> <div class=\\\"action-groups-header\\\"> Action Groups </div> <nb-actions size=\\\"medium\\\"> <nb-action icon=\\\"nb-menu\\\"></nb-action> <nb-action icon=\\\"nb-search\\\"></nb-action> <nb-action icon=\\\"nb-email\\\"></nb-action> <nb-action disabled=\\\"disabled\\\" icon=\\\"nb-notifications\\\"></nb-action> <nb-action> <nb-user name=\\\"Han Solo\\\"></nb-user> </nb-action> <nb-action icon=\\\"nb-gear\\\"></nb-action> </nb-actions> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2FjdGlvbi1ncm91cHMvYWN0aW9uLWdyb3Vwcy5jb21wb25lbnQuaHRtbD80NDZlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9hY3Rpb24tZ3JvdXBzL2FjdGlvbi1ncm91cHMuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPG5iLWNhcmQ+IDxuYi1jYXJkLWJvZHk+IDxkaXYgY2xhc3M9XFxcImFjdGlvbi1ncm91cHMtaGVhZGVyXFxcIj4gQWN0aW9uIEdyb3VwcyA8L2Rpdj4gPG5iLWFjdGlvbnMgc2l6ZT1cXFwibWVkaXVtXFxcIj4gPG5iLWFjdGlvbiBpY29uPVxcXCJuYi1tZW51XFxcIj48L25iLWFjdGlvbj4gPG5iLWFjdGlvbiBpY29uPVxcXCJuYi1zZWFyY2hcXFwiPjwvbmItYWN0aW9uPiA8bmItYWN0aW9uIGljb249XFxcIm5iLWVtYWlsXFxcIj48L25iLWFjdGlvbj4gPG5iLWFjdGlvbiBkaXNhYmxlZD1cXFwiZGlzYWJsZWRcXFwiIGljb249XFxcIm5iLW5vdGlmaWNhdGlvbnNcXFwiPjwvbmItYWN0aW9uPiA8bmItYWN0aW9uPiA8bmItdXNlciBuYW1lPVxcXCJIYW4gU29sb1xcXCI+PC9uYi11c2VyPiA8L25iLWFjdGlvbj4gPG5iLWFjdGlvbiBpY29uPVxcXCJuYi1nZWFyXFxcIj48L25iLWFjdGlvbj4gPC9uYi1hY3Rpb25zPiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./action-groups.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2FjdGlvbi1ncm91cHMvYWN0aW9uLWdyb3Vwcy5jb21wb25lbnQuc2Nzcz9mNzk1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyx3VUFBZ0s7O0FBRTdMO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvYWN0aW9uLWdyb3Vwcy9hY3Rpb24tZ3JvdXBzLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2FjdGlvbi1ncm91cHMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.ts":
/*!****************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ActionGroupsComponent = /** @class */ (function () {\n    function ActionGroupsComponent() {\n    }\n    ActionGroupsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-action-groups',\n            styles: [__webpack_require__(/*! ./action-groups.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.scss\")],\n            template: __webpack_require__(/*! ./action-groups.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.html\")\n        })\n    ], ActionGroupsComponent);\n    return ActionGroupsComponent;\n}());\nexports.ActionGroupsComponent = ActionGroupsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2FjdGlvbi1ncm91cHMvYWN0aW9uLWdyb3Vwcy5jb21wb25lbnQudHM/NjM4ZiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFPMUM7SUFBQTtJQUFvQyxDQUFDO0lBQXhCLHFCQUFxQjtRQUxqQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixTQUFTLG1CQUFHLHVJQUFpQztZQUM3Qyw2QkFBYSx1SUFBZ0M7U0FDaEQsQ0FBQztPQUNXLHFCQUFxQixDQUFHO0lBQUQsNEJBQUM7Q0FBQTtBQUF4QixzREFBcUIiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2FjdGlvbi1ncm91cHMvYWN0aW9uLWdyb3Vwcy5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtYWN0aW9uLWdyb3VwcycsXG4gICAgc3R5bGVVcmxzOiBbJy4vYWN0aW9uLWdyb3Vwcy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9hY3Rpb24tZ3JvdXBzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBBY3Rpb25Hcm91cHNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Elements</nb-card-header> <nb-card-body> <div class=\\\"button-container\\\"> <button (click)=\\\"onClick()\\\" nbButton>Button</button> </div> <div class=\\\"button-container\\\"> <input (click)=\\\"onClick()\\\" nbButton type=\\\"submit\\\" value=\\\"Input Submit\\\"/> </div> <div class=\\\"button-container\\\"> <input (click)=\\\"onClick()\\\" nbButton type=\\\"button\\\" value=\\\"Input Button\\\"/> </div> <div class=\\\"button-container\\\"> <a (click)=\\\"onClick()\\\" href=\\\"#\\\" nbButton>Link</a> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbi1lbGVtZW50cy9idXR0b24tZWxlbWVudHMuY29tcG9uZW50Lmh0bWw/YmFhYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvYnV0dG9uLWVsZW1lbnRzL2J1dHRvbi1lbGVtZW50cy5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkJ1dHRvbiBFbGVtZW50czwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxkaXYgY2xhc3M9XFxcImJ1dHRvbi1jb250YWluZXJcXFwiPiA8YnV0dG9uIChjbGljayk9XFxcIm9uQ2xpY2soKVxcXCIgbmJCdXR0b24+QnV0dG9uPC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidXR0b24tY29udGFpbmVyXFxcIj4gPGlucHV0IChjbGljayk9XFxcIm9uQ2xpY2soKVxcXCIgbmJCdXR0b24gdHlwZT1cXFwic3VibWl0XFxcIiB2YWx1ZT1cXFwiSW5wdXQgU3VibWl0XFxcIi8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidXR0b24tY29udGFpbmVyXFxcIj4gPGlucHV0IChjbGljayk9XFxcIm9uQ2xpY2soKVxcXCIgbmJCdXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiB2YWx1ZT1cXFwiSW5wdXQgQnV0dG9uXFxcIi8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJidXR0b24tY29udGFpbmVyXFxcIj4gPGEgKGNsaWNrKT1cXFwib25DbGljaygpXFxcIiBocmVmPVxcXCIjXFxcIiBuYkJ1dHRvbj5MaW5rPC9hPiA8L2Rpdj4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./button-elements.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbi1lbGVtZW50cy9idXR0b24tZWxlbWVudHMuY29tcG9uZW50LnNjc3M/MGU0OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsOFVBQWtLOztBQUUvTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbi1lbGVtZW50cy9idXR0b24tZWxlbWVudHMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYnV0dG9uLWVsZW1lbnRzLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ButtonElementsComponent = /** @class */ (function () {\n    function ButtonElementsComponent() {\n    }\n    ButtonElementsComponent.prototype.onClick = function () { };\n    ButtonElementsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-button-elements',\n            styles: [__webpack_require__(/*! ./button-elements.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.scss\")],\n            template: __webpack_require__(/*! ./button-elements.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.html\")\n        })\n    ], ButtonElementsComponent);\n    return ButtonElementsComponent;\n}());\nexports.ButtonElementsComponent = ButtonElementsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbi1lbGVtZW50cy9idXR0b24tZWxlbWVudHMuY29tcG9uZW50LnRzPzM3YjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBQUE7SUFFQSxDQUFDO0lBREcseUNBQU8sR0FBUCxjQUFXLENBQUM7SUFESCx1QkFBdUI7UUFMbkMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsU0FBUyxtQkFBRyw2SUFBbUM7WUFDL0MsNkJBQWEsNklBQWtDO1NBQ2xELENBQUM7T0FDVyx1QkFBdUIsQ0FFbkM7SUFBRCw4QkFBQztDQUFBO0FBRlksMERBQXVCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9idXR0b24tZWxlbWVudHMvYnV0dG9uLWVsZW1lbnRzLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1idXR0b24tZWxlbWVudHMnLFxuICAgIHN0eWxlVXJsczogWycuL2J1dHRvbi1lbGVtZW50cy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9idXR0b24tZWxlbWVudHMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJ1dHRvbkVsZW1lbnRzQ29tcG9uZW50IHtcbiAgICBvbkNsaWNrKCkge31cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.html":
/*!**********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.html ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-lg-12\\\"> <ngx-hero-buttons></ngx-hero-buttons> <ngx-default-buttons></ngx-default-buttons> <ngx-outline-buttons></ngx-outline-buttons> </div> <div class=\\\"col-md-12 col-lg-12 col-xxxl-6\\\"> <ngx-shape-buttons></ngx-shape-buttons> <ngx-action-groups></ngx-action-groups> <ngx-labeled-actions-group></ngx-labeled-actions-group> </div> <div class=\\\"col-md-12 col-lg-12 col-xxxl-6\\\"> <ngx-size-buttons></ngx-size-buttons> <ngx-button-elements></ngx-button-elements> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbnMuY29tcG9uZW50Lmh0bWw/OTg4YSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvYnV0dG9ucy5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctMTJcXFwiPiA8bmd4LWhlcm8tYnV0dG9ucz48L25neC1oZXJvLWJ1dHRvbnM+IDxuZ3gtZGVmYXVsdC1idXR0b25zPjwvbmd4LWRlZmF1bHQtYnV0dG9ucz4gPG5neC1vdXRsaW5lLWJ1dHRvbnM+PC9uZ3gtb3V0bGluZS1idXR0b25zPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIGNvbC1sZy0xMiBjb2wteHh4bC02XFxcIj4gPG5neC1zaGFwZS1idXR0b25zPjwvbmd4LXNoYXBlLWJ1dHRvbnM+IDxuZ3gtYWN0aW9uLWdyb3Vwcz48L25neC1hY3Rpb24tZ3JvdXBzPiA8bmd4LWxhYmVsZWQtYWN0aW9ucy1ncm91cD48L25neC1sYWJlbGVkLWFjdGlvbnMtZ3JvdXA+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTIgY29sLWxnLTEyIGNvbC14eHhsLTZcXFwiPiA8bmd4LXNpemUtYnV0dG9ucz48L25neC1zaXplLWJ1dHRvbnM+IDxuZ3gtYnV0dG9uLWVsZW1lbnRzPjwvbmd4LWJ1dHRvbi1lbGVtZW50cz4gPC9kaXY+IDwvZGl2PiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss":
/*!**********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbnMuY29tcG9uZW50LnNjc3M/MTgxMCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsd1NBQW9KOztBQUVqTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYnV0dG9ucy5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.ts":
/*!********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.ts ***!
  \********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ButtonsComponent = /** @class */ (function () {\n    function ButtonsComponent() {\n    }\n    ButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-buttons',\n            styles: [__webpack_require__(/*! ./buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.scss\")],\n            template: __webpack_require__(/*! ./buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.html\")\n        })\n    ], ButtonsComponent);\n    return ButtonsComponent;\n}());\nexports.ButtonsComponent = ButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbnMuY29tcG9uZW50LnRzPzYxMzAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBQUE7SUFBK0IsQ0FBQztJQUFuQixnQkFBZ0I7UUFMNUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxhQUFhO1lBQ3ZCLFNBQVMsbUJBQUcsNkdBQTJCO1lBQ3ZDLDZCQUFhLDZHQUEwQjtTQUMxQyxDQUFDO09BQ1csZ0JBQWdCLENBQUc7SUFBRCx1QkFBQztDQUFBO0FBQW5CLDRDQUFnQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvYnV0dG9ucy5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtYnV0dG9ucycsXG4gICAgc3R5bGVVcmxzOiBbJy4vYnV0dG9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9idXR0b25zLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25zQ29tcG9uZW50IHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.module.ts":
/*!*****************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.module.ts ***!
  \*****************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_module_1 = __webpack_require__(/*! ../../../@theme/theme.module */ \"./src/main/webapp/app/ngx-admin/@theme/theme.module.ts\");\nvar default_buttons_component_1 = __webpack_require__(/*! ./default-buttons/default-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.ts\");\nvar hero_buttons_component_1 = __webpack_require__(/*! ./hero-buttons/hero-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.ts\");\nvar shape_buttons_component_1 = __webpack_require__(/*! ./shape-buttons/shape-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.ts\");\nvar size_buttons_component_1 = __webpack_require__(/*! ./size-buttons/size-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.ts\");\nvar buttons_component_1 = __webpack_require__(/*! ./buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.ts\");\nvar action_groups_component_1 = __webpack_require__(/*! ./action-groups/action-groups.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/action-groups/action-groups.component.ts\");\nvar labeled_actions_group_component_1 = __webpack_require__(/*! ./labeled-actions-group/labeled-actions-group.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.ts\");\nvar outline_buttons_component_1 = __webpack_require__(/*! ./outline-buttons/outline-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.ts\");\nvar button_elements_component_1 = __webpack_require__(/*! ./button-elements/button-elements.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/button-elements/button-elements.component.ts\");\nvar components = [\n    buttons_component_1.ButtonsComponent,\n    default_buttons_component_1.DefaultButtonsComponent,\n    outline_buttons_component_1.OutlineButtonsComponent,\n    hero_buttons_component_1.HeroButtonComponent,\n    shape_buttons_component_1.ShapeButtonsComponent,\n    size_buttons_component_1.SizeButtonsComponent,\n    action_groups_component_1.ActionGroupsComponent,\n    labeled_actions_group_component_1.LabeledActionsGroupComponent,\n    button_elements_component_1.ButtonElementsComponent\n];\nvar ButtonsModule = /** @class */ (function () {\n    function ButtonsModule() {\n    }\n    ButtonsModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [theme_module_1.ThemeModule],\n            exports: components.slice(),\n            declarations: components.slice(),\n            providers: []\n        })\n    ], ButtonsModule);\n    return ButtonsModule;\n}());\nexports.ButtonsModule = ButtonsModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2J1dHRvbnMubW9kdWxlLnRzPzIzOWIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQXlDO0FBRXpDLHVJQUEyRDtBQUMzRCw2TUFBc0Y7QUFDdEYsOExBQTRFO0FBQzVFLG1NQUFnRjtBQUNoRiw4TEFBNkU7QUFDN0UscUpBQXVEO0FBQ3ZELG1NQUFnRjtBQUNoRiwyT0FBdUc7QUFDdkcsNk1BQXNGO0FBQ3RGLDZNQUFzRjtBQUV0RixJQUFNLFVBQVUsR0FBRztJQUNmLG9DQUFnQjtJQUNoQixtREFBdUI7SUFDdkIsbURBQXVCO0lBQ3ZCLDRDQUFtQjtJQUNuQiwrQ0FBcUI7SUFDckIsNkNBQW9CO0lBQ3BCLCtDQUFxQjtJQUNyQiw4REFBNEI7SUFDNUIsbURBQXVCO0NBQzFCLENBQUM7QUFRRjtJQUFBO0lBQTRCLENBQUM7SUFBaEIsYUFBYTtRQU56QixlQUFRLENBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQywwQkFBVyxDQUFDO1lBQ3RCLE9BQU8sRUFBTSxVQUFVLFFBQUM7WUFDeEIsWUFBWSxFQUFNLFVBQVUsUUFBQztZQUM3QixTQUFTLEVBQUUsRUFBRTtTQUNoQixDQUFDO09BQ1csYUFBYSxDQUFHO0lBQUQsb0JBQUM7Q0FBQTtBQUFoQixzQ0FBYSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvYnV0dG9ucy5tb2R1bGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUaGVtZU1vZHVsZSB9IGZyb20gJy4uLy4uLy4uL0B0aGVtZS90aGVtZS5tb2R1bGUnO1xuaW1wb3J0IHsgRGVmYXVsdEJ1dHRvbnNDb21wb25lbnQgfSBmcm9tICcuL2RlZmF1bHQtYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IEhlcm9CdXR0b25Db21wb25lbnQgfSBmcm9tICcuL2hlcm8tYnV0dG9ucy9oZXJvLWJ1dHRvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IFNoYXBlQnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vc2hhcGUtYnV0dG9ucy9zaGFwZS1idXR0b25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBTaXplQnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vc2l6ZS1idXR0b25zL3NpemUtYnV0dG9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vYnV0dG9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQWN0aW9uR3JvdXBzQ29tcG9uZW50IH0gZnJvbSAnLi9hY3Rpb24tZ3JvdXBzL2FjdGlvbi1ncm91cHMuY29tcG9uZW50JztcbmltcG9ydCB7IExhYmVsZWRBY3Rpb25zR3JvdXBDb21wb25lbnQgfSBmcm9tICcuL2xhYmVsZWQtYWN0aW9ucy1ncm91cC9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAuY29tcG9uZW50JztcbmltcG9ydCB7IE91dGxpbmVCdXR0b25zQ29tcG9uZW50IH0gZnJvbSAnLi9vdXRsaW5lLWJ1dHRvbnMvb3V0bGluZS1idXR0b25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25FbGVtZW50c0NvbXBvbmVudCB9IGZyb20gJy4vYnV0dG9uLWVsZW1lbnRzL2J1dHRvbi1lbGVtZW50cy5jb21wb25lbnQnO1xuXG5jb25zdCBjb21wb25lbnRzID0gW1xuICAgIEJ1dHRvbnNDb21wb25lbnQsXG4gICAgRGVmYXVsdEJ1dHRvbnNDb21wb25lbnQsXG4gICAgT3V0bGluZUJ1dHRvbnNDb21wb25lbnQsXG4gICAgSGVyb0J1dHRvbkNvbXBvbmVudCxcbiAgICBTaGFwZUJ1dHRvbnNDb21wb25lbnQsXG4gICAgU2l6ZUJ1dHRvbnNDb21wb25lbnQsXG4gICAgQWN0aW9uR3JvdXBzQ29tcG9uZW50LFxuICAgIExhYmVsZWRBY3Rpb25zR3JvdXBDb21wb25lbnQsXG4gICAgQnV0dG9uRWxlbWVudHNDb21wb25lbnRcbl07XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1RoZW1lTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbLi4uY29tcG9uZW50c10sXG4gICAgZGVjbGFyYXRpb25zOiBbLi4uY29tcG9uZW50c10sXG4gICAgcHJvdmlkZXJzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25zTW9kdWxlIHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header> <span>Default Buttons</span> </nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"example-container col-md-4\\\" *ngFor=\\\"let b of buttons\\\"> <div class=\\\"container-title\\\"> <span>{{ b.containerTitle }}</span> </div> <div class=\\\"container-btn\\\"> <button nbButton status=\\\"{{ b.status }}\\\" class=\\\"btn-demo\\\"> {{ b.title }} </button> </div> <div class=\\\"{{ b.container }}\\\"> <div class=\\\"state-container\\\"> <div class=\\\"state-value original\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Default</span> <span class=\\\"subheader\\\">{{ b.default }}</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value hover\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Hover</span> <span class=\\\"subheader\\\">14% white</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value active\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Active</span> <span class=\\\"subheader\\\">14% black</span> </div> </div> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2RlZmF1bHQtYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50Lmh0bWw/YWYxMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4T0FBOE8sb0JBQW9CLHlFQUF5RSxZQUFZLHlCQUF5QixXQUFXLGlDQUFpQyxlQUFlLCtLQUErSyxhQUFhIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMvZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC5odG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+IDxzcGFuPkRlZmF1bHQgQnV0dG9uczwvc3Bhbj4gPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiZXhhbXBsZS1jb250YWluZXIgY29sLW1kLTRcXFwiICpuZ0Zvcj1cXFwibGV0IGIgb2YgYnV0dG9uc1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci10aXRsZVxcXCI+IDxzcGFuPnt7IGIuY29udGFpbmVyVGl0bGUgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItYnRuXFxcIj4gPGJ1dHRvbiBuYkJ1dHRvbiBzdGF0dXM9XFxcInt7IGIuc3RhdHVzIH19XFxcIiBjbGFzcz1cXFwiYnRuLWRlbW9cXFwiPiB7eyBiLnRpdGxlIH19IDwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwie3sgYi5jb250YWluZXIgfX1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBvcmlnaW5hbFxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5EZWZhdWx0PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj57eyBiLmRlZmF1bHQgfX08L3NwYW4+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RhdGUtY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwic3RhdGUtdmFsdWUgaG92ZXJcXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIj4gPHNwYW4gY2xhc3M9XFxcImhlYWRlclxcXCI+SG92ZXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjE0JSB3aGl0ZTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBhY3RpdmVcXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIj4gPHNwYW4gY2xhc3M9XFxcImhlYWRlclxcXCI+QWN0aXZlPC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj4xNCUgYmxhY2s8L3NwYW4+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./default-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2RlZmF1bHQtYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50LnNjc3M/NzI3ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsOFVBQWtLOztBQUUvTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2RlZmF1bHQtYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar DefaultButtonsComponent = /** @class */ (function () {\n    function DefaultButtonsComponent() {\n        this.buttons = [\n            {\n                status: 'primary',\n                container: 'primary-container',\n                containerTitle: 'Primary Button',\n                title: 'Primary',\n                default: '#7659ff'\n            },\n            {\n                status: 'warning',\n                container: 'warning-container',\n                containerTitle: 'Warning Button',\n                title: 'Warning',\n                default: '#ffcb17'\n            },\n            {\n                status: 'success',\n                container: 'success-container',\n                containerTitle: 'Success Button',\n                title: 'Success',\n                default: '#00d977'\n            },\n            {\n                status: 'info',\n                container: 'info-container',\n                containerTitle: 'Info Button',\n                title: 'Info',\n                default: '#0088ff'\n            },\n            {\n                status: 'danger',\n                container: 'danger-container',\n                containerTitle: 'Danger Button',\n                title: 'Danger',\n                default: '#ff386a'\n            }\n        ];\n    }\n    DefaultButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-default-buttons',\n            styles: [__webpack_require__(/*! ./default-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./default-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.html\")\n        })\n    ], DefaultButtonsComponent);\n    return DefaultButtonsComponent;\n}());\nexports.DefaultButtonsComponent = DefaultButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2RlZmF1bHQtYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50LnRzPzk0YzIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBTEE7UUFNSSxZQUFPLEdBQUc7WUFDTjtnQkFDSSxNQUFNLEVBQUUsU0FBUztnQkFDakIsU0FBUyxFQUFFLG1CQUFtQjtnQkFDOUIsY0FBYyxFQUFFLGdCQUFnQjtnQkFDaEMsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2FBQ3JCO1lBQ0Q7Z0JBQ0ksTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLFNBQVMsRUFBRSxtQkFBbUI7Z0JBQzlCLGNBQWMsRUFBRSxnQkFBZ0I7Z0JBQ2hDLEtBQUssRUFBRSxTQUFTO2dCQUNoQixPQUFPLEVBQUUsU0FBUzthQUNyQjtZQUNEO2dCQUNJLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixTQUFTLEVBQUUsbUJBQW1CO2dCQUM5QixjQUFjLEVBQUUsZ0JBQWdCO2dCQUNoQyxLQUFLLEVBQUUsU0FBUztnQkFDaEIsT0FBTyxFQUFFLFNBQVM7YUFDckI7WUFDRDtnQkFDSSxNQUFNLEVBQUUsTUFBTTtnQkFDZCxTQUFTLEVBQUUsZ0JBQWdCO2dCQUMzQixjQUFjLEVBQUUsYUFBYTtnQkFDN0IsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsT0FBTyxFQUFFLFNBQVM7YUFDckI7WUFDRDtnQkFDSSxNQUFNLEVBQUUsUUFBUTtnQkFDaEIsU0FBUyxFQUFFLGtCQUFrQjtnQkFDN0IsY0FBYyxFQUFFLGVBQWU7Z0JBQy9CLEtBQUssRUFBRSxRQUFRO2dCQUNmLE9BQU8sRUFBRSxTQUFTO2FBQ3JCO1NBQ0osQ0FBQztJQUNOLENBQUM7SUF0Q1ksdUJBQXVCO1FBTG5DLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFNBQVMsbUJBQUcsNklBQW1DO1lBQy9DLDZCQUFhLDZJQUFrQztTQUNsRCxDQUFDO09BQ1csdUJBQXVCLENBc0NuQztJQUFELDhCQUFDO0NBQUE7QUF0Q1ksMERBQXVCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMvZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1kZWZhdWx0LWJ1dHRvbnMnLFxuICAgIHN0eWxlVXJsczogWycuL2RlZmF1bHQtYnV0dG9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERlZmF1bHRCdXR0b25zQ29tcG9uZW50IHtcbiAgICBidXR0b25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdwcmltYXJ5JyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ3ByaW1hcnktY29udGFpbmVyJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnUHJpbWFyeSBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdQcmltYXJ5JyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcjNzY1OWZmJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICd3YXJuaW5nJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ3dhcm5pbmctY29udGFpbmVyJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnV2FybmluZyBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdXYXJuaW5nJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcjZmZjYjE3J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdzdWNjZXNzJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ3N1Y2Nlc3MtY29udGFpbmVyJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnU3VjY2VzcyBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcjMDBkOTc3J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdpbmZvJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2luZm8tY29udGFpbmVyJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnSW5mbyBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdJbmZvJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcjMDA4OGZmJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdkYW5nZXInLFxuICAgICAgICAgICAgY29udGFpbmVyOiAnZGFuZ2VyLWNvbnRhaW5lcicsXG4gICAgICAgICAgICBjb250YWluZXJUaXRsZTogJ0RhbmdlciBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdEYW5nZXInLFxuICAgICAgICAgICAgZGVmYXVsdDogJyNmZjM4NmEnXG4gICAgICAgIH1cbiAgICBdO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/default-buttons/default-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.html":
/*!****************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.html ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Hero Buttons</nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"example-container col-sm-6 col-md-4 col-xl-3 col-xxxl-2\\\" *ngFor=\\\"let hb of settings\\\"> <div class=\\\"container-title\\\"> <span>{{ hb.title }}</span> </div> <div class=\\\"container-btn\\\"> <button class=\\\"btn-demo\\\" nbButton hero status=\\\"{{ hb.status }}\\\">{{ hb.buttonTitle }}</button> </div> <div class=\\\"{{ hb.container }}\\\"> <div class=\\\"state-container\\\" *ngIf=\\\"hb[themeName].border\\\"> <div class=\\\"state-value border\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Border</span> <span class=\\\"subheader\\\">{{ hb[themeName].border }}</span> </div> </div> <div class=\\\"state-container\\\" *ngIf=\\\"hb[themeName].color\\\"> <div class=\\\"state-value color\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Color</span> <span class=\\\"subheader\\\">{{ hb[themeName].color }}</span> </div> </div> <div class=\\\"state-container\\\" *ngIf=\\\"hb[themeName].gradientLeft\\\"> <div class=\\\"state-value gradient\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Linear Gradient</span> <span class=\\\"subheader\\\">{{ hb[themeName].gradientLeft }}</span> <span class=\\\"subheader\\\">{{ hb[themeName].gradientRight }}</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value bevel\\\" [ngClass]=\\\"{ 'none': !hb[themeName].bevel }\\\"></div> <div class=\\\"state-details\\\" *ngIf=\\\"hb[themeName].bevel\\\"> <span class=\\\"header\\\">Bevel</span> <span class=\\\"subheader\\\">0 3px 0 0</span> <span class=\\\"subheader\\\">{{ hb[themeName].bevel }}</span> </div> <div class=\\\"state-details\\\" *ngIf=\\\"!hb[themeName].bevel\\\"> <span class=\\\"header\\\">No Bevel</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value shadow\\\" [ngClass]=\\\"{ 'none': !hb[themeName].shadow }\\\"></div> <div class=\\\"state-details\\\" *ngIf=\\\"hb[themeName].shadow\\\"> <span class=\\\"header\\\">Shadow</span> <span class=\\\"subheader\\\">0 4px 10px 0</span> <span class=\\\"subheader\\\">{{ hb[themeName].shadow }}</span> </div> <div class=\\\"state-details\\\" *ngIf=\\\"!hb[themeName].shadow\\\"> <span class=\\\"header\\\">No Shadow</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value glow\\\" [ngClass]=\\\"{ 'none': !hb[themeName].glow }\\\"></div> <div class=\\\"state-details\\\" *ngIf=\\\"hb[themeName].glow\\\"> <span class=\\\"header\\\">Glow</span> <span class=\\\"subheader\\\">{{ hb[themeName].glow.params }}</span> <span class=\\\"subheader\\\">{{ hb[themeName].glow.color }}</span> </div> <div class=\\\"state-details\\\" *ngIf=\\\"!hb[themeName].glow\\\"> <span class=\\\"header\\\">No Glow</span> </div> </div> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2hlcm8tYnV0dG9ucy9oZXJvLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWw/N2FlYSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSwyUEFBMlAsWUFBWSxpR0FBaUcsYUFBYSxLQUFLLGtCQUFrQixnQ0FBZ0MsZ0JBQWdCLDJNQUEyTSx3QkFBd0IsME5BQTBOLHVCQUF1Qiw4T0FBOE8sOEJBQThCLG9DQUFvQywrQkFBK0Isb0dBQW9HLCtCQUErQixpTEFBaUwsdUJBQXVCLGdOQUFnTixnQ0FBZ0Msc0xBQXNMLHdCQUF3QixnTkFBZ04sOEJBQThCLG9JQUFvSSw2QkFBNkIsb0NBQW9DLDRCQUE0QiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvaGVyby1idXR0b25zL2hlcm8tYnV0dG9ucy5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkhlcm8gQnV0dG9uczwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxkaXYgY2xhc3M9XFxcImV4YW1wbGUtY29udGFpbmVyIGNvbC1zbS02IGNvbC1tZC00IGNvbC14bC0zIGNvbC14eHhsLTJcXFwiICpuZ0Zvcj1cXFwibGV0IGhiIG9mIHNldHRpbmdzXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLXRpdGxlXFxcIj4gPHNwYW4+e3sgaGIudGl0bGUgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItYnRuXFxcIj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuLWRlbW9cXFwiIG5iQnV0dG9uIGhlcm8gc3RhdHVzPVxcXCJ7eyBoYi5zdGF0dXMgfX1cXFwiPnt7IGhiLmJ1dHRvblRpdGxlIH19PC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ7eyBoYi5jb250YWluZXIgfX1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmJvcmRlclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGJvcmRlclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5Cb3JkZXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPnt7IGhiW3RoZW1lTmFtZV0uYm9yZGVyIH19PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCIgKm5nSWY9XFxcImhiW3RoZW1lTmFtZV0uY29sb3JcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBjb2xvclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5Db2xvcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5jb2xvciB9fTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmdyYWRpZW50TGVmdFxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGdyYWRpZW50XFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RhdGUtZGV0YWlsc1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPkxpbmVhciBHcmFkaWVudDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5ncmFkaWVudExlZnQgfX08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPnt7IGhiW3RoZW1lTmFtZV0uZ3JhZGllbnRSaWdodCB9fTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBiZXZlbFxcXCIgW25nQ2xhc3NdPVxcXCJ7ICdub25lJzogIWhiW3RoZW1lTmFtZV0uYmV2ZWwgfVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmJldmVsXFxcIj4gPHNwYW4gY2xhc3M9XFxcImhlYWRlclxcXCI+QmV2ZWw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjAgM3B4IDAgMDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5iZXZlbCB9fTwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiICpuZ0lmPVxcXCIhaGJbdGhlbWVOYW1lXS5iZXZlbFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPk5vIEJldmVsPC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIHNoYWRvd1xcXCIgW25nQ2xhc3NdPVxcXCJ7ICdub25lJzogIWhiW3RoZW1lTmFtZV0uc2hhZG93IH1cXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIiAqbmdJZj1cXFwiaGJbdGhlbWVOYW1lXS5zaGFkb3dcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5TaGFkb3c8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjAgNHB4IDEwcHggMDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5zaGFkb3cgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIiAqbmdJZj1cXFwiIWhiW3RoZW1lTmFtZV0uc2hhZG93XFxcIj4gPHNwYW4gY2xhc3M9XFxcImhlYWRlclxcXCI+Tm8gU2hhZG93PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGdsb3dcXFwiIFtuZ0NsYXNzXT1cXFwieyAnbm9uZSc6ICFoYlt0aGVtZU5hbWVdLmdsb3cgfVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmdsb3dcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5HbG93PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj57eyBoYlt0aGVtZU5hbWVdLmdsb3cucGFyYW1zIH19PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj57eyBoYlt0aGVtZU5hbWVdLmdsb3cuY29sb3IgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIiAqbmdJZj1cXFwiIWhiW3RoZW1lTmFtZV0uZ2xvd1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPk5vIEdsb3c8L3NwYW4+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss":
/*!****************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./hero-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2hlcm8tYnV0dG9ucy9oZXJvLWJ1dHRvbnMuY29tcG9uZW50LnNjc3M/YjA4NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMscVVBQStKOztBQUU1TDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2hlcm8tYnV0dG9ucy9oZXJvLWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vaGVyby1idXR0b25zLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.ts":
/*!**************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_1 = __webpack_require__(/*! @nebular/theme */ \"./node_modules/@nebular/theme/index.js\");\nvar HeroButtonComponent = /** @class */ (function () {\n    function HeroButtonComponent(themeService) {\n        var _this = this;\n        this.themeService = themeService;\n        this.themeName = 'default';\n        this.themeSubscription = this.themeService.getJsTheme().subscribe(function (theme) {\n            _this.themeName = theme.name;\n            _this.init(theme.variables);\n        });\n    }\n    HeroButtonComponent.prototype.init = function (colors) {\n        this.settings = [\n            {\n                status: 'primary',\n                container: 'primary-container',\n                title: 'Primary Button',\n                buttonTitle: 'Primary',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.primary + \", 20deg)\",\n                    gradientRight: colors.primary\n                },\n                corporate: {\n                    color: colors.primary,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (115, 161, 255, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.primary + \", 20deg)\",\n                    gradientRight: colors.primary,\n                    bevel: \"shade(\" + colors.primary + \", 14%)\",\n                    shadow: 'rgba (6, 7, 64, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.primary + \", 10deg)\"\n                    }\n                }\n            },\n            {\n                status: 'warning',\n                container: 'warning-container',\n                title: 'Warning Button',\n                buttonTitle: 'Warning',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.warning + \", 10deg)\",\n                    gradientRight: colors.warning\n                },\n                corporate: {\n                    color: colors.warning,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (256, 163, 107, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.warning + \", 10deg)\",\n                    gradientRight: colors.warning,\n                    bevel: \"shade(\" + colors.warning + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.warning + \", 5deg)\"\n                    }\n                }\n            },\n            {\n                status: 'success',\n                container: 'success-container',\n                title: 'Success Button',\n                buttonTitle: 'Success',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.success + \", 20deg)\",\n                    gradientRight: colors.success\n                },\n                corporate: {\n                    color: colors.success,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (93, 207, 227, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.success + \", 20deg)\",\n                    gradientRight: colors.success,\n                    bevel: \"shade(\" + colors.success + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.success + \", 10deg)\"\n                    }\n                }\n            },\n            {\n                status: 'info',\n                container: 'info-container',\n                title: 'Info Button',\n                buttonTitle: 'Info',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.info + \", -10deg)\",\n                    gradientRight: colors.info\n                },\n                corporate: {\n                    color: colors.info,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (186, 127, 236, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.info + \", -10deg)\",\n                    gradientRight: colors.info,\n                    bevel: \"shade(\" + colors.info + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.info + \", -5deg)\"\n                    }\n                }\n            },\n            {\n                status: 'danger',\n                container: 'danger-container',\n                title: 'Danger Button',\n                buttonTitle: 'Danger',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.danger + \", -20deg)\",\n                    gradientRight: colors.danger\n                },\n                corporate: {\n                    color: colors.danger,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (255, 107, 131, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.danger + \", -20deg)\",\n                    gradientRight: colors.danger,\n                    bevel: \"shade(\" + colors.danger + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.danger + \", -10deg)\"\n                    }\n                }\n            }\n        ];\n    };\n    HeroButtonComponent.prototype.ngOnDestroy = function () {\n        this.themeSubscription.unsubscribe();\n    };\n    var _a;\n    HeroButtonComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-hero-buttons',\n            styles: [__webpack_require__(/*! ./hero-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./hero-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.html\")\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _a : Object])\n    ], HeroButtonComponent);\n    return HeroButtonComponent;\n}());\nexports.HeroButtonComponent = HeroButtonComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/hero-buttons/hero-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.html ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-body> <nb-actions size=\\\"medium\\\" fullWidth> <nb-action> <i class=\\\"nb-pause-outline\\\"></i><span>Pause</span> </nb-action> <nb-action> <i class=\\\"nb-list\\\"></i><span>Logs</span> </nb-action> <nb-action> <i class=\\\"nb-search\\\"></i><span>Search</span> </nb-action> <nb-action> <i class=\\\"nb-gear\\\"></i><span>Setup</span> </nb-action> </nb-actions> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2xhYmVsZWQtYWN0aW9ucy1ncm91cC9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAuY29tcG9uZW50Lmh0bWw/MjExOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvbGFiZWxlZC1hY3Rpb25zLWdyb3VwL2xhYmVsZWQtYWN0aW9ucy1ncm91cC5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bmItY2FyZD4gPG5iLWNhcmQtYm9keT4gPG5iLWFjdGlvbnMgc2l6ZT1cXFwibWVkaXVtXFxcIiBmdWxsV2lkdGg+IDxuYi1hY3Rpb24+IDxpIGNsYXNzPVxcXCJuYi1wYXVzZS1vdXRsaW5lXFxcIj48L2k+PHNwYW4+UGF1c2U8L3NwYW4+IDwvbmItYWN0aW9uPiA8bmItYWN0aW9uPiA8aSBjbGFzcz1cXFwibmItbGlzdFxcXCI+PC9pPjxzcGFuPkxvZ3M8L3NwYW4+IDwvbmItYWN0aW9uPiA8bmItYWN0aW9uPiA8aSBjbGFzcz1cXFwibmItc2VhcmNoXFxcIj48L2k+PHNwYW4+U2VhcmNoPC9zcGFuPiA8L25iLWFjdGlvbj4gPG5iLWFjdGlvbj4gPGkgY2xhc3M9XFxcIm5iLWdlYXJcXFwiPjwvaT48c3Bhbj5TZXR1cDwvc3Bhbj4gPC9uYi1hY3Rpb24+IDwvbmItYWN0aW9ucz4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss":
/*!**********************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./labeled-actions-group.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2xhYmVsZWQtYWN0aW9ucy1ncm91cC9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAuY29tcG9uZW50LnNjc3M/M2Y4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsZ1dBQXdLOztBQUVyTTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2xhYmVsZWQtYWN0aW9ucy1ncm91cC9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vbGFiZWxlZC1hY3Rpb25zLWdyb3VwLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar LabeledActionsGroupComponent = /** @class */ (function () {\n    function LabeledActionsGroupComponent() {\n    }\n    LabeledActionsGroupComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-labeled-actions-group',\n            styles: [__webpack_require__(/*! ./labeled-actions-group.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.scss\")],\n            template: __webpack_require__(/*! ./labeled-actions-group.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.html\")\n        })\n    ], LabeledActionsGroupComponent);\n    return LabeledActionsGroupComponent;\n}());\nexports.LabeledActionsGroupComponent = LabeledActionsGroupComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL2xhYmVsZWQtYWN0aW9ucy1ncm91cC9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAuY29tcG9uZW50LnRzPzNlNjUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBQUE7SUFBMkMsQ0FBQztJQUEvQiw0QkFBNEI7UUFMeEMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSwyQkFBMkI7WUFDckMsU0FBUyxtQkFBRywrSkFBeUM7WUFDckQsNkJBQWEsK0pBQXdDO1NBQ3hELENBQUM7T0FDVyw0QkFBNEIsQ0FBRztJQUFELG1DQUFDO0NBQUE7QUFBL0Isb0VBQTRCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAvbGFiZWxlZC1hY3Rpb25zLWdyb3VwLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1sYWJlbGVkLWFjdGlvbnMtZ3JvdXAnLFxuICAgIHN0eWxlVXJsczogWycuL2xhYmVsZWQtYWN0aW9ucy1ncm91cC5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9sYWJlbGVkLWFjdGlvbnMtZ3JvdXAuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIExhYmVsZWRBY3Rpb25zR3JvdXBDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/labeled-actions-group/labeled-actions-group.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header> <span>Default Buttons</span> </nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"example-container col-md-4\\\" *ngFor=\\\"let b of buttons\\\"> <div class=\\\"container-title\\\"> <span>{{ b.containerTitle }}</span> </div> <div class=\\\"container-btn\\\"> <button nbButton outline status=\\\"{{ b.status }}\\\" class=\\\"btn-demo\\\"> {{ b.title }} </button> </div> <div class=\\\"{{ b.container }}\\\"> <div class=\\\"state-container\\\"> <div class=\\\"state-value original\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Default</span> <span class=\\\"subheader\\\">{{ b.default }}</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value hover\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Hover</span> <span class=\\\"subheader\\\">14% white</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value active\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Active</span> <span class=\\\"subheader\\\">14% black</span> </div> </div> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL291dGxpbmUtYnV0dG9ucy9vdXRsaW5lLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWw/NTQyZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSw4T0FBOE8sb0JBQW9CLGlGQUFpRixZQUFZLHlCQUF5QixXQUFXLGlDQUFpQyxlQUFlLCtLQUErSyxhQUFhIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9vdXRsaW5lLWJ1dHRvbnMvb3V0bGluZS1idXR0b25zLmNvbXBvbmVudC5odG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+IDxzcGFuPkRlZmF1bHQgQnV0dG9uczwvc3Bhbj4gPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiZXhhbXBsZS1jb250YWluZXIgY29sLW1kLTRcXFwiICpuZ0Zvcj1cXFwibGV0IGIgb2YgYnV0dG9uc1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci10aXRsZVxcXCI+IDxzcGFuPnt7IGIuY29udGFpbmVyVGl0bGUgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItYnRuXFxcIj4gPGJ1dHRvbiBuYkJ1dHRvbiBvdXRsaW5lIHN0YXR1cz1cXFwie3sgYi5zdGF0dXMgfX1cXFwiIGNsYXNzPVxcXCJidG4tZGVtb1xcXCI+IHt7IGIudGl0bGUgfX0gPC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ7eyBiLmNvbnRhaW5lciB9fVxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIG9yaWdpbmFsXFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RhdGUtZGV0YWlsc1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPkRlZmF1bHQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPnt7IGIuZGVmYXVsdCB9fTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBob3ZlclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5Ib3Zlcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+MTQlIHdoaXRlPC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGFjdGl2ZVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5BY3RpdmU8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjE0JSBibGFjazwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./outline-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL291dGxpbmUtYnV0dG9ucy9vdXRsaW5lLWJ1dHRvbnMuY29tcG9uZW50LnNjc3M/MzA4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsOFVBQWtLOztBQUUvTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL291dGxpbmUtYnV0dG9ucy9vdXRsaW5lLWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vb3V0bGluZS1idXR0b25zLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar OutlineButtonsComponent = /** @class */ (function () {\n    function OutlineButtonsComponent() {\n        this.buttons = [\n            {\n                status: 'primary',\n                container: 'primary-container outline',\n                containerTitle: 'Primary Button',\n                title: 'Primary',\n                default: '#7659ff'\n            },\n            {\n                status: 'warning',\n                container: 'warning-container outline',\n                containerTitle: 'Warning Button',\n                title: 'Warning',\n                default: '#ffcb17'\n            },\n            {\n                status: 'success',\n                container: 'success-container outline',\n                containerTitle: 'Success Button',\n                title: 'Success',\n                default: '#00d977'\n            },\n            {\n                status: 'info',\n                container: 'info-container',\n                containerTitle: 'Info Button',\n                title: 'Info',\n                default: '#0088ff'\n            },\n            {\n                status: 'danger',\n                container: 'danger-container outline',\n                containerTitle: 'Danger Button',\n                title: 'Danger',\n                default: '#ff386a'\n            }\n        ];\n    }\n    OutlineButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-outline-buttons',\n            styles: [__webpack_require__(/*! ./outline-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./outline-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.html\")\n        })\n    ], OutlineButtonsComponent);\n    return OutlineButtonsComponent;\n}());\nexports.OutlineButtonsComponent = OutlineButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL291dGxpbmUtYnV0dG9ucy9vdXRsaW5lLWJ1dHRvbnMuY29tcG9uZW50LnRzPzJjNjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBTEE7UUFNSSxZQUFPLEdBQUc7WUFDTjtnQkFDSSxNQUFNLEVBQUUsU0FBUztnQkFDakIsU0FBUyxFQUFFLDJCQUEyQjtnQkFDdEMsY0FBYyxFQUFFLGdCQUFnQjtnQkFDaEMsS0FBSyxFQUFFLFNBQVM7Z0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2FBQ3JCO1lBQ0Q7Z0JBQ0ksTUFBTSxFQUFFLFNBQVM7Z0JBQ2pCLFNBQVMsRUFBRSwyQkFBMkI7Z0JBQ3RDLGNBQWMsRUFBRSxnQkFBZ0I7Z0JBQ2hDLEtBQUssRUFBRSxTQUFTO2dCQUNoQixPQUFPLEVBQUUsU0FBUzthQUNyQjtZQUNEO2dCQUNJLE1BQU0sRUFBRSxTQUFTO2dCQUNqQixTQUFTLEVBQUUsMkJBQTJCO2dCQUN0QyxjQUFjLEVBQUUsZ0JBQWdCO2dCQUNoQyxLQUFLLEVBQUUsU0FBUztnQkFDaEIsT0FBTyxFQUFFLFNBQVM7YUFDckI7WUFDRDtnQkFDSSxNQUFNLEVBQUUsTUFBTTtnQkFDZCxTQUFTLEVBQUUsZ0JBQWdCO2dCQUMzQixjQUFjLEVBQUUsYUFBYTtnQkFDN0IsS0FBSyxFQUFFLE1BQU07Z0JBQ2IsT0FBTyxFQUFFLFNBQVM7YUFDckI7WUFDRDtnQkFDSSxNQUFNLEVBQUUsUUFBUTtnQkFDaEIsU0FBUyxFQUFFLDBCQUEwQjtnQkFDckMsY0FBYyxFQUFFLGVBQWU7Z0JBQy9CLEtBQUssRUFBRSxRQUFRO2dCQUNmLE9BQU8sRUFBRSxTQUFTO2FBQ3JCO1NBQ0osQ0FBQztJQUNOLENBQUM7SUF0Q1ksdUJBQXVCO1FBTG5DLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFNBQVMsbUJBQUcsNklBQW1DO1lBQy9DLDZCQUFhLDZJQUFrQztTQUNsRCxDQUFDO09BQ1csdUJBQXVCLENBc0NuQztJQUFELDhCQUFDO0NBQUE7QUF0Q1ksMERBQXVCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9vdXRsaW5lLWJ1dHRvbnMvb3V0bGluZS1idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1vdXRsaW5lLWJ1dHRvbnMnLFxuICAgIHN0eWxlVXJsczogWycuL291dGxpbmUtYnV0dG9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9vdXRsaW5lLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIE91dGxpbmVCdXR0b25zQ29tcG9uZW50IHtcbiAgICBidXR0b25zID0gW1xuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdwcmltYXJ5JyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ3ByaW1hcnktY29udGFpbmVyIG91dGxpbmUnLFxuICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdQcmltYXJ5IEJ1dHRvbicsXG4gICAgICAgICAgICB0aXRsZTogJ1ByaW1hcnknLFxuICAgICAgICAgICAgZGVmYXVsdDogJyM3NjU5ZmYnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHN0YXR1czogJ3dhcm5pbmcnLFxuICAgICAgICAgICAgY29udGFpbmVyOiAnd2FybmluZy1jb250YWluZXIgb3V0bGluZScsXG4gICAgICAgICAgICBjb250YWluZXJUaXRsZTogJ1dhcm5pbmcgQnV0dG9uJyxcbiAgICAgICAgICAgIHRpdGxlOiAnV2FybmluZycsXG4gICAgICAgICAgICBkZWZhdWx0OiAnI2ZmY2IxNydcbiAgICAgICAgfSxcbiAgICAgICAge1xuICAgICAgICAgICAgc3RhdHVzOiAnc3VjY2VzcycsXG4gICAgICAgICAgICBjb250YWluZXI6ICdzdWNjZXNzLWNvbnRhaW5lciBvdXRsaW5lJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnU3VjY2VzcyBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcjMDBkOTc3J1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdpbmZvJyxcbiAgICAgICAgICAgIGNvbnRhaW5lcjogJ2luZm8tY29udGFpbmVyJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnSW5mbyBCdXR0b24nLFxuICAgICAgICAgICAgdGl0bGU6ICdJbmZvJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6ICcjMDA4OGZmJ1xuICAgICAgICB9LFxuICAgICAgICB7XG4gICAgICAgICAgICBzdGF0dXM6ICdkYW5nZXInLFxuICAgICAgICAgICAgY29udGFpbmVyOiAnZGFuZ2VyLWNvbnRhaW5lciBvdXRsaW5lJyxcbiAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnRGFuZ2VyIEJ1dHRvbicsXG4gICAgICAgICAgICB0aXRsZTogJ0RhbmdlcicsXG4gICAgICAgICAgICBkZWZhdWx0OiAnI2ZmMzg2YSdcbiAgICAgICAgfVxuICAgIF07XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/outline-buttons/outline-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.html":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.html ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Shapes</nb-card-header> <nb-card-body> <div class=\\\"shape-container\\\"> <div class=\\\"container-title\\\"> <span>Rectangle Button</span> </div> <div class=\\\"subheader\\\"> <span>Border radius:</span> <span>4px</span> </div> <div> <button nbButton shape=\\\"rectangle\\\" status=\\\"success\\\" class=\\\"btn-demo\\\">Rectangle</button> </div> </div> <div class=\\\"shape-container\\\"> <div class=\\\"container-title\\\"> <span>Semi-round Button</span> </div> <div class=\\\"subheader\\\"> <span>Border radius:</span> <span>12px</span> </div> <div> <button nbButton shape=\\\"semi-round\\\" status=\\\"success\\\" class=\\\"btn-demo\\\">Semi-round</button> </div> </div> <div class=\\\"shape-container\\\"> <div class=\\\"container-title\\\"> <span>Rounded Button</span> </div> <div class=\\\"subheader\\\"> <span>Border radius:</span> <span>round</span> </div> <div> <button nbButton shape=\\\"round\\\" status=\\\"success\\\" class=\\\"btn-demo\\\">Round</button> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NoYXBlLWJ1dHRvbnMvc2hhcGUtYnV0dG9ucy5jb21wb25lbnQuaHRtbD9jNTU4Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9zaGFwZS1idXR0b25zL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPG5iLWNhcmQ+IDxuYi1jYXJkLWhlYWRlcj5CdXR0b24gU2hhcGVzPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwic2hhcGUtY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLXRpdGxlXFxcIj4gPHNwYW4+UmVjdGFuZ2xlIEJ1dHRvbjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+IDxzcGFuPkJvcmRlciByYWRpdXM6PC9zcGFuPiA8c3Bhbj40cHg8L3NwYW4+IDwvZGl2PiA8ZGl2PiA8YnV0dG9uIG5iQnV0dG9uIHNoYXBlPVxcXCJyZWN0YW5nbGVcXFwiIHN0YXR1cz1cXFwic3VjY2Vzc1xcXCIgY2xhc3M9XFxcImJ0bi1kZW1vXFxcIj5SZWN0YW5nbGU8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzaGFwZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5TZW1pLXJvdW5kIEJ1dHRvbjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+IDxzcGFuPkJvcmRlciByYWRpdXM6PC9zcGFuPiA8c3Bhbj4xMnB4PC9zcGFuPiA8L2Rpdj4gPGRpdj4gPGJ1dHRvbiBuYkJ1dHRvbiBzaGFwZT1cXFwic2VtaS1yb3VuZFxcXCIgc3RhdHVzPVxcXCJzdWNjZXNzXFxcIiBjbGFzcz1cXFwiYnRuLWRlbW9cXFwiPlNlbWktcm91bmQ8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzaGFwZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5Sb3VuZGVkIEJ1dHRvbjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+IDxzcGFuPkJvcmRlciByYWRpdXM6PC9zcGFuPiA8c3Bhbj5yb3VuZDwvc3Bhbj4gPC9kaXY+IDxkaXY+IDxidXR0b24gbmJCdXR0b24gc2hhcGU9XFxcInJvdW5kXFxcIiBzdGF0dXM9XFxcInN1Y2Nlc3NcXFwiIGNsYXNzPVxcXCJidG4tZGVtb1xcXCI+Um91bmQ8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./shape-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NoYXBlLWJ1dHRvbnMvc2hhcGUtYnV0dG9ucy5jb21wb25lbnQuc2Nzcz9jMmY3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyx3VUFBZ0s7O0FBRTdMO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvc2hhcGUtYnV0dG9ucy9zaGFwZS1idXR0b25zLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.ts":
/*!****************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.ts ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ShapeButtonsComponent = /** @class */ (function () {\n    function ShapeButtonsComponent() {\n    }\n    ShapeButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-shape-buttons',\n            styles: [__webpack_require__(/*! ./shape-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./shape-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.html\")\n        })\n    ], ShapeButtonsComponent);\n    return ShapeButtonsComponent;\n}());\nexports.ShapeButtonsComponent = ShapeButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NoYXBlLWJ1dHRvbnMvc2hhcGUtYnV0dG9ucy5jb21wb25lbnQudHM/NzJkNyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFPMUM7SUFBQTtJQUFvQyxDQUFDO0lBQXhCLHFCQUFxQjtRQUxqQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLG1CQUFtQjtZQUM3QixTQUFTLG1CQUFHLHVJQUFpQztZQUM3Qyw2QkFBYSx1SUFBZ0M7U0FDaEQsQ0FBQztPQUNXLHFCQUFxQixDQUFHO0lBQUQsNEJBQUM7Q0FBQTtBQUF4QixzREFBcUIiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NoYXBlLWJ1dHRvbnMvc2hhcGUtYnV0dG9ucy5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtc2hhcGUtYnV0dG9ucycsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2hhcGUtYnV0dG9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zaGFwZS1idXR0b25zLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBTaGFwZUJ1dHRvbnNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/shape-buttons/shape-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.html":
/*!****************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.html ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Sizes</nb-card-header> <nb-card-body> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>Large Button</span> </div> <div class=\\\"subheader\\\"> <span>0.875rem 1.75rem</span> </div> <div> <button nbButton size=\\\"large\\\">Large Button</button> </div> </div> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>Medium Button</span> </div> <div class=\\\"subheader\\\"> <span>0.75rem 1.5rem</span> </div> <div> <button nbButton size=\\\"medium\\\">Medium Button</button> </div> </div> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>Small Button</span> </div> <div class=\\\"subheader\\\"> <span>0.675rem 1.5rem</span> </div> <div> <button nbButton size=\\\"small\\\">Small Button</button> </div> </div> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>X-Small Button</span> </div> <div class=\\\"subheader\\\"> <span>0.5rem 1.25rem</span> </div> <div> <button nbButton size=\\\"xsmall\\\">X-Small Button</button> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NpemUtYnV0dG9ucy9zaXplLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWw/NGNmOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2J1dHRvbnMvc2l6ZS1idXR0b25zL3NpemUtYnV0dG9ucy5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkJ1dHRvbiBTaXplczwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxkaXYgY2xhc3M9XFxcInNpemUtY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLXRpdGxlXFxcIj4gPHNwYW4+TGFyZ2UgQnV0dG9uPC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj4gPHNwYW4+MC44NzVyZW0gMS43NXJlbTwvc3Bhbj4gPC9kaXY+IDxkaXY+IDxidXR0b24gbmJCdXR0b24gc2l6ZT1cXFwibGFyZ2VcXFwiPkxhcmdlIEJ1dHRvbjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNpemUtY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLXRpdGxlXFxcIj4gPHNwYW4+TWVkaXVtIEJ1dHRvbjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+IDxzcGFuPjAuNzVyZW0gMS41cmVtPC9zcGFuPiA8L2Rpdj4gPGRpdj4gPGJ1dHRvbiBuYkJ1dHRvbiBzaXplPVxcXCJtZWRpdW1cXFwiPk1lZGl1bSBCdXR0b248L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzaXplLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci10aXRsZVxcXCI+IDxzcGFuPlNtYWxsIEJ1dHRvbjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+IDxzcGFuPjAuNjc1cmVtIDEuNXJlbTwvc3Bhbj4gPC9kaXY+IDxkaXY+IDxidXR0b24gbmJCdXR0b24gc2l6ZT1cXFwic21hbGxcXFwiPlNtYWxsIEJ1dHRvbjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInNpemUtY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLXRpdGxlXFxcIj4gPHNwYW4+WC1TbWFsbCBCdXR0b248L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPiA8c3Bhbj4wLjVyZW0gMS4yNXJlbTwvc3Bhbj4gPC9kaXY+IDxkaXY+IDxidXR0b24gbmJCdXR0b24gc2l6ZT1cXFwieHNtYWxsXFxcIj5YLVNtYWxsIEJ1dHRvbjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvbmItY2FyZC1ib2R5PiA8L25iLWNhcmQ+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss":
/*!****************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss ***!
  \****************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./size-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NpemUtYnV0dG9ucy9zaXplLWJ1dHRvbnMuY29tcG9uZW50LnNjc3M/YzBiMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMscVVBQStKOztBQUU1TDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NpemUtYnV0dG9ucy9zaXplLWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc2l6ZS1idXR0b25zLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.ts":
/*!**************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.ts ***!
  \**************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar SizeButtonsComponent = /** @class */ (function () {\n    function SizeButtonsComponent() {\n    }\n    SizeButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-size-buttons',\n            styles: [__webpack_require__(/*! ./size-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./size-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.html\")\n        })\n    ], SizeButtonsComponent);\n    return SizeButtonsComponent;\n}());\nexports.SizeButtonsComponent = SizeButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9idXR0b25zL3NpemUtYnV0dG9ucy9zaXplLWJ1dHRvbnMuY29tcG9uZW50LnRzP2Q2NDYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBQUE7SUFBbUMsQ0FBQztJQUF2QixvQkFBb0I7UUFMaEMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxrQkFBa0I7WUFDNUIsU0FBUyxtQkFBRyxvSUFBZ0M7WUFDNUMsNkJBQWEsb0lBQStCO1NBQy9DLENBQUM7T0FDVyxvQkFBb0IsQ0FBRztJQUFELDJCQUFDO0NBQUE7QUFBdkIsb0RBQW9CIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvYnV0dG9ucy9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1zaXplLWJ1dHRvbnMnLFxuICAgIHN0eWxlVXJsczogWycuL3NpemUtYnV0dG9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9zaXplLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNpemVCdXR0b25zQ29tcG9uZW50IHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/buttons/size-buttons/size-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.html":
/*!****************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.html ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-md-12 col-lg-4 col-xxxl-4\\\"> <nb-card> <nb-card-header>Common Datepicker</nb-card-header> <nb-card-body> <input nbInput placeholder=\\\"Form Picker\\\" [nbDatepicker]=\\\"formpicker\\\"> <nb-datepicker #formpicker></nb-datepicker> </nb-card-body> </nb-card> </div> <div class=\\\"col-md-12 col-lg-4 col-xxxl-4\\\"> <nb-card> <nb-card-header>Datepicker With Rang</nb-card-header> <nb-card-body> <input nbInput placeholder=\\\"Range Picker\\\" [nbDatepicker]=\\\"rangepicker\\\"> <nb-rangepicker #rangepicker></nb-rangepicker> </nb-card-body> </nb-card> </div> <div class=\\\"col-md-12 col-lg-4 col-xxxl-4\\\"> <nb-card> <nb-card-header>Datepicker With Disabled Min Max Values</nb-card-header> <nb-card-body> <input nbInput placeholder=\\\"Min Max Picker\\\" [nbDatepicker]=\\\"picker\\\"> <nb-datepicker #picker [min]=\\\"min\\\" [max]=\\\"max\\\"></nb-datepicker> </nb-card-body> </nb-card> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9kYXRlcGlja2VyL2RhdGVwaWNrZXIuY29tcG9uZW50Lmh0bWw/ZmUwZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2RhdGVwaWNrZXIvZGF0ZXBpY2tlci5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTIgY29sLWxnLTQgY29sLXh4eGwtNFxcXCI+IDxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+Q29tbW9uIERhdGVwaWNrZXI8L25iLWNhcmQtaGVhZGVyPiA8bmItY2FyZC1ib2R5PiA8aW5wdXQgbmJJbnB1dCBwbGFjZWhvbGRlcj1cXFwiRm9ybSBQaWNrZXJcXFwiIFtuYkRhdGVwaWNrZXJdPVxcXCJmb3JtcGlja2VyXFxcIj4gPG5iLWRhdGVwaWNrZXIgI2Zvcm1waWNrZXI+PC9uYi1kYXRlcGlja2VyPiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIGNvbC1sZy00IGNvbC14eHhsLTRcXFwiPiA8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkRhdGVwaWNrZXIgV2l0aCBSYW5nPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGlucHV0IG5iSW5wdXQgcGxhY2Vob2xkZXI9XFxcIlJhbmdlIFBpY2tlclxcXCIgW25iRGF0ZXBpY2tlcl09XFxcInJhbmdlcGlja2VyXFxcIj4gPG5iLXJhbmdlcGlja2VyICNyYW5nZXBpY2tlcj48L25iLXJhbmdlcGlja2VyPiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyIGNvbC1sZy00IGNvbC14eHhsLTRcXFwiPiA8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkRhdGVwaWNrZXIgV2l0aCBEaXNhYmxlZCBNaW4gTWF4IFZhbHVlczwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxpbnB1dCBuYklucHV0IHBsYWNlaG9sZGVyPVxcXCJNaW4gTWF4IFBpY2tlclxcXCIgW25iRGF0ZXBpY2tlcl09XFxcInBpY2tlclxcXCI+IDxuYi1kYXRlcGlja2VyICNwaWNrZXIgW21pbl09XFxcIm1pblxcXCIgW21heF09XFxcIm1heFxcXCI+PC9uYi1kYXRlcGlja2VyPiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiA8L2Rpdj4gPC9kaXY+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss":
/*!****************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./datepicker.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9kYXRlcGlja2VyL2RhdGVwaWNrZXIuY29tcG9uZW50LnNjc3M/N2M5NSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsaVRBQXVKOztBQUVwTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9kYXRlcGlja2VyL2RhdGVwaWNrZXIuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZGF0ZXBpY2tlci5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.ts":
/*!**************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.ts ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_1 = __webpack_require__(/*! @nebular/theme */ \"./node_modules/@nebular/theme/index.js\");\nvar DatepickerComponent = /** @class */ (function () {\n    function DatepickerComponent(dateService) {\n        this.dateService = dateService;\n        this.min = this.dateService.addDay(this.dateService.today(), -5);\n        this.max = this.dateService.addDay(this.dateService.today(), 5);\n    }\n    var _a;\n    DatepickerComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-datepicker',\n            template: __webpack_require__(/*! ./datepicker.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.html\"),\n            styles: [__webpack_require__(/*! ./datepicker.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.scss\")]\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbDateService !== \"undefined\" && theme_1.NbDateService) === \"function\" ? _a : Object])\n    ], DatepickerComponent);\n    return DatepickerComponent;\n}());\nexports.DatepickerComponent = DatepickerComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9kYXRlcGlja2VyL2RhdGVwaWNrZXIuY29tcG9uZW50LnRzPzZjODIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBQzFDLGtHQUErQztBQU8vQztJQUlJLDZCQUFzQixXQUFnQztRQUFoQyxnQkFBVyxHQUFYLFdBQVcsQ0FBcUI7UUFDbEQsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDLENBQUM7UUFDakUsSUFBSSxDQUFDLEdBQUcsR0FBRyxJQUFJLENBQUMsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQUMsV0FBVyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxDQUFDO0lBQ3BFLENBQUM7O0lBUFEsbUJBQW1CO1FBTC9CLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZ0JBQWdCO1lBQzFCLDZCQUFhLHNIQUEyQjtZQUN4QyxTQUFTLG1CQUFHLHNIQUE0QjtTQUMzQyxDQUFDO3FFQUtxQyxxQkFBYSxvQkFBYixxQkFBYTtPQUp2QyxtQkFBbUIsQ0FRL0I7SUFBRCwwQkFBQztDQUFBO0FBUlksa0RBQW1CIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvZGF0ZXBpY2tlci9kYXRlcGlja2VyLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmJEYXRlU2VydmljZSB9IGZyb20gJ0BuZWJ1bGFyL3RoZW1lJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtZGF0ZXBpY2tlcicsXG4gICAgdGVtcGxhdGVVcmw6ICdkYXRlcGlja2VyLmNvbXBvbmVudC5odG1sJyxcbiAgICBzdHlsZVVybHM6IFsnZGF0ZXBpY2tlci5jb21wb25lbnQuc2NzcyddXG59KVxuZXhwb3J0IGNsYXNzIERhdGVwaWNrZXJDb21wb25lbnQge1xuICAgIG1pbjogRGF0ZTtcbiAgICBtYXg6IERhdGU7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcm90ZWN0ZWQgZGF0ZVNlcnZpY2U6IE5iRGF0ZVNlcnZpY2U8RGF0ZT4pIHtcbiAgICAgICAgdGhpcy5taW4gPSB0aGlzLmRhdGVTZXJ2aWNlLmFkZERheSh0aGlzLmRhdGVTZXJ2aWNlLnRvZGF5KCksIC01KTtcbiAgICAgICAgdGhpcy5tYXggPSB0aGlzLmRhdGVTZXJ2aWNlLmFkZERheSh0aGlzLmRhdGVTZXJ2aWNlLnRvZGF5KCksIDUpO1xuICAgIH1cbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.html":
/*!******************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.html ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-lg-6\\\"> <nb-card> <nb-card-header>Default Inputs</nb-card-header> <nb-card-body> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth placeholder=\\\"Project\\\"> </div> <div class=\\\"row full-name-inputs\\\"> <div class=\\\"col-sm-6 input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth placeholder=\\\"Nick\\\"> </div> <div class=\\\"col-sm-6 input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth placeholder=\\\"Last Name\\\"> </div> </div> <div class=\\\"input-group\\\"> <input type=\\\"password\\\" nbInput fullWidth placeholder=\\\"Password\\\"> </div> <div class=\\\"input-group has-person-icon\\\"> <input type=\\\"text\\\" placeholder=\\\"With Icon\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth shape=\\\"rectangle\\\" placeholder=\\\"Rectangle border\\\"> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth shape=\\\"semi-round\\\" placeholder=\\\"Semi-round border\\\"> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth shape=\\\"round\\\" placeholder=\\\"Rounded border\\\"> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" nbInput fullWidth placeholder=\\\"Disabled input\\\" disabled=\\\"disabled\\\"/> </div> <div class=\\\"input-group\\\"> <textarea rows=\\\"5\\\" nbInput fullWidth shape=\\\"round\\\" placeholder=\\\"Text Area\\\"></textarea> </div> <div class=\\\"input-group input-group-sm\\\"> <input type=\\\"text\\\" nbInput fullWidth fieldSize=\\\"small\\\" placeholder=\\\"Small Input\\\"> </div> <div class=\\\"input-group input-group-lg\\\"> <input type=\\\"text\\\" nbInput fullWidth fieldSize=\\\"medium\\\" placeholder=\\\"Medium Input\\\"> </div> <div class=\\\"input-group input-group-lg\\\"> <input type=\\\"text\\\" nbInput fullWidth fieldSize=\\\"large\\\" placeholder=\\\"Large Input\\\"> </div> </nb-card-body> </nb-card> </div> <div class=\\\"col-lg-6\\\"> <nb-card> <nb-card-header>Validation States</nb-card-header> <nb-card-body> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" nbInput fullWidth status=\\\"info\\\" placeholder=\\\"Input with Info\\\"> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" nbInput fullWidth status=\\\"success\\\" placeholder=\\\"Input with Warning\\\"> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" nbInput fullWidth status=\\\"warning\\\" placeholder=\\\"Input with Danger\\\"> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" nbInput fullWidth status=\\\"danger\\\" placeholder=\\\"Input with Danger\\\"> </div> <div class=\\\"form-group validation-checkboxes row\\\"> <nb-checkbox status=\\\"success\\\" class=\\\"col-sm-4\\\">Checkbox with Success</nb-checkbox> <nb-checkbox status=\\\"warning\\\" class=\\\"col-sm-4\\\">Checkbox with Warning</nb-checkbox> <nb-checkbox status=\\\"danger\\\" class=\\\"col-sm-4\\\">Checkbox with Danger</nb-checkbox> </div> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Checkboxes & Radios</nb-card-header> <nb-card-body> <div class=\\\"row demo-checkboxes-radio\\\"> <div class=\\\"demo-checkboxes col-sm-4\\\"> <nb-checkbox>Checkbox 1</nb-checkbox> <nb-checkbox [value]=\\\"true\\\">Checkbox 2</nb-checkbox> </div> <div class=\\\"demo-radio col-sm-4\\\"> <nb-radio-group [(value)]=\\\"radioGroupValue\\\"> <nb-radio [value]=\\\"'This is value 1'\\\"> Radio 1 </nb-radio> <nb-radio [value]=\\\"'This is value 2'\\\"> Radio 2 </nb-radio> <nb-radio [value]=\\\"'This is value 3'\\\"> Radio 3 </nb-radio> </nb-radio-group> </div> <div class=\\\"demo-disabled-checkbox-radio col-sm-4\\\"> <nb-checkbox disabled=\\\"disabled\\\">Disabled Checkbox</nb-checkbox> <nb-radio-group disabled=\\\"disabled\\\"> <nb-radio [value]=\\\"'Disabled Value'\\\"> Disabled Radio </nb-radio> </nb-radio-group> </div> </div> </nb-card-body> </nb-card> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3JtLWlucHV0cy9mb3JtLWlucHV0cy5jb21wb25lbnQuaHRtbD9kNzgwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvZm9ybS1pbnB1dHMvZm9ybS1pbnB1dHMuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiY29sLWxnLTZcXFwiPiA8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkRlZmF1bHQgSW5wdXRzPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXBcXFwiPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmJJbnB1dCBmdWxsV2lkdGggcGxhY2Vob2xkZXI9XFxcIlByb2plY3RcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwicm93IGZ1bGwtbmFtZS1pbnB1dHNcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNiBpbnB1dC1ncm91cFxcXCI+IDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYklucHV0IGZ1bGxXaWR0aCBwbGFjZWhvbGRlcj1cXFwiTmlja1xcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtc20tNiBpbnB1dC1ncm91cFxcXCI+IDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYklucHV0IGZ1bGxXaWR0aCBwbGFjZWhvbGRlcj1cXFwiTGFzdCBOYW1lXFxcIj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+IDxpbnB1dCB0eXBlPVxcXCJwYXNzd29yZFxcXCIgbmJJbnB1dCBmdWxsV2lkdGggcGxhY2Vob2xkZXI9XFxcIlBhc3N3b3JkXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwIGhhcy1wZXJzb24taWNvblxcXCI+IDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBwbGFjZWhvbGRlcj1cXFwiV2l0aCBJY29uXFxcIiBjbGFzcz1cXFwiZm9ybS1jb250cm9sXFxcIi8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+IDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYklucHV0IGZ1bGxXaWR0aCBzaGFwZT1cXFwicmVjdGFuZ2xlXFxcIiBwbGFjZWhvbGRlcj1cXFwiUmVjdGFuZ2xlIGJvcmRlclxcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+IDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYklucHV0IGZ1bGxXaWR0aCBzaGFwZT1cXFwic2VtaS1yb3VuZFxcXCIgcGxhY2Vob2xkZXI9XFxcIlNlbWktcm91bmQgYm9yZGVyXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5iSW5wdXQgZnVsbFdpZHRoIHNoYXBlPVxcXCJyb3VuZFxcXCIgcGxhY2Vob2xkZXI9XFxcIlJvdW5kZWQgYm9yZGVyXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImlucHV0LWdyb3VwXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5iSW5wdXQgZnVsbFdpZHRoIHBsYWNlaG9sZGVyPVxcXCJEaXNhYmxlZCBpbnB1dFxcXCIgZGlzYWJsZWQ9XFxcImRpc2FibGVkXFxcIi8+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cFxcXCI+IDx0ZXh0YXJlYSByb3dzPVxcXCI1XFxcIiBuYklucHV0IGZ1bGxXaWR0aCBzaGFwZT1cXFwicm91bmRcXFwiIHBsYWNlaG9sZGVyPVxcXCJUZXh0IEFyZWFcXFwiPjwvdGV4dGFyZWE+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpbnB1dC1ncm91cCBpbnB1dC1ncm91cC1zbVxcXCI+IDxpbnB1dCB0eXBlPVxcXCJ0ZXh0XFxcIiBuYklucHV0IGZ1bGxXaWR0aCBmaWVsZFNpemU9XFxcInNtYWxsXFxcIiBwbGFjZWhvbGRlcj1cXFwiU21hbGwgSW5wdXRcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtbGdcXFwiPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmJJbnB1dCBmdWxsV2lkdGggZmllbGRTaXplPVxcXCJtZWRpdW1cXFwiIHBsYWNlaG9sZGVyPVxcXCJNZWRpdW0gSW5wdXRcXFwiPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiaW5wdXQtZ3JvdXAgaW5wdXQtZ3JvdXAtbGdcXFwiPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmJJbnB1dCBmdWxsV2lkdGggZmllbGRTaXplPVxcXCJsYXJnZVxcXCIgcGxhY2Vob2xkZXI9XFxcIkxhcmdlIElucHV0XFxcIj4gPC9kaXY+IDwvbmItY2FyZC1ib2R5PiA8L25iLWNhcmQ+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctNlxcXCI+IDxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+VmFsaWRhdGlvbiBTdGF0ZXM8L25iLWNhcmQtaGVhZGVyPiA8bmItY2FyZC1ib2R5PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5iSW5wdXQgZnVsbFdpZHRoIHN0YXR1cz1cXFwiaW5mb1xcXCIgcGxhY2Vob2xkZXI9XFxcIklucHV0IHdpdGggSW5mb1xcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5iSW5wdXQgZnVsbFdpZHRoIHN0YXR1cz1cXFwic3VjY2Vzc1xcXCIgcGxhY2Vob2xkZXI9XFxcIklucHV0IHdpdGggV2FybmluZ1xcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwXFxcIj4gPGlucHV0IHR5cGU9XFxcInRleHRcXFwiIG5iSW5wdXQgZnVsbFdpZHRoIHN0YXR1cz1cXFwid2FybmluZ1xcXCIgcGxhY2Vob2xkZXI9XFxcIklucHV0IHdpdGggRGFuZ2VyXFxcIj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImZvcm0tZ3JvdXBcXFwiPiA8aW5wdXQgdHlwZT1cXFwidGV4dFxcXCIgbmJJbnB1dCBmdWxsV2lkdGggc3RhdHVzPVxcXCJkYW5nZXJcXFwiIHBsYWNlaG9sZGVyPVxcXCJJbnB1dCB3aXRoIERhbmdlclxcXCI+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJmb3JtLWdyb3VwIHZhbGlkYXRpb24tY2hlY2tib3hlcyByb3dcXFwiPiA8bmItY2hlY2tib3ggc3RhdHVzPVxcXCJzdWNjZXNzXFxcIiBjbGFzcz1cXFwiY29sLXNtLTRcXFwiPkNoZWNrYm94IHdpdGggU3VjY2VzczwvbmItY2hlY2tib3g+IDxuYi1jaGVja2JveCBzdGF0dXM9XFxcIndhcm5pbmdcXFwiIGNsYXNzPVxcXCJjb2wtc20tNFxcXCI+Q2hlY2tib3ggd2l0aCBXYXJuaW5nPC9uYi1jaGVja2JveD4gPG5iLWNoZWNrYm94IHN0YXR1cz1cXFwiZGFuZ2VyXFxcIiBjbGFzcz1cXFwiY29sLXNtLTRcXFwiPkNoZWNrYm94IHdpdGggRGFuZ2VyPC9uYi1jaGVja2JveD4gPC9kaXY+IDwvbmItY2FyZC1ib2R5PiA8L25iLWNhcmQ+IDxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+Q2hlY2tib3hlcyAmIFJhZGlvczwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxkaXYgY2xhc3M9XFxcInJvdyBkZW1vLWNoZWNrYm94ZXMtcmFkaW9cXFwiPiA8ZGl2IGNsYXNzPVxcXCJkZW1vLWNoZWNrYm94ZXMgY29sLXNtLTRcXFwiPiA8bmItY2hlY2tib3g+Q2hlY2tib3ggMTwvbmItY2hlY2tib3g+IDxuYi1jaGVja2JveCBbdmFsdWVdPVxcXCJ0cnVlXFxcIj5DaGVja2JveCAyPC9uYi1jaGVja2JveD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRlbW8tcmFkaW8gY29sLXNtLTRcXFwiPiA8bmItcmFkaW8tZ3JvdXAgWyh2YWx1ZSldPVxcXCJyYWRpb0dyb3VwVmFsdWVcXFwiPiA8bmItcmFkaW8gW3ZhbHVlXT1cXFwiJ1RoaXMgaXMgdmFsdWUgMSdcXFwiPiBSYWRpbyAxIDwvbmItcmFkaW8+IDxuYi1yYWRpbyBbdmFsdWVdPVxcXCInVGhpcyBpcyB2YWx1ZSAyJ1xcXCI+IFJhZGlvIDIgPC9uYi1yYWRpbz4gPG5iLXJhZGlvIFt2YWx1ZV09XFxcIidUaGlzIGlzIHZhbHVlIDMnXFxcIj4gUmFkaW8gMyA8L25iLXJhZGlvPiA8L25iLXJhZGlvLWdyb3VwPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiZGVtby1kaXNhYmxlZC1jaGVja2JveC1yYWRpbyBjb2wtc20tNFxcXCI+IDxuYi1jaGVja2JveCBkaXNhYmxlZD1cXFwiZGlzYWJsZWRcXFwiPkRpc2FibGVkIENoZWNrYm94PC9uYi1jaGVja2JveD4gPG5iLXJhZGlvLWdyb3VwIGRpc2FibGVkPVxcXCJkaXNhYmxlZFxcXCI+IDxuYi1yYWRpbyBbdmFsdWVdPVxcXCInRGlzYWJsZWQgVmFsdWUnXFxcIj4gRGlzYWJsZWQgUmFkaW8gPC9uYi1yYWRpbz4gPC9uYi1yYWRpby1ncm91cD4gPC9kaXY+IDwvZGl2PiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiA8L2Rpdj4gPC9kaXY+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss":
/*!******************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./form-inputs.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3JtLWlucHV0cy9mb3JtLWlucHV0cy5jb21wb25lbnQuc2Nzcz8yM2ExIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxvVEFBd0o7O0FBRXJMO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2Zvcm0taW5wdXRzL2Zvcm0taW5wdXRzLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2Zvcm0taW5wdXRzLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.ts":
/*!****************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.ts ***!
  \****************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar FormInputsComponent = /** @class */ (function () {\n    function FormInputsComponent() {\n        this.starRate = 2;\n        this.heartRate = 4;\n        this.radioGroupValue = 'This is value 2';\n    }\n    FormInputsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-form-inputs',\n            styles: [__webpack_require__(/*! ./form-inputs.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.scss\")],\n            template: __webpack_require__(/*! ./form-inputs.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.html\")\n        })\n    ], FormInputsComponent);\n    return FormInputsComponent;\n}());\nexports.FormInputsComponent = FormInputsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3JtLWlucHV0cy9mb3JtLWlucHV0cy5jb21wb25lbnQudHM/MGZlNiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFPMUM7SUFMQTtRQU1JLGFBQVEsR0FBRyxDQUFDLENBQUM7UUFDYixjQUFTLEdBQUcsQ0FBQyxDQUFDO1FBQ2Qsb0JBQWUsR0FBRyxpQkFBaUIsQ0FBQztJQUN4QyxDQUFDO0lBSlksbUJBQW1CO1FBTC9CLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsbUJBQUcseUhBQStCO1lBQzNDLDZCQUFhLHlIQUE4QjtTQUM5QyxDQUFDO09BQ1csbUJBQW1CLENBSS9CO0lBQUQsMEJBQUM7Q0FBQTtBQUpZLGtEQUFtQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2Zvcm0taW5wdXRzL2Zvcm0taW5wdXRzLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1mb3JtLWlucHV0cycsXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9ybS1pbnB1dHMuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vZm9ybS1pbnB1dHMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEZvcm1JbnB1dHNDb21wb25lbnQge1xuICAgIHN0YXJSYXRlID0gMjtcbiAgICBoZWFydFJhdGUgPSA0O1xuICAgIHJhZGlvR3JvdXBWYWx1ZSA9ICdUaGlzIGlzIHZhbHVlIDInO1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.html":
/*!********************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.html ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <nb-card class=\\\"inline-form-card\\\"> <nb-card-header>Inline form</nb-card-header> <nb-card-body> <form class=\\\"form-inline\\\"> <input type=\\\"text\\\" class=\\\"form-control full-width\\\" placeholder=\\\"Jane Doe\\\"> <div class=\\\"input-group full-width\\\"> <div class=\\\"input-group-addon\\\">@</div> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Email\\\"> </div> <nb-checkbox>Remember me</nb-checkbox> <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button> </form> </nb-card-body> </nb-card> </div> </div> <div class=\\\"row\\\"> <div class=\\\"col-md-6\\\"> <nb-card> <nb-card-header>Using the Grid</nb-card-header> <nb-card-body> <form> <div class=\\\"form-group row\\\"> <label for=\\\"inputEmail1\\\" class=\\\"col-sm-3 col-form-label\\\">Email</label> <div class=\\\"col-sm-9\\\"> <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"inputEmail1\\\" placeholder=\\\"Email\\\"> </div> </div> <div class=\\\"form-group row\\\"> <label for=\\\"inputPassword2\\\" class=\\\"col-sm-3 col-form-label\\\">Password</label> <div class=\\\"col-sm-9\\\"> <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword2\\\" placeholder=\\\"Password\\\"> </div> </div> <div class=\\\"form-group row\\\"> <label class=\\\"col-sm-3\\\">Radios</label> <div class=\\\"col-sm-9\\\"> <div class=\\\"form-check\\\"> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" name=\\\"gridRadios\\\" checked=\\\"checked\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Option one is this and that&mdash;be sure to include why it's great</span> </label> </div> <div class=\\\"form-check\\\"> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" name=\\\"gridRadios\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Option two can be something else and selecting it will deselect option one</span> </label> </div> <div class=\\\"form-check disabled\\\"> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" name=\\\"gridRadios\\\" disabled=\\\"disabled\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Option three is disabled</span> </label> </div> </div> </div> <div class=\\\"form-group row\\\"> <div class=\\\"offset-sm-3 col-sm-9\\\"> <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Sign in</button> </div> </div> </form> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Form without labels</nb-card-header> <nb-card-body> <form> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Recipients\\\"> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Subject\\\"> </div> <div class=\\\"form-group\\\"> <textarea class=\\\"form-control\\\" placeholder=\\\"Message\\\"></textarea> </div> <button type=\\\"submit\\\" class=\\\"btn btn-success\\\">Send</button> </form> </nb-card-body> </nb-card> </div> <div class=\\\"col-md-6\\\"> <nb-card> <nb-card-header>Basic form</nb-card-header> <nb-card-body> <form> <div class=\\\"form-group\\\"> <label for=\\\"exampleInputEmail1\\\">Email address</label> <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"exampleInputEmail1\\\" placeholder=\\\"Email\\\"> </div> <div class=\\\"form-group\\\"> <label for=\\\"exampleInputPassword1\\\">Password</label> <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"exampleInputPassword1\\\" placeholder=\\\"Password\\\"> </div> <div class=\\\"form-group\\\"> <nb-checkbox>Check me out</nb-checkbox> </div> <button type=\\\"submit\\\" class=\\\"btn btn-danger\\\">Submit</button> </form> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Block form</nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"col-sm-6\\\"> <div class=\\\"form-group\\\"> <label for=\\\"inputFirstName\\\">First Name</label> <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputFirstName\\\" placeholder=\\\"First Name\\\"> </div> </div> <div class=\\\"col-sm-6\\\"> <div class=\\\"form-group\\\"> <label for=\\\"inputLastName\\\">Last Name</label> <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputLastName\\\" placeholder=\\\"Last Name\\\"> </div> </div> </div> <div class=\\\"row\\\"> <div class=\\\"col-sm-6\\\"> <div class=\\\"form-group\\\"> <label for=\\\"inputEmail\\\">Email</label> <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"inputEmail\\\" placeholder=\\\"Email\\\"> </div> </div> <div class=\\\"col-sm-6\\\"> <div class=\\\"form-group\\\"> <label for=\\\"inputWebsite\\\">Website</label> <input type=\\\"text\\\" class=\\\"form-control\\\" id=\\\"inputWebsite\\\" placeholder=\\\"Website\\\"> </div> </div> </div> <button type=\\\"submit\\\" class=\\\"btn btn-primary\\\">Submit</button> </nb-card-body> </nb-card> </div> </div> <div class=\\\"row\\\"> <div class=\\\"col-md-6\\\"> <nb-card> <nb-card-header>Horizontal form</nb-card-header> <nb-card-body> <form class=\\\"form-horizontal\\\"> <div class=\\\"form-group row\\\"> <label for=\\\"inputEmail3\\\" class=\\\"col-sm-3 form-control-label\\\">Email</label> <div class=\\\"col-sm-9\\\"> <input type=\\\"email\\\" class=\\\"form-control\\\" id=\\\"inputEmail3\\\" placeholder=\\\"Email\\\"> </div> </div> <div class=\\\"form-group row\\\"> <label for=\\\"inputPassword3\\\" class=\\\"col-sm-3 form-control-label\\\">Password</label> <div class=\\\"col-sm-9\\\"> <input type=\\\"password\\\" class=\\\"form-control\\\" id=\\\"inputPassword3\\\" placeholder=\\\"Password\\\"> </div> </div> <div class=\\\"form-group row\\\"> <div class=\\\"offset-sm-3 col-sm-9\\\"> <div class=\\\"checkbox\\\"> <nb-checkbox>Remember me</nb-checkbox> </div> </div> </div> <div class=\\\"form-group row\\\"> <div class=\\\"offset-sm-3 col-sm-9\\\"> <button type=\\\"submit\\\" class=\\\"btn btn-warning\\\">Sign in</button> </div> </div> </form> </nb-card-body> </nb-card> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss":
/*!********************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./form-layouts.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3JtLWxheW91dHMvZm9ybS1sYXlvdXRzLmNvbXBvbmVudC5zY3NzP2JiZmMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHVUQUF5Sjs7QUFFdEw7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvZm9ybS1sYXlvdXRzL2Zvcm0tbGF5b3V0cy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9mb3JtLWxheW91dHMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.ts":
/*!******************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.ts ***!
  \******************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar FormLayoutsComponent = /** @class */ (function () {\n    function FormLayoutsComponent() {\n    }\n    FormLayoutsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-form-layouts',\n            styles: [__webpack_require__(/*! ./form-layouts.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.scss\")],\n            template: __webpack_require__(/*! ./form-layouts.component.html */ \"./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.html\")\n        })\n    ], FormLayoutsComponent);\n    return FormLayoutsComponent;\n}());\nexports.FormLayoutsComponent = FormLayoutsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3JtLWxheW91dHMvZm9ybS1sYXlvdXRzLmNvbXBvbmVudC50cz8wZWFlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQU8xQztJQUFBO0lBQW1DLENBQUM7SUFBdkIsb0JBQW9CO1FBTGhDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsbUJBQUcsNEhBQWdDO1lBQzVDLDZCQUFhLDRIQUErQjtTQUMvQyxDQUFDO09BQ1csb0JBQW9CLENBQUc7SUFBRCwyQkFBQztDQUFBO0FBQXZCLG9EQUFvQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Zvcm1zL2Zvcm0tbGF5b3V0cy9mb3JtLWxheW91dHMuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LWZvcm0tbGF5b3V0cycsXG4gICAgc3R5bGVVcmxzOiBbJy4vZm9ybS1sYXlvdXRzLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0tbGF5b3V0cy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRm9ybUxheW91dHNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/forms-routing.module.ts":
/*!***************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/forms-routing.module.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar router_1 = __webpack_require__(/*! @angular/router */ \"./node_modules/@angular/router/fesm5/router.js\");\nvar forms_component_1 = __webpack_require__(/*! ./forms.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/forms.component.ts\");\nvar form_inputs_component_1 = __webpack_require__(/*! ./form-inputs/form-inputs.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/form-inputs/form-inputs.component.ts\");\nvar form_layouts_component_1 = __webpack_require__(/*! ./form-layouts/form-layouts.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/form-layouts/form-layouts.component.ts\");\nvar datepicker_component_1 = __webpack_require__(/*! ./datepicker/datepicker.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/datepicker/datepicker.component.ts\");\nvar buttons_component_1 = __webpack_require__(/*! ./buttons/buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.component.ts\");\nvar routes = [\n    {\n        path: '',\n        component: forms_component_1.FormsComponent,\n        children: [\n            {\n                path: 'inputs',\n                component: form_inputs_component_1.FormInputsComponent\n            },\n            {\n                path: 'layouts',\n                component: form_layouts_component_1.FormLayoutsComponent\n            },\n            {\n                path: 'layouts',\n                component: form_layouts_component_1.FormLayoutsComponent\n            },\n            {\n                path: 'buttons',\n                component: buttons_component_1.ButtonsComponent\n            },\n            {\n                path: 'datepicker',\n                component: datepicker_component_1.DatepickerComponent\n            }\n        ]\n    }\n];\nvar FormsRoutingModule = /** @class */ (function () {\n    function FormsRoutingModule() {\n    }\n    FormsRoutingModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [router_1.RouterModule.forChild(routes)],\n            exports: [router_1.RouterModule]\n        })\n    ], FormsRoutingModule);\n    return FormsRoutingModule;\n}());\nexports.FormsRoutingModule = FormsRoutingModule;\nexports.routedComponents = [forms_component_1.FormsComponent, form_inputs_component_1.FormInputsComponent, form_layouts_component_1.FormLayoutsComponent, datepicker_component_1.DatepickerComponent];\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3Jtcy1yb3V0aW5nLm1vZHVsZS50cz85MTUwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUF5QztBQUN6Qyw0R0FBdUQ7QUFFdkQsdUlBQW1EO0FBQ25ELGlMQUEwRTtBQUMxRSxzTEFBNkU7QUFDN0UsNEtBQXdFO0FBQ3hFLDZKQUErRDtBQUUvRCxJQUFNLE1BQU0sR0FBVztJQUNuQjtRQUNJLElBQUksRUFBRSxFQUFFO1FBQ1IsU0FBUyxFQUFFLGdDQUFjO1FBQ3pCLFFBQVEsRUFBRTtZQUNOO2dCQUNJLElBQUksRUFBRSxRQUFRO2dCQUNkLFNBQVMsRUFBRSwyQ0FBbUI7YUFDakM7WUFDRDtnQkFDSSxJQUFJLEVBQUUsU0FBUztnQkFDZixTQUFTLEVBQUUsNkNBQW9CO2FBQ2xDO1lBQ0Q7Z0JBQ0ksSUFBSSxFQUFFLFNBQVM7Z0JBQ2YsU0FBUyxFQUFFLDZDQUFvQjthQUNsQztZQUNEO2dCQUNJLElBQUksRUFBRSxTQUFTO2dCQUNmLFNBQVMsRUFBRSxvQ0FBZ0I7YUFDOUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsWUFBWTtnQkFDbEIsU0FBUyxFQUFFLDBDQUFtQjthQUNqQztTQUNKO0tBQ0o7Q0FDSixDQUFDO0FBTUY7SUFBQTtJQUFpQyxDQUFDO0lBQXJCLGtCQUFrQjtRQUo5QixlQUFRLENBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQyxxQkFBWSxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztZQUN4QyxPQUFPLEVBQUUsQ0FBQyxxQkFBWSxDQUFDO1NBQzFCLENBQUM7T0FDVyxrQkFBa0IsQ0FBRztJQUFELHlCQUFDO0NBQUE7QUFBckIsZ0RBQWtCO0FBRWxCLHdCQUFnQixHQUFHLENBQUMsZ0NBQWMsRUFBRSwyQ0FBbUIsRUFBRSw2Q0FBb0IsRUFBRSwwQ0FBbUIsQ0FBQyxDQUFDIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvZm9ybXMvZm9ybXMtcm91dGluZy5tb2R1bGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVzLCBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBGb3Jtc0NvbXBvbmVudCB9IGZyb20gJy4vZm9ybXMuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1JbnB1dHNDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0taW5wdXRzL2Zvcm0taW5wdXRzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBGb3JtTGF5b3V0c0NvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1sYXlvdXRzL2Zvcm0tbGF5b3V0cy5jb21wb25lbnQnO1xuaW1wb3J0IHsgRGF0ZXBpY2tlckNvbXBvbmVudCB9IGZyb20gJy4vZGF0ZXBpY2tlci9kYXRlcGlja2VyLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25zQ29tcG9uZW50IH0gZnJvbSAnLi9idXR0b25zL2J1dHRvbnMuY29tcG9uZW50JztcblxuY29uc3Qgcm91dGVzOiBSb3V0ZXMgPSBbXG4gICAge1xuICAgICAgICBwYXRoOiAnJyxcbiAgICAgICAgY29tcG9uZW50OiBGb3Jtc0NvbXBvbmVudCxcbiAgICAgICAgY2hpbGRyZW46IFtcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAnaW5wdXRzJyxcbiAgICAgICAgICAgICAgICBjb21wb25lbnQ6IEZvcm1JbnB1dHNDb21wb25lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJ2xheW91dHMnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRm9ybUxheW91dHNDb21wb25lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJ2xheW91dHMnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRm9ybUxheW91dHNDb21wb25lbnRcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgcGF0aDogJ2J1dHRvbnMnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogQnV0dG9uc0NvbXBvbmVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAnZGF0ZXBpY2tlcicsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBEYXRlcGlja2VyQ29tcG9uZW50XG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9XG5dO1xuXG5ATmdNb2R1bGUoe1xuICAgIGltcG9ydHM6IFtSb3V0ZXJNb2R1bGUuZm9yQ2hpbGQocm91dGVzKV0sXG4gICAgZXhwb3J0czogW1JvdXRlck1vZHVsZV1cbn0pXG5leHBvcnQgY2xhc3MgRm9ybXNSb3V0aW5nTW9kdWxlIHt9XG5cbmV4cG9ydCBjb25zdCByb3V0ZWRDb21wb25lbnRzID0gW0Zvcm1zQ29tcG9uZW50LCBGb3JtSW5wdXRzQ29tcG9uZW50LCBGb3JtTGF5b3V0c0NvbXBvbmVudCwgRGF0ZXBpY2tlckNvbXBvbmVudF07XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/forms-routing.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/forms.component.ts":
/*!**********************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/forms.component.ts ***!
  \**********************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar FormsComponent = /** @class */ (function () {\n    function FormsComponent() {\n    }\n    FormsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-form-elements',\n            template: \"\\n    <router-outlet></router-outlet>\\n  \"\n        })\n    ], FormsComponent);\n    return FormsComponent;\n}());\nexports.FormsComponent = FormsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3Jtcy5jb21wb25lbnQudHM/OWQwOSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFRMUM7SUFBQTtJQUE2QixDQUFDO0lBQWpCLGNBQWM7UUFOMUIsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsUUFBUSxFQUFFLDJDQUVYO1NBQ0YsQ0FBQztPQUNXLGNBQWMsQ0FBRztJQUFELHFCQUFDO0NBQUE7QUFBakIsd0NBQWMiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3Jtcy5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtZm9ybS1lbGVtZW50cycsXG4gICAgdGVtcGxhdGU6IGBcbiAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgRm9ybXNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/forms.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/forms/forms.module.ts":
/*!*******************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/forms/forms.module.ts ***!
  \*******************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_module_1 = __webpack_require__(/*! ../../@theme/theme.module */ \"./src/main/webapp/app/ngx-admin/@theme/theme.module.ts\");\nvar forms_routing_module_1 = __webpack_require__(/*! ./forms-routing.module */ \"./src/main/webapp/app/ngx-admin/pages/forms/forms-routing.module.ts\");\nvar buttons_module_1 = __webpack_require__(/*! ./buttons/buttons.module */ \"./src/main/webapp/app/ngx-admin/pages/forms/buttons/buttons.module.ts\");\nvar FormsModule = /** @class */ (function () {\n    function FormsModule() {\n    }\n    FormsModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [theme_module_1.ThemeModule, forms_routing_module_1.FormsRoutingModule, buttons_module_1.ButtonsModule],\n            declarations: forms_routing_module_1.routedComponents.slice()\n        })\n    ], FormsModule);\n    return FormsModule;\n}());\nexports.FormsModule = FormsModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3Jtcy5tb2R1bGUudHM/N2M2ZSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBeUM7QUFFekMsb0lBQXdEO0FBQ3hELHNKQUE4RTtBQUM5RSxvSkFBeUQ7QUFNekQ7SUFBQTtJQUEwQixDQUFDO0lBQWQsV0FBVztRQUp2QixlQUFRLENBQUM7WUFDTixPQUFPLEVBQUUsQ0FBQywwQkFBVyxFQUFFLHlDQUFrQixFQUFFLDhCQUFhLENBQUM7WUFDekQsWUFBWSxFQUFNLHVDQUFnQixRQUFDO1NBQ3RDLENBQUM7T0FDVyxXQUFXLENBQUc7SUFBRCxrQkFBQztDQUFBO0FBQWQsa0NBQVciLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9mb3Jtcy9mb3Jtcy5tb2R1bGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5pbXBvcnQgeyBUaGVtZU1vZHVsZSB9IGZyb20gJy4uLy4uL0B0aGVtZS90aGVtZS5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybXNSb3V0aW5nTW9kdWxlLCByb3V0ZWRDb21wb25lbnRzIH0gZnJvbSAnLi9mb3Jtcy1yb3V0aW5nLm1vZHVsZSc7XG5pbXBvcnQgeyBCdXR0b25zTW9kdWxlIH0gZnJvbSAnLi9idXR0b25zL2J1dHRvbnMubW9kdWxlJztcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbVGhlbWVNb2R1bGUsIEZvcm1zUm91dGluZ01vZHVsZSwgQnV0dG9uc01vZHVsZV0sXG4gICAgZGVjbGFyYXRpb25zOiBbLi4ucm91dGVkQ29tcG9uZW50c11cbn0pXG5leHBvcnQgY2xhc3MgRm9ybXNNb2R1bGUge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/forms/forms.module.ts\n");

/***/ })

}]);