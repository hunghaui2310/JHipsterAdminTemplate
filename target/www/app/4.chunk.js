(window["webpackJsonp"] = window["webpackJsonp"] || []).push([[4],{

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss ***!
  \*****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host .toolbars-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n[dir=ltr] .nb-theme-default :host .pagination-container {\\n  margin-right: 1rem; }\\n\\n[dir=rtl] .nb-theme-default :host .pagination-container {\\n  margin-left: 1rem; }\\n\\n.nb-theme-default :host .pagination-container .btn-group > .btn {\\n  padding-left: 1.125rem;\\n  padding-right: 1.125rem; }\\n\\n.nb-theme-default :host .icon-toolbar-container .btn-group > .btn {\\n  padding-left: 1.125rem;\\n  padding-right: 1.125rem; }\\n\\n.nb-theme-default :host .toggle-types .btn-toggle-radio-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .divided-button-group .btn-divided-checkbox-group {\\n  margin-bottom: 1rem;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-default :host .example-container:not(:last-child) {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-default :host .example-container > div:not(:last-child) {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .example-container > .btn-divided-checkbox-group {\\n  flex-wrap: wrap; }\\n  .nb-theme-default :host .example-container > .btn-divided-checkbox-group > label {\\n    flex-basis: 10%; }\\n    [dir=ltr] .nb-theme-default :host .example-container > .btn-divided-checkbox-group > label {\\n      margin: 0 0.25rem 0.5rem 0; }\\n    [dir=rtl] .nb-theme-default :host .example-container > .btn-divided-checkbox-group > label {\\n      margin: 0 0 0.5rem 0.25rem; }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-default :host .btn {\\n    padding: 0.75rem 0.7rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host .toolbars-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n[dir=ltr] .nb-theme-cosmic :host .pagination-container {\\n  margin-right: 1rem; }\\n\\n[dir=rtl] .nb-theme-cosmic :host .pagination-container {\\n  margin-left: 1rem; }\\n\\n.nb-theme-cosmic :host .pagination-container .btn-group > .btn {\\n  padding-left: 1.125rem;\\n  padding-right: 1.125rem; }\\n\\n.nb-theme-cosmic :host .icon-toolbar-container .btn-group > .btn {\\n  padding-left: 1.125rem;\\n  padding-right: 1.125rem; }\\n\\n.nb-theme-cosmic :host .toggle-types .btn-toggle-radio-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .divided-button-group .btn-divided-checkbox-group {\\n  margin-bottom: 1rem;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-cosmic :host .example-container:not(:last-child) {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-cosmic :host .example-container > div:not(:last-child) {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .example-container > .btn-divided-checkbox-group {\\n  flex-wrap: wrap; }\\n  .nb-theme-cosmic :host .example-container > .btn-divided-checkbox-group > label {\\n    flex-basis: 10%; }\\n    [dir=ltr] .nb-theme-cosmic :host .example-container > .btn-divided-checkbox-group > label {\\n      margin: 0 0.25rem 0.5rem 0; }\\n    [dir=rtl] .nb-theme-cosmic :host .example-container > .btn-divided-checkbox-group > label {\\n      margin: 0 0 0.5rem 0.25rem; }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-cosmic :host .btn {\\n    padding: 0.75rem 0.7rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host .toolbars-container {\\n  display: flex;\\n  flex-direction: column; }\\n\\n[dir=ltr] .nb-theme-corporate :host .pagination-container {\\n  margin-right: 1rem; }\\n\\n[dir=rtl] .nb-theme-corporate :host .pagination-container {\\n  margin-left: 1rem; }\\n\\n.nb-theme-corporate :host .pagination-container .btn-group > .btn {\\n  padding-left: 1.125rem;\\n  padding-right: 1.125rem; }\\n\\n.nb-theme-corporate :host .icon-toolbar-container .btn-group > .btn {\\n  padding-left: 1.125rem;\\n  padding-right: 1.125rem; }\\n\\n.nb-theme-corporate :host .toggle-types .btn-toggle-radio-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .divided-button-group .btn-divided-checkbox-group {\\n  margin-bottom: 1rem;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-corporate :host .example-container:not(:last-child) {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-corporate :host .example-container > div:not(:last-child) {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .example-container > .btn-divided-checkbox-group {\\n  flex-wrap: wrap; }\\n  .nb-theme-corporate :host .example-container > .btn-divided-checkbox-group > label {\\n    flex-basis: 10%; }\\n    [dir=ltr] .nb-theme-corporate :host .example-container > .btn-divided-checkbox-group > label {\\n      margin: 0 0.25rem 0.5rem 0; }\\n    [dir=rtl] .nb-theme-corporate :host .example-container > .btn-divided-checkbox-group > label {\\n      margin: 0 0 0.5rem 0.25rem; }\\n\\n@media (max-width: 767.98px) {\\n  .nb-theme-corporate :host .btn {\\n    padding: 0.75rem 0.7rem; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss":
/*!*********************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss ***!
  \*********************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host /deep/ .container-title {\\n  color: #a4abb3;\\n  font-family: Exo;\\n  margin-bottom: 0.5rem; }\\n\\n.nb-theme-default :host /deep/ .header {\\n  font-size: 0.875rem; }\\n\\n.nb-theme-default :host /deep/ .subheader {\\n  font-size: 0.75rem;\\n  font-weight: 300;\\n  color: #a4abb3; }\\n\\n.nb-theme-default :host /deep/ .btn-demo {\\n  width: 180px; }\\n\\n.nb-theme-default :host /deep/ .state-container {\\n  display: flex; }\\n  .nb-theme-default :host /deep/ .state-container:not(:last-child) {\\n    margin-bottom: 1rem; }\\n  .nb-theme-default :host /deep/ .state-container .state-value {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 0.375rem; }\\n  .nb-theme-default :host /deep/ .state-container .state-details {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n    height: 50px; }\\n\\n[dir=ltr] .nb-theme-default :host /deep/ .example-container {\\n  padding-right: 0; }\\n\\n[dir=rtl] .nb-theme-default :host /deep/ .example-container {\\n  padding-left: 0; }\\n\\n.nb-theme-default :host /deep/ .example-container .container-btn {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-default :host /deep/ .block-level-buttons .btn-group {\\n  margin-bottom: 1rem; }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-default :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    align-items: left; }\\n    .nb-theme-default :host ngx-default-buttons /deep/ nb-card-header span {\\n      margin-bottom: 1rem; } }\\n\\n@media (max-width: 399.98px) {\\n  [dir=ltr] .nb-theme-default :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-default :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-left: 1rem; }\\n  .nb-theme-default :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    margin-bottom: 0.5rem; }\\n  .nb-theme-default :host ngx-block-level-buttons /deep/ .btn-primary {\\n    padding: 0.75rem 1rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host /deep/ .container-title {\\n  color: #a1a1e5;\\n  font-family: Exo;\\n  margin-bottom: 0.5rem; }\\n\\n.nb-theme-cosmic :host /deep/ .header {\\n  font-size: 0.875rem; }\\n\\n.nb-theme-cosmic :host /deep/ .subheader {\\n  font-size: 0.75rem;\\n  font-weight: 300;\\n  color: #a1a1e5; }\\n\\n.nb-theme-cosmic :host /deep/ .btn-demo {\\n  width: 180px; }\\n\\n.nb-theme-cosmic :host /deep/ .state-container {\\n  display: flex; }\\n  .nb-theme-cosmic :host /deep/ .state-container:not(:last-child) {\\n    margin-bottom: 1rem; }\\n  .nb-theme-cosmic :host /deep/ .state-container .state-value {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 0.5rem; }\\n  .nb-theme-cosmic :host /deep/ .state-container .state-details {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n    height: 50px; }\\n\\n[dir=ltr] .nb-theme-cosmic :host /deep/ .example-container {\\n  padding-right: 0; }\\n\\n[dir=rtl] .nb-theme-cosmic :host /deep/ .example-container {\\n  padding-left: 0; }\\n\\n.nb-theme-cosmic :host /deep/ .example-container .container-btn {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-cosmic :host /deep/ .block-level-buttons .btn-group {\\n  margin-bottom: 1rem; }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-cosmic :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    align-items: left; }\\n    .nb-theme-cosmic :host ngx-default-buttons /deep/ nb-card-header span {\\n      margin-bottom: 1rem; } }\\n\\n@media (max-width: 399.98px) {\\n  [dir=ltr] .nb-theme-cosmic :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-cosmic :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-left: 1rem; }\\n  .nb-theme-cosmic :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    margin-bottom: 0.5rem; }\\n  .nb-theme-cosmic :host ngx-block-level-buttons /deep/ .btn-primary {\\n    padding: 0.75rem 1rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host /deep/ .container-title {\\n  color: #a4abb3;\\n  font-family: Exo;\\n  margin-bottom: 0.5rem; }\\n\\n.nb-theme-corporate :host /deep/ .header {\\n  font-size: 0.875rem; }\\n\\n.nb-theme-corporate :host /deep/ .subheader {\\n  font-size: 0.75rem;\\n  font-weight: 300;\\n  color: #a4abb3; }\\n\\n.nb-theme-corporate :host /deep/ .btn-demo {\\n  width: 180px; }\\n\\n.nb-theme-corporate :host /deep/ .state-container {\\n  display: flex; }\\n  .nb-theme-corporate :host /deep/ .state-container:not(:last-child) {\\n    margin-bottom: 1rem; }\\n  .nb-theme-corporate :host /deep/ .state-container .state-value {\\n    width: 50px;\\n    height: 50px;\\n    border-radius: 0.75rem;\\n    border-radius: 0.75rem; }\\n  .nb-theme-corporate :host /deep/ .state-container .state-details {\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    margin-left: 1rem;\\n    margin-right: 1rem;\\n    height: 50px; }\\n\\n[dir=ltr] .nb-theme-corporate :host /deep/ .example-container {\\n  padding-right: 0; }\\n\\n[dir=rtl] .nb-theme-corporate :host /deep/ .example-container {\\n  padding-left: 0; }\\n\\n.nb-theme-corporate :host /deep/ .example-container .container-btn {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-corporate :host /deep/ .block-level-buttons .btn-group {\\n  margin-bottom: 1rem; }\\n\\n@media (max-width: 575.98px) {\\n  .nb-theme-corporate :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    align-items: left; }\\n    .nb-theme-corporate :host ngx-default-buttons /deep/ nb-card-header span {\\n      margin-bottom: 1rem; } }\\n\\n@media (max-width: 399.98px) {\\n  [dir=ltr] .nb-theme-corporate :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-right: 1rem; }\\n  [dir=rtl] .nb-theme-corporate :host /deep/.icon-buttons .icon-button-examples button {\\n    margin-left: 1rem; }\\n  .nb-theme-corporate :host ngx-default-buttons /deep/ nb-card-header {\\n    flex-direction: column;\\n    margin-bottom: 0.5rem; }\\n  .nb-theme-corporate :host ngx-block-level-buttons /deep/ .btn-primary {\\n    padding: 0.75rem 1rem; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC5zY3NzP2E0MjkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMsa0hBQWlFO0FBQ3BHOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyxzbkNBQXNuQywrR0FBK0csK0NBQStDLEVBQUUsZUFBZSxLQUFLLEdBQUcsNkNBQTZDLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyxzQkFBc0IsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHlFQUF5RSxVQUFVLDBEQUEwRCxVQUFVLDhiQUE4Yix3QkFBd0IsY0FBYyxHQUFHLHVGQUF1RixPQUFPLHlCQUF5QixNQUFNLEtBQUssR0FBRyxtbkNBQW1uQyxrSEFBa0gsRUFBRSxFQUFFLG1CQUFtQixTQUFTLE9BQU8sb3VFQUFvdUUsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLGtrRUFBa2tFLCtHQUErRywrQ0FBK0MsRUFBRSxlQUFlLEtBQUssR0FBRyw2Q0FBNkMsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHNCQUFzQixpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcseUVBQXlFLFVBQVUsMERBQTBELFVBQVUsOGJBQThiLHdCQUF3QixjQUFjLEdBQUcsdUZBQXVGLE9BQU8seUJBQXlCLE1BQU0sS0FBSyxHQUFHLG1uQ0FBbW5DLGtIQUFrSCxFQUFFLEVBQUUsbUJBQW1CLFNBQVMsT0FBTyxra0VBQWtrRSwrR0FBK0csK0NBQStDLEVBQUUsZUFBZSxLQUFLLEdBQUcsNkNBQTZDLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyxzQkFBc0IsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHlFQUF5RSxVQUFVLDBEQUEwRCxVQUFVLDhiQUE4Yix3QkFBd0IsY0FBYyxHQUFHLHVGQUF1RixPQUFPLHlCQUF5QixNQUFNLEtBQUssR0FBRyxtbkNBQW1uQyxrSEFBa0gsRUFBRSxFQUFFLG1CQUFtQixTQUFTLE9BQU8sa2tFQUFra0UsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLGtrRUFBa2tFLCtHQUErRywrQ0FBK0MsRUFBRSxlQUFlLEtBQUssR0FBRyw2Q0FBNkMsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHNCQUFzQixpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcseUVBQXlFLFVBQVUsMERBQTBELFVBQVUsOGJBQThiLHdCQUF3QixjQUFjLEdBQUcsdUZBQXVGLE9BQU8seUJBQXlCLE1BQU0sS0FBSyxHQUFHLG1uQ0FBbW5DLGtIQUFrSCxFQUFFLEVBQUUsbUJBQW1CLFNBQVMsT0FBTyxrakZBQWtqRiw4QkFBOEIsOEJBQThCLFdBQVcsNEVBQTRFLDBCQUEwQix3TUFBd00sbUJBQW1CLHFCQUFxQiwwQkFBMEIsRUFBRSw0Q0FBNEMsd0JBQXdCLEVBQUUsK0NBQStDLHVCQUF1QixxQkFBcUIsbUJBQW1CLEVBQUUsOENBQThDLGlCQUFpQixFQUFFLHFEQUFxRCxrQkFBa0IsRUFBRSxzRUFBc0UsMEJBQTBCLEVBQUUsa0VBQWtFLGtCQUFrQixtQkFBbUIsOEJBQThCLEVBQUUsb0VBQW9FLG9CQUFvQiw2QkFBNkIsOEJBQThCLHdCQUF3Qix5QkFBeUIsbUJBQW1CLEVBQUUsaUVBQWlFLHFCQUFxQixFQUFFLGlFQUFpRSxvQkFBb0IsRUFBRSxzRUFBc0UsMEJBQTBCLEVBQUUsb0VBQW9FLHdCQUF3QixFQUFFLGtDQUFrQyx1RUFBdUUsNkJBQTZCLHdCQUF3QixFQUFFLDhFQUE4RSw0QkFBNEIsRUFBRSxFQUFFLGtDQUFrQyx3RkFBd0YseUJBQXlCLEVBQUUsd0ZBQXdGLHdCQUF3QixFQUFFLHVFQUF1RSw2QkFBNkIsNEJBQTRCLEVBQUUseUVBQXlFLDRCQUE0QixFQUFFLEVBQUUsc1lBQXNZLDhCQUE4Qiw4QkFBOEIsV0FBVyw0RUFBNEUsMEJBQTBCLHVNQUF1TSxtQkFBbUIscUJBQXFCLDBCQUEwQixFQUFFLDJDQUEyQyx3QkFBd0IsRUFBRSw4Q0FBOEMsdUJBQXVCLHFCQUFxQixtQkFBbUIsRUFBRSw2Q0FBNkMsaUJBQWlCLEVBQUUsb0RBQW9ELGtCQUFrQixFQUFFLHFFQUFxRSwwQkFBMEIsRUFBRSxpRUFBaUUsa0JBQWtCLG1CQUFtQiw0QkFBNEIsRUFBRSxtRUFBbUUsb0JBQW9CLDZCQUE2Qiw4QkFBOEIsd0JBQXdCLHlCQUF5QixtQkFBbUIsRUFBRSxnRUFBZ0UscUJBQXFCLEVBQUUsZ0VBQWdFLG9CQUFvQixFQUFFLHFFQUFxRSwwQkFBMEIsRUFBRSxtRUFBbUUsd0JBQXdCLEVBQUUsa0NBQWtDLHNFQUFzRSw2QkFBNkIsd0JBQXdCLEVBQUUsNkVBQTZFLDRCQUE0QixFQUFFLEVBQUUsa0NBQWtDLHVGQUF1Rix5QkFBeUIsRUFBRSx1RkFBdUYsd0JBQXdCLEVBQUUsc0VBQXNFLDZCQUE2Qiw0QkFBNEIsRUFBRSx3RUFBd0UsNEJBQTRCLEVBQUUsRUFBRSxzWUFBc1ksOEJBQThCLDhCQUE4QixXQUFXLDRFQUE0RSwwQkFBMEIsME1BQTBNLG1CQUFtQixxQkFBcUIsMEJBQTBCLEVBQUUsOENBQThDLHdCQUF3QixFQUFFLGlEQUFpRCx1QkFBdUIscUJBQXFCLG1CQUFtQixFQUFFLGdEQUFnRCxpQkFBaUIsRUFBRSx1REFBdUQsa0JBQWtCLEVBQUUsd0VBQXdFLDBCQUEwQixFQUFFLG9FQUFvRSxrQkFBa0IsbUJBQW1CLDZCQUE2Qiw2QkFBNkIsRUFBRSxzRUFBc0Usb0JBQW9CLDZCQUE2Qiw4QkFBOEIsd0JBQXdCLHlCQUF5QixtQkFBbUIsRUFBRSxtRUFBbUUscUJBQXFCLEVBQUUsbUVBQW1FLG9CQUFvQixFQUFFLHdFQUF3RSwwQkFBMEIsRUFBRSxzRUFBc0Usd0JBQXdCLEVBQUUsa0NBQWtDLHlFQUF5RSw2QkFBNkIsd0JBQXdCLEVBQUUsZ0ZBQWdGLDRCQUE0QixFQUFFLEVBQUUsa0NBQWtDLDBGQUEwRix5QkFBeUIsRUFBRSwwRkFBMEYsd0JBQXdCLEVBQUUseUVBQXlFLDZCQUE2Qiw0QkFBNEIsRUFBRSwyRUFBMkUsNEJBQTRCLEVBQUUsRUFBRTs7QUFFdnNvQyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgaXMgYSBzdGFydGluZyBwb2ludCB3aGVyZSB3ZSBkZWNsYXJlIHRoZSBtYXBzIG9mIHRoZW1lcyBhbmQgZ2xvYmFsbHkgYXZhaWxhYmxlIGZ1bmN0aW9ucy9taXhpbnNcXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBUaGlzIG1peGluIGdlbmVyYXRlcyBrZXlmYW1lcy5cXG4gKiBCZWNhdXNlIG9mIGFsbCBrZXlmcmFtZXMgY2FuJ3QgYmUgc2NvcGVkLFxcbiAqIHdlIG5lZWQgdG8gcHV0cyB1bmlxdWUgbmFtZSBpbiBlYWNoIGJ0bi1wdWxzZSBjYWxsLlxcbiAqL1xcbi8qXFxuXFxuQWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXNjb3BpbmctMS8jaG9zdC1zZWxlY3RvcilcXG46aG9zdCBhbmQgOmhvc3QtY29udGV4dCBhcmUgcHNldWRvLWNsYXNzZXMuIFNvIHdlIGFzc3VtZSB0aGV5IGNvdWxkIGJlIGNvbWJpbmVkLFxcbmxpa2Ugb3RoZXIgcHNldWRvLWNsYXNzZXMsIGV2ZW4gc2FtZSBvbmVzLlxcbkZvciBleGFtcGxlOiAnOm50aC1vZi10eXBlKDJuKTpudGgtb2YtdHlwZShldmVuKScuXFxuXFxuSWRlYWwgc29sdXRpb24gd291bGQgYmUgdG8gcHJlcGVuZCBhbnkgc2VsZWN0b3Igd2l0aCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuXFxuVGhlbiBuZWJ1bGFyIGNvbXBvbmVudHMgd2lsbCBiZWhhdmUgYXMgYW4gaHRtbCBlbGVtZW50IGFuZCByZXNwb25kIHRvIFtkaXJdIGF0dHJpYnV0ZSBvbiBhbnkgbGV2ZWwsXFxuc28gZGlyZWN0aW9uIGNvdWxkIGJlIG92ZXJyaWRkZW4gb24gYW55IGNvbXBvbmVudCBsZXZlbC5cXG5cXG5JbXBsZW1lbnRhdGlvbiBjb2RlOlxcblxcbkBtaXhpbiBuYi1ydGwoKSB7XFxuICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICBAYXQtcm9vdCB7c2VsZWN0b3ItYXBwZW5kKCc6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSknLCAmKX0ge1xcbiAgICBAY29udGVudDtcXG4gIH1cXG59XFxuXFxuQW5kIHdoZW4gd2UgY2FsbCBpdCBzb21ld2hlcmU6XFxuXFxuOmhvc3Qge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuOmhvc3QtY29udGV4dCguLi4pIHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcblxcblJlc3VsdCB3aWxsIGxvb2sgbGlrZTpcXG5cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG5cXG4qXFxuICBTaWRlIG5vdGU6XFxuICA6aG9zdC1jb250ZXh0KCk6aG9zdCBzZWxlY3RvciBhcmUgdmFsaWQuIGh0dHBzOi8vbGlzdHMudzMub3JnL0FyY2hpdmVzL1B1YmxpYy93d3ctc3R5bGUvMjAxNUZlYi8wMzA1Lmh0bWxcXG5cXG4gIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSBzaG91bGQgbWF0Y2ggYW55IHBlcm11dGF0aW9uLFxcbiAgc28gb3JkZXIgaXMgbm90IGltcG9ydGFudC5cXG4qXFxuXFxuXFxuQ3VycmVudGx5LCB0aGVyZSdyZSB0d28gcHJvYmxlbXMgd2l0aCB0aGlzIGFwcHJvYWNoOlxcblxcbkZpcnN0LCBpcyB0aGF0IHdlIGNhbid0IGNvbWJpbmUgOmhvc3QsIDpob3N0LWNvbnRleHQuIEFuZ3VsYXIgYnVncyAjMTQzNDksICMxOTE5OS5cXG5Gb3IgdGhlIG1vbWVudCBvZiB3cml0aW5nLCB0aGUgb25seSBwb3NzaWJsZSB3YXkgaXM6XFxuOmhvc3Qge1xcbiAgOmhvc3QtY29udGV4dCguLi4pIHtcXG4gICAgLi4uXFxuICB9XFxufVxcbkl0IGRvZXNuJ3Qgd29yayBmb3IgdXMgYmVjYXVzZSBtaXhpbiBjb3VsZCBiZSBjYWxsZWQgc29tZXdoZXJlIGRlZXBlciwgbGlrZTpcXG46aG9zdCB7XFxuICBwIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkgeyAuLi4gfVxcbiAgfVxcbn1cXG5XZSBhcmUgbm90IGFibGUgdG8gZ28gdXAgdG8gOmhvc3QgbGV2ZWwgdG8gcGxhY2UgY29udGVudCBwYXNzZWQgdG8gbWl4aW4uXFxuXFxuVGhlIHNlY29uZCBwcm9ibGVtIGlzIHRoYXQgd2Ugb25seSBjYW4gYmUgc3VyZSB0aGF0IHdlIGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gYW5vdGhlclxcbjpob3N0Lzpob3N0LWNvbnRleHQgcHNldWRvLWNsYXNzIHdoZW4gY2FsbGVkIGluIHRoZW1lIGZpbGVzICgqLnRoZW1lLnNjc3MpLlxcbiAgKlxcbiAgICBTaWRlIG5vdGU6XFxuICAgIEN1cnJlbnRseSwgbmItaW5zdGFsbC1jb21wb25lbnQgdXNlcyBhbm90aGVyIGFwcHJvYWNoIHdoZXJlIDpob3N0IHByZXBlbmRlZCB3aXRoIHRoZSB0aGVtZSBuYW1lXFxuICAgIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNWI5NjA3ODYyNGIwYTQ3NjBmMmRiY2Y2ZmRmMGJkNjI3OTFiZTViYi9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxKSxcXG4gICAgYnV0IGl0IHdhcyBtYWRlIHRvIGJlIGFibGUgdG8gdXNlIGN1cnJlbnQgcmVhbGl6YXRpb24gb2YgcnRsIGFuZCBpdCBjYW4gYmUgcmV3cml0dGVuIGJhY2sgdG9cXG4gICAgOmhvc3QtY29udGV4dCgkdGhlbWUpIG9uY2Ugd2Ugd2lsbCBiZSBhYmxlIHRvIHVzZSBtdWx0aXBsZSBzaGFkb3cgc2VsZWN0b3JzLlxcbiAgKlxcbkJ1dCB3aGVuIGl0J3MgY2FsbGVkIGluICouY29tcG9uZW50LnNjc3Mgd2UgY2FuJ3QgYmUgc3VyZSwgdGhhdCBzZWxlY3RvciBzdGFydHMgd2l0aCA6aG9zdC86aG9zdC1jb250ZXh0LFxcbmJlY2F1c2UgYW5ndWxhciBhbGxvd3Mgb21pdHRpbmcgcHNldWRvLWNsYXNzZXMgaWYgd2UgZG9uJ3QgbmVlZCB0byBzdHlsZSA6aG9zdCBjb21wb25lbnQgaXRzZWxmLlxcbldlIGNhbiBicmVhayBzdWNoIHNlbGVjdG9ycywgYnkganVzdCBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIHRoZW0uXFxuICAqKipcXG4gICAgUG9zc2libGUgc29sdXRpb25cXG4gICAgY2hlY2sgaWYgd2UgaW4gdGhlbWUgYnkgc29tZSB0aGVtZSB2YXJpYWJsZXMgYW5kIGlmIHNvIGFwcGVuZCwgb3RoZXJ3aXNlIG5lc3QgbGlrZVxcbiAgICBAYXQtcm9vdCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkge1xcbiAgICAgIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAgICAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICAgICAgeyZ9IHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICBXaGF0IGlmIDpob3N0IHNwZWNpZmllZD8gQ2FuIHdlIGFkZCBzcGFjZSBpbiA6aG9zdC1jb250ZXh0KC4uLikgOmhvc3Q/XFxuICAgIE9yIG1heWJlIGFkZCA6aG9zdCBzZWxlY3RvciBhbnl3YXk/IElmIG11bHRpcGxlIDpob3N0IHNlbGVjdG9ycyBhcmUgYWxsb3dlZFxcbiAgKioqXFxuXFxuXFxuUHJvYmxlbXMgd2l0aCB0aGUgY3VycmVudCBhcHByb2FjaC5cXG5cXG4xLiBEaXJlY3Rpb24gY2FuIGJlIGFwcGxpZWQgb25seSBvbiBkb2N1bWVudCBsZXZlbCwgYmVjYXVzZSBtaXhpbiBwcmVwZW5kcyB0aGVtZSBjbGFzcyxcXG53aGljaCBwbGFjZWQgb24gdGhlIGJvZHkuXFxuMi4gKi5jb21wb25lbnQuc2NzcyBzdHlsZXMgc2hvdWxkIGJlIGluIDpob3N0IHNlbGVjdG9yLiBPdGhlcndpc2UgYW5ndWxhciB3aWxsIGFkZCBob3N0XFxuYXR0cmlidXRlIHRvIFtkaXI9cnRsXSBhdHRyaWJ1dGUgYXMgd2VsbC5cXG5cXG5cXG5HZW5lcmFsIHByb2JsZW1zLlxcblxcbkx0ciBpcyBkZWZhdWx0IGRvY3VtZW50IGRpcmVjdGlvbiwgYnV0IGZvciBwcm9wZXIgd29yayBvZiBuYi1sdHIgKG1lYW5zIGx0ciBvbmx5KSxcXG5bZGlyPWx0cl0gc2hvdWxkIGJlIHNwZWNpZmllZCBhdCBsZWFzdCBzb21ld2hlcmUuICc6bm90KFtkaXI9cnRsXScgbm90IGFwcGxpY2FibGUgaGVyZSxcXG5iZWNhdXNlIGl0J3Mgc2F0aXNmeSBhbnkgcGFyZW50LCB0aGF0IGRvbid0IGhhdmUgW2Rpcj1ydGxdIGF0dHJpYnV0ZS5cXG5QcmV2aW91cyBhcHByb2FjaCB3YXMgdG8gdXNlIHNpbmdsZSBydGwgbWl4aW4gYW5kIHJlc2V0IGx0ciBwcm9wZXJ0aWVzIHRvIGluaXRpYWwgdmFsdWUuXFxuQnV0IHNvbWV0aW1lcyBpdCdzIGhhcmQgdG8gZmluZCwgd2hhdCB0aGUgcHJldmlvdXMgdmFsdWUgc2hvdWxkIGJlLiBBbmQgc3VjaCBtaXhpbiBjYWxsIGxvb2tzIHRvbyB2ZXJib3NlLlxcbiovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBUaGlzIG1peGluIGdlbmVyYXRlcyBrZXlmYW1lcy5cXG4gKiBCZWNhdXNlIG9mIGFsbCBrZXlmcmFtZXMgY2FuJ3QgYmUgc2NvcGVkLFxcbiAqIHdlIG5lZWQgdG8gcHV0cyB1bmlxdWUgbmFtZSBpbiBlYWNoIGJ0bi1wdWxzZSBjYWxsLlxcbiAqL1xcbi8qXFxuXFxuQWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXNjb3BpbmctMS8jaG9zdC1zZWxlY3RvcilcXG46aG9zdCBhbmQgOmhvc3QtY29udGV4dCBhcmUgcHNldWRvLWNsYXNzZXMuIFNvIHdlIGFzc3VtZSB0aGV5IGNvdWxkIGJlIGNvbWJpbmVkLFxcbmxpa2Ugb3RoZXIgcHNldWRvLWNsYXNzZXMsIGV2ZW4gc2FtZSBvbmVzLlxcbkZvciBleGFtcGxlOiAnOm50aC1vZi10eXBlKDJuKTpudGgtb2YtdHlwZShldmVuKScuXFxuXFxuSWRlYWwgc29sdXRpb24gd291bGQgYmUgdG8gcHJlcGVuZCBhbnkgc2VsZWN0b3Igd2l0aCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuXFxuVGhlbiBuZWJ1bGFyIGNvbXBvbmVudHMgd2lsbCBiZWhhdmUgYXMgYW4gaHRtbCBlbGVtZW50IGFuZCByZXNwb25kIHRvIFtkaXJdIGF0dHJpYnV0ZSBvbiBhbnkgbGV2ZWwsXFxuc28gZGlyZWN0aW9uIGNvdWxkIGJlIG92ZXJyaWRkZW4gb24gYW55IGNvbXBvbmVudCBsZXZlbC5cXG5cXG5JbXBsZW1lbnRhdGlvbiBjb2RlOlxcblxcbkBtaXhpbiBuYi1ydGwoKSB7XFxuICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICBAYXQtcm9vdCB7c2VsZWN0b3ItYXBwZW5kKCc6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSknLCAmKX0ge1xcbiAgICBAY29udGVudDtcXG4gIH1cXG59XFxuXFxuQW5kIHdoZW4gd2UgY2FsbCBpdCBzb21ld2hlcmU6XFxuXFxuOmhvc3Qge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuOmhvc3QtY29udGV4dCguLi4pIHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcblxcblJlc3VsdCB3aWxsIGxvb2sgbGlrZTpcXG5cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG5cXG4qXFxuICBTaWRlIG5vdGU6XFxuICA6aG9zdC1jb250ZXh0KCk6aG9zdCBzZWxlY3RvciBhcmUgdmFsaWQuIGh0dHBzOi8vbGlzdHMudzMub3JnL0FyY2hpdmVzL1B1YmxpYy93d3ctc3R5bGUvMjAxNUZlYi8wMzA1Lmh0bWxcXG5cXG4gIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSBzaG91bGQgbWF0Y2ggYW55IHBlcm11dGF0aW9uLFxcbiAgc28gb3JkZXIgaXMgbm90IGltcG9ydGFudC5cXG4qXFxuXFxuXFxuQ3VycmVudGx5LCB0aGVyZSdyZSB0d28gcHJvYmxlbXMgd2l0aCB0aGlzIGFwcHJvYWNoOlxcblxcbkZpcnN0LCBpcyB0aGF0IHdlIGNhbid0IGNvbWJpbmUgOmhvc3QsIDpob3N0LWNvbnRleHQuIEFuZ3VsYXIgYnVncyAjMTQzNDksICMxOTE5OS5cXG5Gb3IgdGhlIG1vbWVudCBvZiB3cml0aW5nLCB0aGUgb25seSBwb3NzaWJsZSB3YXkgaXM6XFxuOmhvc3Qge1xcbiAgOmhvc3QtY29udGV4dCguLi4pIHtcXG4gICAgLi4uXFxuICB9XFxufVxcbkl0IGRvZXNuJ3Qgd29yayBmb3IgdXMgYmVjYXVzZSBtaXhpbiBjb3VsZCBiZSBjYWxsZWQgc29tZXdoZXJlIGRlZXBlciwgbGlrZTpcXG46aG9zdCB7XFxuICBwIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkgeyAuLi4gfVxcbiAgfVxcbn1cXG5XZSBhcmUgbm90IGFibGUgdG8gZ28gdXAgdG8gOmhvc3QgbGV2ZWwgdG8gcGxhY2UgY29udGVudCBwYXNzZWQgdG8gbWl4aW4uXFxuXFxuVGhlIHNlY29uZCBwcm9ibGVtIGlzIHRoYXQgd2Ugb25seSBjYW4gYmUgc3VyZSB0aGF0IHdlIGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gYW5vdGhlclxcbjpob3N0Lzpob3N0LWNvbnRleHQgcHNldWRvLWNsYXNzIHdoZW4gY2FsbGVkIGluIHRoZW1lIGZpbGVzICgqLnRoZW1lLnNjc3MpLlxcbiAgKlxcbiAgICBTaWRlIG5vdGU6XFxuICAgIEN1cnJlbnRseSwgbmItaW5zdGFsbC1jb21wb25lbnQgdXNlcyBhbm90aGVyIGFwcHJvYWNoIHdoZXJlIDpob3N0IHByZXBlbmRlZCB3aXRoIHRoZSB0aGVtZSBuYW1lXFxuICAgIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNWI5NjA3ODYyNGIwYTQ3NjBmMmRiY2Y2ZmRmMGJkNjI3OTFiZTViYi9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxKSxcXG4gICAgYnV0IGl0IHdhcyBtYWRlIHRvIGJlIGFibGUgdG8gdXNlIGN1cnJlbnQgcmVhbGl6YXRpb24gb2YgcnRsIGFuZCBpdCBjYW4gYmUgcmV3cml0dGVuIGJhY2sgdG9cXG4gICAgOmhvc3QtY29udGV4dCgkdGhlbWUpIG9uY2Ugd2Ugd2lsbCBiZSBhYmxlIHRvIHVzZSBtdWx0aXBsZSBzaGFkb3cgc2VsZWN0b3JzLlxcbiAgKlxcbkJ1dCB3aGVuIGl0J3MgY2FsbGVkIGluICouY29tcG9uZW50LnNjc3Mgd2UgY2FuJ3QgYmUgc3VyZSwgdGhhdCBzZWxlY3RvciBzdGFydHMgd2l0aCA6aG9zdC86aG9zdC1jb250ZXh0LFxcbmJlY2F1c2UgYW5ndWxhciBhbGxvd3Mgb21pdHRpbmcgcHNldWRvLWNsYXNzZXMgaWYgd2UgZG9uJ3QgbmVlZCB0byBzdHlsZSA6aG9zdCBjb21wb25lbnQgaXRzZWxmLlxcbldlIGNhbiBicmVhayBzdWNoIHNlbGVjdG9ycywgYnkganVzdCBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIHRoZW0uXFxuICAqKipcXG4gICAgUG9zc2libGUgc29sdXRpb25cXG4gICAgY2hlY2sgaWYgd2UgaW4gdGhlbWUgYnkgc29tZSB0aGVtZSB2YXJpYWJsZXMgYW5kIGlmIHNvIGFwcGVuZCwgb3RoZXJ3aXNlIG5lc3QgbGlrZVxcbiAgICBAYXQtcm9vdCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkge1xcbiAgICAgIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAgICAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICAgICAgeyZ9IHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICBXaGF0IGlmIDpob3N0IHNwZWNpZmllZD8gQ2FuIHdlIGFkZCBzcGFjZSBpbiA6aG9zdC1jb250ZXh0KC4uLikgOmhvc3Q/XFxuICAgIE9yIG1heWJlIGFkZCA6aG9zdCBzZWxlY3RvciBhbnl3YXk/IElmIG11bHRpcGxlIDpob3N0IHNlbGVjdG9ycyBhcmUgYWxsb3dlZFxcbiAgKioqXFxuXFxuXFxuUHJvYmxlbXMgd2l0aCB0aGUgY3VycmVudCBhcHByb2FjaC5cXG5cXG4xLiBEaXJlY3Rpb24gY2FuIGJlIGFwcGxpZWQgb25seSBvbiBkb2N1bWVudCBsZXZlbCwgYmVjYXVzZSBtaXhpbiBwcmVwZW5kcyB0aGVtZSBjbGFzcyxcXG53aGljaCBwbGFjZWQgb24gdGhlIGJvZHkuXFxuMi4gKi5jb21wb25lbnQuc2NzcyBzdHlsZXMgc2hvdWxkIGJlIGluIDpob3N0IHNlbGVjdG9yLiBPdGhlcndpc2UgYW5ndWxhciB3aWxsIGFkZCBob3N0XFxuYXR0cmlidXRlIHRvIFtkaXI9cnRsXSBhdHRyaWJ1dGUgYXMgd2VsbC5cXG5cXG5cXG5HZW5lcmFsIHByb2JsZW1zLlxcblxcbkx0ciBpcyBkZWZhdWx0IGRvY3VtZW50IGRpcmVjdGlvbiwgYnV0IGZvciBwcm9wZXIgd29yayBvZiBuYi1sdHIgKG1lYW5zIGx0ciBvbmx5KSxcXG5bZGlyPWx0cl0gc2hvdWxkIGJlIHNwZWNpZmllZCBhdCBsZWFzdCBzb21ld2hlcmUuICc6bm90KFtkaXI9cnRsXScgbm90IGFwcGxpY2FibGUgaGVyZSxcXG5iZWNhdXNlIGl0J3Mgc2F0aXNmeSBhbnkgcGFyZW50LCB0aGF0IGRvbid0IGhhdmUgW2Rpcj1ydGxdIGF0dHJpYnV0ZS5cXG5QcmV2aW91cyBhcHByb2FjaCB3YXMgdG8gdXNlIHNpbmdsZSBydGwgbWl4aW4gYW5kIHJlc2V0IGx0ciBwcm9wZXJ0aWVzIHRvIGluaXRpYWwgdmFsdWUuXFxuQnV0IHNvbWV0aW1lcyBpdCdzIGhhcmQgdG8gZmluZCwgd2hhdCB0aGUgcHJldmlvdXMgdmFsdWUgc2hvdWxkIGJlLiBBbmQgc3VjaCBtaXhpbiBjYWxsIGxvb2tzIHRvbyB2ZXJib3NlLlxcbiovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKiFcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAvZGVlcC8gLmNvbnRhaW5lci10aXRsZSB7XFxuICBjb2xvcjogI2E0YWJiMztcXG4gIGZvbnQtZmFtaWx5OiBFeG87XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAvZGVlcC8gLmhlYWRlciB7XFxuICBmb250LXNpemU6IDAuODc1cmVtOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgL2RlZXAvIC5zdWJoZWFkZXIge1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGNvbG9yOiAjYTRhYmIzOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgL2RlZXAvIC5idG4tZGVtbyB7XFxuICB3aWR0aDogMTgwcHg7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAvZGVlcC8gLnN0YXRlLWNvbnRhaW5lciB7XFxuICBkaXNwbGF5OiBmbGV4OyB9XFxuICAubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAvZGVlcC8gLnN0YXRlLWNvbnRhaW5lcjpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcbiAgLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgL2RlZXAvIC5zdGF0ZS1jb250YWluZXIgLnN0YXRlLXZhbHVlIHtcXG4gICAgd2lkdGg6IDUwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMC4zNzVyZW07IH1cXG4gIC5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC9kZWVwLyAuc3RhdGUtY29udGFpbmVyIC5zdGF0ZS1kZXRhaWxzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgIGhlaWdodDogNTBweDsgfVxcblxcbltkaXI9bHRyXSAubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAvZGVlcC8gLmV4YW1wbGUtY29udGFpbmVyIHtcXG4gIHBhZGRpbmctcmlnaHQ6IDA7IH1cXG5cXG5bZGlyPXJ0bF0gLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgL2RlZXAvIC5leGFtcGxlLWNvbnRhaW5lciB7XFxuICBwYWRkaW5nLWxlZnQ6IDA7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAvZGVlcC8gLmV4YW1wbGUtY29udGFpbmVyIC5jb250YWluZXItYnRuIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC9kZWVwLyAuYmxvY2stbGV2ZWwtYnV0dG9ucyAuYnRuLWdyb3VwIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07IH1cXG5cXG5AbWVkaWEgKG1heC13aWR0aDogNTc1Ljk4cHgpIHtcXG4gIC5uYi10aGVtZS1kZWZhdWx0IDpob3N0IG5neC1kZWZhdWx0LWJ1dHRvbnMgL2RlZXAvIG5iLWNhcmQtaGVhZGVyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGxlZnQ7IH1cXG4gICAgLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3Qgbmd4LWRlZmF1bHQtYnV0dG9ucyAvZGVlcC8gbmItY2FyZC1oZWFkZXIgc3BhbiB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfSB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDM5OS45OHB4KSB7XFxuICBbZGlyPWx0cl0gLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgL2RlZXAvLmljb24tYnV0dG9ucyAuaWNvbi1idXR0b24tZXhhbXBsZXMgYnV0dG9uIHtcXG4gICAgbWFyZ2luLXJpZ2h0OiAxcmVtOyB9XFxuICBbZGlyPXJ0bF0gLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgL2RlZXAvLmljb24tYnV0dG9ucyAuaWNvbi1idXR0b24tZXhhbXBsZXMgYnV0dG9uIHtcXG4gICAgbWFyZ2luLWxlZnQ6IDFyZW07IH1cXG4gIC5uYi10aGVtZS1kZWZhdWx0IDpob3N0IG5neC1kZWZhdWx0LWJ1dHRvbnMgL2RlZXAvIG5iLWNhcmQtaGVhZGVyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOyB9XFxuICAubmItdGhlbWUtZGVmYXVsdCA6aG9zdCBuZ3gtYmxvY2stbGV2ZWwtYnV0dG9ucyAvZGVlcC8gLmJ0bi1wcmltYXJ5IHtcXG4gICAgcGFkZGluZzogMC43NXJlbSAxcmVtOyB9IH1cXG5cXG4vKlxcbiAgICAgIDpob3N0IGNhbiBiZSBwcmVmaXhlZFxcbiAgICAgIGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi84ZDBlZTM0OTM5ZjE0YzA3ODc2ZDIyMmMyNWI0MDVlZDQ1OGEzNGQzL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDFcXG5cXG4gICAgICBXZSBoYXZlIHRvIHVzZSA6aG9zdCBpbnN0ZWQgb2YgOmhvc3QtY29udGV4dCgkdGhlbWUpLCB0byBiZSBhYmxlIHRvIHByZWZpeCB0aGVtZSBjbGFzc1xcbiAgICAgIHdpdGggc29tZXRoaW5nIGRlZmluZWQgaW5zaWRlIG9mIEBjb250ZW50LCBieSBwcmVmaXhpbmcgJi5cXG4gICAgICBGb3IgZXhhbXBsZSB0aGlzIHNjc3MgY29kZTpcXG4gICAgICAgIC5uYi10aGVtZS1kZWZhdWx0IHtcXG4gICAgICAgICAgLnNvbWUtc2VsZWN0b3IgJiB7XFxuICAgICAgICAgICAgLi4uXFxuICAgICAgICAgIH1cXG4gICAgICAgIH1cXG4gICAgICBXaWxsIHJlc3VsdCBpbiBuZXh0IGNzczpcXG4gICAgICAgIC5zb21lLXNlbGVjdG9yIC5uYi10aGVtZS1kZWZhdWx0IHtcXG4gICAgICAgICAgLi4uXFxuICAgICAgICB9XFxuXFxuICAgICAgSXQgZG9lc24ndCB3b3JrIHdpdGggOmhvc3QtY29udGV4dCBiZWNhdXNlIGFuZ3VsYXIgc3BsaXR0aW5nIGl0IGluIHR3byBzZWxlY3RvcnMgYW5kIHJlbW92ZXNcXG4gICAgICBwcmVmaXggaW4gb25lIG9mIHRoZSBzZWxlY3RvcnMuXFxuICAgICovXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAvZGVlcC8gLmNvbnRhaW5lci10aXRsZSB7XFxuICBjb2xvcjogI2ExYTFlNTtcXG4gIGZvbnQtZmFtaWx5OiBFeG87XFxuICBtYXJnaW4tYm90dG9tOiAwLjVyZW07IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLyAuaGVhZGVyIHtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLyAuc3ViaGVhZGVyIHtcXG4gIGZvbnQtc2l6ZTogMC43NXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiAzMDA7XFxuICBjb2xvcjogI2ExYTFlNTsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgL2RlZXAvIC5idG4tZGVtbyB7XFxuICB3aWR0aDogMTgwcHg7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLyAuc3RhdGUtY29udGFpbmVyIHtcXG4gIGRpc3BsYXk6IGZsZXg7IH1cXG4gIC5uYi10aGVtZS1jb3NtaWMgOmhvc3QgL2RlZXAvIC5zdGF0ZS1jb250YWluZXI6bm90KDpsYXN0LWNoaWxkKSB7XFxuICAgIG1hcmdpbi1ib3R0b206IDFyZW07IH1cXG4gIC5uYi10aGVtZS1jb3NtaWMgOmhvc3QgL2RlZXAvIC5zdGF0ZS1jb250YWluZXIgLnN0YXRlLXZhbHVlIHtcXG4gICAgd2lkdGg6IDUwcHg7XFxuICAgIGhlaWdodDogNTBweDtcXG4gICAgYm9yZGVyLXJhZGl1czogMC41cmVtOyB9XFxuICAubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLyAuc3RhdGUtY29udGFpbmVyIC5zdGF0ZS1kZXRhaWxzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgIGhlaWdodDogNTBweDsgfVxcblxcbltkaXI9bHRyXSAubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLyAuZXhhbXBsZS1jb250YWluZXIge1xcbiAgcGFkZGluZy1yaWdodDogMDsgfVxcblxcbltkaXI9cnRsXSAubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLyAuZXhhbXBsZS1jb250YWluZXIge1xcbiAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAvZGVlcC8gLmV4YW1wbGUtY29udGFpbmVyIC5jb250YWluZXItYnRuIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgL2RlZXAvIC5ibG9jay1sZXZlbC1idXR0b25zIC5idG4tZ3JvdXAge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzUuOThweCkge1xcbiAgLm5iLXRoZW1lLWNvc21pYyA6aG9zdCBuZ3gtZGVmYXVsdC1idXR0b25zIC9kZWVwLyBuYi1jYXJkLWhlYWRlciB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBsZWZ0OyB9XFxuICAgIC5uYi10aGVtZS1jb3NtaWMgOmhvc3Qgbmd4LWRlZmF1bHQtYnV0dG9ucyAvZGVlcC8gbmItY2FyZC1oZWFkZXIgc3BhbiB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfSB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDM5OS45OHB4KSB7XFxuICBbZGlyPWx0cl0gLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAvZGVlcC8uaWNvbi1idXR0b25zIC5pY29uLWJ1dHRvbi1leGFtcGxlcyBidXR0b24ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07IH1cXG4gIFtkaXI9cnRsXSAubmItdGhlbWUtY29zbWljIDpob3N0IC9kZWVwLy5pY29uLWJ1dHRvbnMgLmljb24tYnV0dG9uLWV4YW1wbGVzIGJ1dHRvbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtOyB9XFxuICAubmItdGhlbWUtY29zbWljIDpob3N0IG5neC1kZWZhdWx0LWJ1dHRvbnMgL2RlZXAvIG5iLWNhcmQtaGVhZGVyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOyB9XFxuICAubmItdGhlbWUtY29zbWljIDpob3N0IG5neC1ibG9jay1sZXZlbC1idXR0b25zIC9kZWVwLyAuYnRuLXByaW1hcnkge1xcbiAgICBwYWRkaW5nOiAwLjc1cmVtIDFyZW07IH0gfVxcblxcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC9kZWVwLyAuY29udGFpbmVyLXRpdGxlIHtcXG4gIGNvbG9yOiAjYTRhYmIzO1xcbiAgZm9udC1mYW1pbHk6IEV4bztcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgL2RlZXAvIC5oZWFkZXIge1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgL2RlZXAvIC5zdWJoZWFkZXIge1xcbiAgZm9udC1zaXplOiAwLjc1cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDMwMDtcXG4gIGNvbG9yOiAjYTRhYmIzOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAvZGVlcC8gLmJ0bi1kZW1vIHtcXG4gIHdpZHRoOiAxODBweDsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgL2RlZXAvIC5zdGF0ZS1jb250YWluZXIge1xcbiAgZGlzcGxheTogZmxleDsgfVxcbiAgLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAvZGVlcC8gLnN0YXRlLWNvbnRhaW5lcjpub3QoOmxhc3QtY2hpbGQpIHtcXG4gICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcbiAgLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAvZGVlcC8gLnN0YXRlLWNvbnRhaW5lciAuc3RhdGUtdmFsdWUge1xcbiAgICB3aWR0aDogNTBweDtcXG4gICAgaGVpZ2h0OiA1MHB4O1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjc1cmVtO1xcbiAgICBib3JkZXItcmFkaXVzOiAwLjc1cmVtOyB9XFxuICAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC9kZWVwLyAuc3RhdGUtY29udGFpbmVyIC5zdGF0ZS1kZXRhaWxzIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtO1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07XFxuICAgIGhlaWdodDogNTBweDsgfVxcblxcbltkaXI9bHRyXSAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC9kZWVwLyAuZXhhbXBsZS1jb250YWluZXIge1xcbiAgcGFkZGluZy1yaWdodDogMDsgfVxcblxcbltkaXI9cnRsXSAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC9kZWVwLyAuZXhhbXBsZS1jb250YWluZXIge1xcbiAgcGFkZGluZy1sZWZ0OiAwOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAvZGVlcC8gLmV4YW1wbGUtY29udGFpbmVyIC5jb250YWluZXItYnRuIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgL2RlZXAvIC5ibG9jay1sZXZlbC1idXR0b25zIC5idG4tZ3JvdXAge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcblxcbkBtZWRpYSAobWF4LXdpZHRoOiA1NzUuOThweCkge1xcbiAgLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCBuZ3gtZGVmYXVsdC1idXR0b25zIC9kZWVwLyBuYi1jYXJkLWhlYWRlciB7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBsZWZ0OyB9XFxuICAgIC5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3Qgbmd4LWRlZmF1bHQtYnV0dG9ucyAvZGVlcC8gbmItY2FyZC1oZWFkZXIgc3BhbiB7XFxuICAgICAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfSB9XFxuXFxuQG1lZGlhIChtYXgtd2lkdGg6IDM5OS45OHB4KSB7XFxuICBbZGlyPWx0cl0gLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAvZGVlcC8uaWNvbi1idXR0b25zIC5pY29uLWJ1dHRvbi1leGFtcGxlcyBidXR0b24ge1xcbiAgICBtYXJnaW4tcmlnaHQ6IDFyZW07IH1cXG4gIFtkaXI9cnRsXSAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC9kZWVwLy5pY29uLWJ1dHRvbnMgLmljb24tYnV0dG9uLWV4YW1wbGVzIGJ1dHRvbiB7XFxuICAgIG1hcmdpbi1sZWZ0OiAxcmVtOyB9XFxuICAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IG5neC1kZWZhdWx0LWJ1dHRvbnMgL2RlZXAvIG5iLWNhcmQtaGVhZGVyIHtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgbWFyZ2luLWJvdHRvbTogMC41cmVtOyB9XFxuICAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IG5neC1ibG9jay1sZXZlbC1idXR0b25zIC9kZWVwLyAuYnRuLXByaW1hcnkge1xcbiAgICBwYWRkaW5nOiAwLjc1cmVtIDFyZW07IH0gfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss":
/*!*********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss ***!
  \*********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n  .nb-theme-default :host nb-card-header .dropdown {\\n    flex-basis: 30%;\\n    min-width: 220px; }\\n\\n.nb-theme-default :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-default :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-default :host .primary-container .original {\\n  background-color: #8a7fff; }\\n\\n.nb-theme-default :host .primary-container .hover:hover, .nb-theme-default :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #9a91ff;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .primary-container .active:active, .nb-theme-default :host .primary-container .active.active, .nb-theme-default :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #776ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #8a7fff; }\\n\\n.nb-theme-default :host .success-container .original {\\n  background-color: #40dc7e; }\\n\\n.nb-theme-default :host .success-container .hover:hover, .nb-theme-default :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #5be190;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .success-container .active:active, .nb-theme-default :host .success-container .active.active, .nb-theme-default :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #37bd6c;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #40dc7e; }\\n\\n.nb-theme-default :host .warning-container .original {\\n  background-color: #ffa100; }\\n\\n.nb-theme-default :host .warning-container .hover:hover, .nb-theme-default :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffae24;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .warning-container .active:active, .nb-theme-default :host .warning-container .active.active, .nb-theme-default :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8a00;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa100; }\\n\\n.nb-theme-default :host .info-container .original {\\n  background-color: #4ca6ff; }\\n\\n.nb-theme-default :host .info-container .hover:hover, .nb-theme-default :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #65b2ff;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .info-container .active:active, .nb-theme-default :host .info-container .active.active, .nb-theme-default :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #418fdb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #4ca6ff; }\\n\\n.nb-theme-default :host .danger-container .original {\\n  background-color: #ff4c6a; }\\n\\n.nb-theme-default :host .danger-container .hover:hover, .nb-theme-default :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff657f;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .danger-container .active:active, .nb-theme-default :host .danger-container .active.active, .nb-theme-default :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db415b;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff4c6a; }\\n\\n.nb-theme-default :host .secondary-container .original {\\n  border: 2px solid #dadfe6; }\\n\\n.nb-theme-default :host .secondary-container .hover:hover, .nb-theme-default :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #dfe3ea;\\n  border-color: transparent; }\\n\\n.nb-theme-default :host .secondary-container .active:active, .nb-theme-default :host .secondary-container .active.active, .nb-theme-default :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #bbc0c6;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #dadfe6; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n  .nb-theme-cosmic :host nb-card-header .dropdown {\\n    flex-basis: 30%;\\n    min-width: 220px; }\\n\\n.nb-theme-cosmic :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-cosmic :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-cosmic :host .primary-container .original {\\n  background-color: #7659ff; }\\n\\n.nb-theme-cosmic :host .primary-container .hover:hover, .nb-theme-cosmic :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #8970ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .primary-container .active:active, .nb-theme-cosmic :host .primary-container .active.active, .nb-theme-cosmic :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #654ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .success-container .original {\\n  background-color: #00d977; }\\n\\n.nb-theme-cosmic :host .success-container .hover:hover, .nb-theme-cosmic :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #24de8a;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .success-container .active:active, .nb-theme-cosmic :host .success-container .active.active, .nb-theme-cosmic :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #00bb66;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #00d977; }\\n\\n.nb-theme-cosmic :host .warning-container .original {\\n  background-color: #ffa100; }\\n\\n.nb-theme-cosmic :host .warning-container .hover:hover, .nb-theme-cosmic :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffae24;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .warning-container .active:active, .nb-theme-cosmic :host .warning-container .active.active, .nb-theme-cosmic :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8a00;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa100; }\\n\\n.nb-theme-cosmic :host .info-container .original {\\n  background-color: #0088ff; }\\n\\n.nb-theme-cosmic :host .info-container .hover:hover, .nb-theme-cosmic :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #2499ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .info-container .active:active, .nb-theme-cosmic :host .info-container .active.active, .nb-theme-cosmic :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #0075db;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #0088ff; }\\n\\n.nb-theme-cosmic :host .danger-container .original {\\n  background-color: #ff386a; }\\n\\n.nb-theme-cosmic :host .danger-container .hover:hover, .nb-theme-cosmic :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff547f;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .danger-container .active:active, .nb-theme-cosmic :host .danger-container .active.active, .nb-theme-cosmic :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db305b;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff386a; }\\n\\n.nb-theme-cosmic :host .secondary-container .original {\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .hover:hover, .nb-theme-cosmic :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #8970ff;\\n  border-color: transparent; }\\n\\n.nb-theme-cosmic :host .secondary-container .active:active, .nb-theme-cosmic :host .secondary-container .active.active, .nb-theme-cosmic :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #654ddb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-cosmic :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #7659ff; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-header {\\n  display: flex;\\n  align-items: center;\\n  justify-content: space-between; }\\n  .nb-theme-corporate :host nb-card-header .dropdown {\\n    flex-basis: 30%;\\n    min-width: 220px; }\\n\\n.nb-theme-corporate :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-corporate :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n.nb-theme-corporate :host .primary-container .original {\\n  background-color: #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .hover:hover, .nb-theme-corporate :host .primary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #87aeff;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .primary-container .active:active, .nb-theme-corporate :host .primary-container .active.active, .nb-theme-corporate :host .primary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #638adb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .primary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #73a1ff; }\\n\\n.nb-theme-corporate :host .success-container .original {\\n  background-color: #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .hover:hover, .nb-theme-corporate :host .success-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #74d6e7;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .success-container .active:active, .nb-theme-corporate :host .success-container .active.active, .nb-theme-corporate :host .success-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #50b2c3;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .success-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #5dcfe3; }\\n\\n.nb-theme-corporate :host .warning-container .original {\\n  background-color: #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .hover:hover, .nb-theme-corporate :host .warning-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ffb080;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .warning-container .active:active, .nb-theme-corporate :host .warning-container .active.active, .nb-theme-corporate :host .warning-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db8c5c;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .warning-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ffa36b; }\\n\\n.nb-theme-corporate :host .info-container .original {\\n  background-color: #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .hover:hover, .nb-theme-corporate :host .info-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #c491ef;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .info-container .active:active, .nb-theme-corporate :host .info-container .active.active, .nb-theme-corporate :host .info-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #a06dcb;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .info-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ba7fec; }\\n\\n.nb-theme-corporate :host .danger-container .original {\\n  background-color: #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .hover:hover, .nb-theme-corporate :host .danger-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #ff8094;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .danger-container .active:active, .nb-theme-corporate :host .danger-container .active.active, .nb-theme-corporate :host .danger-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #db5c71;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .danger-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #ff6b83; }\\n\\n.nb-theme-corporate :host .secondary-container .original {\\n  border: 2px solid #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .hover:hover, .nb-theme-corporate :host .secondary-container .hover.hover {\\n  color: #ffffff;\\n  background-color: #f0f4f6;\\n  border-color: transparent; }\\n\\n.nb-theme-corporate :host .secondary-container .active:active, .nb-theme-corporate :host .secondary-container .active.active, .nb-theme-corporate :host .secondary-container .active:active:focus {\\n  color: #ffffff;\\n  background-color: #ccd0d3;\\n  border-color: transparent;\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .secondary-container.outline .original {\\n  background-color: transparent;\\n  border: 2px solid #edf2f5; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss":
/*!**********************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss ***!
  \**********************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host {\\n  text-align: center; }\\n  .nb-theme-default :host .dropdown,\\n  .nb-theme-default :host .dropup,\\n  .nb-theme-default :host .btn-group {\\n    margin-bottom: 1rem; }\\n  .nb-theme-default :host nb-card-body {\\n    overflow: visible; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host {\\n  text-align: center; }\\n  .nb-theme-cosmic :host .dropdown,\\n  .nb-theme-cosmic :host .dropup,\\n  .nb-theme-cosmic :host .btn-group {\\n    margin-bottom: 1rem; }\\n  .nb-theme-cosmic :host nb-card-body {\\n    overflow: visible; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host {\\n  text-align: center; }\\n  .nb-theme-corporate :host .dropdown,\\n  .nb-theme-corporate :host .dropup,\\n  .nb-theme-corporate :host .btn-group {\\n    margin-bottom: 1rem; }\\n  .nb-theme-corporate :host nb-card-body {\\n    overflow: visible; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss ***!
  \***************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-default :host .none {\\n  position: relative;\\n  transform: rotate(45deg); }\\n  .nb-theme-default :host .none::before, .nb-theme-default :host .none::after {\\n    position: absolute;\\n    content: '';\\n    background: #dadfe6; }\\n  .nb-theme-default :host .none::before {\\n    left: 50%;\\n    top: 10%;\\n    transform: translateX(-50%);\\n    width: 1px;\\n    height: 80%; }\\n  .nb-theme-default :host .none::after {\\n    top: 50%;\\n    left: 10%;\\n    transform: translateY(-50%);\\n    height: 1px;\\n    width: 80%; }\\n\\n.nb-theme-default :host .shadow {\\n  box-shadow: none; }\\n\\n.nb-theme-default :host .primary-container .color {\\n  background-color: #8a7fff; }\\n\\n.nb-theme-default :host .primary-container .gradient {\\n  background-image: linear-gradient(to right, #b57fff, #8a7fff); }\\n\\n.nb-theme-default :host .primary-container .glow {\\n  box-shadow: 0 0 0 0 #9f7fff; }\\n\\n.nb-theme-default :host .primary-container .bevel {\\n  box-shadow: 0 0 0 0 #896ddb; }\\n\\n.nb-theme-default :host .warning-container .color {\\n  background-color: #ffa100; }\\n\\n.nb-theme-default :host .warning-container .gradient {\\n  background-image: linear-gradient(to right, #ffcc00, #ffa100); }\\n\\n.nb-theme-default :host .warning-container .glow {\\n  box-shadow: 0 0 0 0 #ffb600; }\\n\\n.nb-theme-default :host .warning-container .bevel {\\n  box-shadow: 0 0 0 0 #db9d00; }\\n\\n.nb-theme-default :host .success-container .color {\\n  background-color: #40dc7e; }\\n\\n.nb-theme-default :host .success-container .gradient {\\n  background-image: linear-gradient(to right, #40dcb2, #40dc7e); }\\n\\n.nb-theme-default :host .success-container .glow {\\n  box-shadow: 0 0 0 0 #40dc98; }\\n\\n.nb-theme-default :host .success-container .bevel {\\n  box-shadow: 0 0 0 0 #37bd83; }\\n\\n.nb-theme-default :host .info-container .color {\\n  background-color: #4ca6ff; }\\n\\n.nb-theme-default :host .info-container .gradient {\\n  background-image: linear-gradient(to right, #4cc4ff, #4ca6ff); }\\n\\n.nb-theme-default :host .info-container .glow {\\n  box-shadow: 0 0 0 0 #4cb5ff; }\\n\\n.nb-theme-default :host .info-container .bevel {\\n  box-shadow: 0 0 0 0 #419cdb; }\\n\\n.nb-theme-default :host .danger-container .color {\\n  background-color: #ff4c6a; }\\n\\n.nb-theme-default :host .danger-container .gradient {\\n  background-image: linear-gradient(to right, #ff4ca6, #ff4c6a); }\\n\\n.nb-theme-default :host .danger-container .glow {\\n  box-shadow: 0 0 0 0 #ff4c88; }\\n\\n.nb-theme-default :host .danger-container .bevel {\\n  box-shadow: 0 0 0 0 #db4175; }\\n\\n.nb-theme-default :host .secondary-container .color {\\n  background-color: transparent; }\\n\\n.nb-theme-default :host .secondary-container .border {\\n  border: 2px solid #dadfe6; }\\n\\n.nb-theme-default :host .secondary-container .glow {\\n  box-shadow: 0 0 0 0 #dadde6; }\\n\\n.nb-theme-default :host .secondary-container .bevel {\\n  box-shadow: 0 0 0 0 #bbbec6; }\\n\\n.nb-theme-default :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-cosmic :host .none {\\n  position: relative;\\n  transform: rotate(45deg); }\\n  .nb-theme-cosmic :host .none::before, .nb-theme-cosmic :host .none::after {\\n    position: absolute;\\n    content: '';\\n    background: #342e73; }\\n  .nb-theme-cosmic :host .none::before {\\n    left: 50%;\\n    top: 10%;\\n    transform: translateX(-50%);\\n    width: 1px;\\n    height: 80%; }\\n  .nb-theme-cosmic :host .none::after {\\n    top: 50%;\\n    left: 10%;\\n    transform: translateY(-50%);\\n    height: 1px;\\n    width: 80%; }\\n\\n.nb-theme-cosmic :host .shadow {\\n  box-shadow: 0 4px 10px 0 rgba(33, 7, 77, 0.5); }\\n\\n.nb-theme-cosmic :host .primary-container .color {\\n  background-color: #7659ff; }\\n\\n.nb-theme-cosmic :host .primary-container .gradient {\\n  background-image: linear-gradient(to right, #ad59ff, #7659ff); }\\n\\n.nb-theme-cosmic :host .primary-container .glow {\\n  box-shadow: 0 2px 8px 0 #9259ff; }\\n\\n.nb-theme-cosmic :host .primary-container .bevel {\\n  box-shadow: 0 3px 0 0 #7e4ddb; }\\n\\n.nb-theme-cosmic :host .warning-container .color {\\n  background-color: #ffa100; }\\n\\n.nb-theme-cosmic :host .warning-container .gradient {\\n  background-image: linear-gradient(to right, #ffcc00, #ffa100); }\\n\\n.nb-theme-cosmic :host .warning-container .glow {\\n  box-shadow: 0 2px 8px 0 #ffb600; }\\n\\n.nb-theme-cosmic :host .warning-container .bevel {\\n  box-shadow: 0 3px 0 0 #db9d00; }\\n\\n.nb-theme-cosmic :host .success-container .color {\\n  background-color: #00d977; }\\n\\n.nb-theme-cosmic :host .success-container .gradient {\\n  background-image: linear-gradient(to right, #00d9bf, #00d977); }\\n\\n.nb-theme-cosmic :host .success-container .glow {\\n  box-shadow: 0 2px 8px 0 #00d99b; }\\n\\n.nb-theme-cosmic :host .success-container .bevel {\\n  box-shadow: 0 3px 0 0 #00bb85; }\\n\\n.nb-theme-cosmic :host .info-container .color {\\n  background-color: #0088ff; }\\n\\n.nb-theme-cosmic :host .info-container .gradient {\\n  background-image: linear-gradient(to right, #00b3ff, #0088ff); }\\n\\n.nb-theme-cosmic :host .info-container .glow {\\n  box-shadow: 0 2px 8px 0 #009dff; }\\n\\n.nb-theme-cosmic :host .info-container .bevel {\\n  box-shadow: 0 3px 0 0 #0087db; }\\n\\n.nb-theme-cosmic :host .danger-container .color {\\n  background-color: #ff386a; }\\n\\n.nb-theme-cosmic :host .danger-container .gradient {\\n  background-image: linear-gradient(to right, #ff38ac, #ff386a); }\\n\\n.nb-theme-cosmic :host .danger-container .glow {\\n  box-shadow: 0 2px 8px 0 #ff388b; }\\n\\n.nb-theme-cosmic :host .danger-container .bevel {\\n  box-shadow: 0 3px 0 0 #db3078; }\\n\\n.nb-theme-cosmic :host .secondary-container .color {\\n  background-color: transparent; }\\n\\n.nb-theme-cosmic :host .secondary-container .border {\\n  border: 2px solid #7659ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .glow {\\n  box-shadow: 0 2px 8px 0 #9259ff; }\\n\\n.nb-theme-cosmic :host .secondary-container .bevel {\\n  box-shadow: 0 3px 0 0 #7e4ddb; }\\n\\n.nb-theme-cosmic :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding-bottom: 0; }\\n\\n.nb-theme-corporate :host .none {\\n  position: relative;\\n  transform: rotate(45deg); }\\n  .nb-theme-corporate :host .none::before, .nb-theme-corporate :host .none::after {\\n    position: absolute;\\n    content: '';\\n    background: #dadfe6; }\\n  .nb-theme-corporate :host .none::before {\\n    left: 50%;\\n    top: 10%;\\n    transform: translateX(-50%);\\n    width: 1px;\\n    height: 80%; }\\n  .nb-theme-corporate :host .none::after {\\n    top: 50%;\\n    left: 10%;\\n    transform: translateY(-50%);\\n    height: 1px;\\n    width: 80%; }\\n\\n.nb-theme-corporate :host .shadow {\\n  box-shadow: none; }\\n\\n.nb-theme-corporate :host .primary-container .color {\\n  background-color: #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .gradient {\\n  background-image: linear-gradient(to right, #73a1ff, #73a1ff); }\\n\\n.nb-theme-corporate :host .primary-container .glow {\\n  box-shadow: 0 0 20px 0 #73a1ff; }\\n\\n.nb-theme-corporate :host .primary-container .bevel {\\n  box-shadow: 0 0 0 0 #638adb; }\\n\\n.nb-theme-corporate :host .warning-container .color {\\n  background-color: #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .gradient {\\n  background-image: linear-gradient(to right, #ffa36b, #ffa36b); }\\n\\n.nb-theme-corporate :host .warning-container .glow {\\n  box-shadow: 0 0 20px 0 #ffa36b; }\\n\\n.nb-theme-corporate :host .warning-container .bevel {\\n  box-shadow: 0 0 0 0 #db8c5c; }\\n\\n.nb-theme-corporate :host .success-container .color {\\n  background-color: #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .gradient {\\n  background-image: linear-gradient(to right, #5dcfe3, #5dcfe3); }\\n\\n.nb-theme-corporate :host .success-container .glow {\\n  box-shadow: 0 0 20px 0 #5dcfe3; }\\n\\n.nb-theme-corporate :host .success-container .bevel {\\n  box-shadow: 0 0 0 0 #50b2c3; }\\n\\n.nb-theme-corporate :host .info-container .color {\\n  background-color: #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .gradient {\\n  background-image: linear-gradient(to right, #ba7fec, #ba7fec); }\\n\\n.nb-theme-corporate :host .info-container .glow {\\n  box-shadow: 0 0 20px 0 #ba7fec; }\\n\\n.nb-theme-corporate :host .info-container .bevel {\\n  box-shadow: 0 0 0 0 #a06dcb; }\\n\\n.nb-theme-corporate :host .danger-container .color {\\n  background-color: #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .gradient {\\n  background-image: linear-gradient(to right, #ff6b83, #ff6b83); }\\n\\n.nb-theme-corporate :host .danger-container .glow {\\n  box-shadow: 0 0 20px 0 #ff6b83; }\\n\\n.nb-theme-corporate :host .danger-container .bevel {\\n  box-shadow: 0 0 0 0 #db5c71; }\\n\\n.nb-theme-corporate :host .secondary-container .color {\\n  background-color: #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .border {\\n  border: 2px solid #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .glow {\\n  box-shadow: 0 0 0 0 #edf2f5; }\\n\\n.nb-theme-corporate :host .secondary-container .bevel {\\n  box-shadow: 0 0 0 0 #ccd0d3; }\\n\\n.nb-theme-corporate :host .example-container {\\n  margin-bottom: 1.5rem; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9oZXJvLWJ1dHRvbnMvaGVyby1idXR0b25zLmNvbXBvbmVudC5zY3NzPzY0MDEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMscUhBQW9FO0FBQ3ZHOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyxzbkNBQXNuQywrR0FBK0csK0NBQStDLEVBQUUsZUFBZSxLQUFLLEdBQUcsNkNBQTZDLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyxzQkFBc0IsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHlFQUF5RSxVQUFVLDBEQUEwRCxVQUFVLDhiQUE4Yix3QkFBd0IsY0FBYyxHQUFHLHVGQUF1RixPQUFPLHlCQUF5QixNQUFNLEtBQUssR0FBRyxtbkNBQW1uQyxrSEFBa0gsRUFBRSxFQUFFLG1CQUFtQixTQUFTLE9BQU8sb3VFQUFvdUUsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLGtrRUFBa2tFLCtHQUErRywrQ0FBK0MsRUFBRSxlQUFlLEtBQUssR0FBRyw2Q0FBNkMsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHNCQUFzQixpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcseUVBQXlFLFVBQVUsMERBQTBELFVBQVUsOGJBQThiLHdCQUF3QixjQUFjLEdBQUcsdUZBQXVGLE9BQU8seUJBQXlCLE1BQU0sS0FBSyxHQUFHLG1uQ0FBbW5DLGtIQUFrSCxFQUFFLEVBQUUsbUJBQW1CLFNBQVMsT0FBTyxra0VBQWtrRSwrR0FBK0csK0NBQStDLEVBQUUsZUFBZSxLQUFLLEdBQUcsNkNBQTZDLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyxzQkFBc0IsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHlFQUF5RSxVQUFVLDBEQUEwRCxVQUFVLDhiQUE4Yix3QkFBd0IsY0FBYyxHQUFHLHVGQUF1RixPQUFPLHlCQUF5QixNQUFNLEtBQUssR0FBRyxtbkNBQW1uQyxrSEFBa0gsRUFBRSxFQUFFLG1CQUFtQixTQUFTLE9BQU8sa2tFQUFra0UsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLGtrRUFBa2tFLCtHQUErRywrQ0FBK0MsRUFBRSxlQUFlLEtBQUssR0FBRyw2Q0FBNkMsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHNCQUFzQixpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcseUVBQXlFLFVBQVUsMERBQTBELFVBQVUsOGJBQThiLHdCQUF3QixjQUFjLEdBQUcsdUZBQXVGLE9BQU8seUJBQXlCLE1BQU0sS0FBSyxHQUFHLG1uQ0FBbW5DLGtIQUFrSCxFQUFFLEVBQUUsbUJBQW1CLFNBQVMsT0FBTyxnNUVBQWc1RSw4QkFBOEIsOEJBQThCLFdBQVcsNEVBQTRFLDBCQUEwQiw2TEFBNkwsc0JBQXNCLEVBQUUsbUNBQW1DLHVCQUF1Qiw2QkFBNkIsRUFBRSxpRkFBaUYseUJBQXlCLGtCQUFrQiwwQkFBMEIsRUFBRSwyQ0FBMkMsZ0JBQWdCLGVBQWUsa0NBQWtDLGlCQUFpQixrQkFBa0IsRUFBRSwwQ0FBMEMsZUFBZSxnQkFBZ0Isa0NBQWtDLGtCQUFrQixpQkFBaUIsRUFBRSxxQ0FBcUMscUJBQXFCLEVBQUUsdURBQXVELDhCQUE4QixFQUFFLDBEQUEwRCxrRUFBa0UsRUFBRSxzREFBc0QsZ0NBQWdDLEVBQUUsdURBQXVELGdDQUFnQyxFQUFFLHVEQUF1RCw4QkFBOEIsRUFBRSwwREFBMEQsa0VBQWtFLEVBQUUsc0RBQXNELGdDQUFnQyxFQUFFLHVEQUF1RCxnQ0FBZ0MsRUFBRSx1REFBdUQsOEJBQThCLEVBQUUsMERBQTBELGtFQUFrRSxFQUFFLHNEQUFzRCxnQ0FBZ0MsRUFBRSx1REFBdUQsZ0NBQWdDLEVBQUUsb0RBQW9ELDhCQUE4QixFQUFFLHVEQUF1RCxrRUFBa0UsRUFBRSxtREFBbUQsZ0NBQWdDLEVBQUUsb0RBQW9ELGdDQUFnQyxFQUFFLHNEQUFzRCw4QkFBOEIsRUFBRSx5REFBeUQsa0VBQWtFLEVBQUUscURBQXFELGdDQUFnQyxFQUFFLHNEQUFzRCxnQ0FBZ0MsRUFBRSx5REFBeUQsa0NBQWtDLEVBQUUsMERBQTBELDhCQUE4QixFQUFFLHdEQUF3RCxnQ0FBZ0MsRUFBRSx5REFBeUQsZ0NBQWdDLEVBQUUsZ0RBQWdELDBCQUEwQixFQUFFLHNZQUFzWSw4QkFBOEIsOEJBQThCLFdBQVcsNEVBQTRFLDBCQUEwQiw0TEFBNEwsc0JBQXNCLEVBQUUsa0NBQWtDLHVCQUF1Qiw2QkFBNkIsRUFBRSwrRUFBK0UseUJBQXlCLGtCQUFrQiwwQkFBMEIsRUFBRSwwQ0FBMEMsZ0JBQWdCLGVBQWUsa0NBQWtDLGlCQUFpQixrQkFBa0IsRUFBRSx5Q0FBeUMsZUFBZSxnQkFBZ0Isa0NBQWtDLGtCQUFrQixpQkFBaUIsRUFBRSxvQ0FBb0Msa0RBQWtELEVBQUUsc0RBQXNELDhCQUE4QixFQUFFLHlEQUF5RCxrRUFBa0UsRUFBRSxxREFBcUQsb0NBQW9DLEVBQUUsc0RBQXNELGtDQUFrQyxFQUFFLHNEQUFzRCw4QkFBOEIsRUFBRSx5REFBeUQsa0VBQWtFLEVBQUUscURBQXFELG9DQUFvQyxFQUFFLHNEQUFzRCxrQ0FBa0MsRUFBRSxzREFBc0QsOEJBQThCLEVBQUUseURBQXlELGtFQUFrRSxFQUFFLHFEQUFxRCxvQ0FBb0MsRUFBRSxzREFBc0Qsa0NBQWtDLEVBQUUsbURBQW1ELDhCQUE4QixFQUFFLHNEQUFzRCxrRUFBa0UsRUFBRSxrREFBa0Qsb0NBQW9DLEVBQUUsbURBQW1ELGtDQUFrQyxFQUFFLHFEQUFxRCw4QkFBOEIsRUFBRSx3REFBd0Qsa0VBQWtFLEVBQUUsb0RBQW9ELG9DQUFvQyxFQUFFLHFEQUFxRCxrQ0FBa0MsRUFBRSx3REFBd0Qsa0NBQWtDLEVBQUUseURBQXlELDhCQUE4QixFQUFFLHVEQUF1RCxvQ0FBb0MsRUFBRSx3REFBd0Qsa0NBQWtDLEVBQUUsK0NBQStDLDBCQUEwQixFQUFFLHNZQUFzWSw4QkFBOEIsOEJBQThCLFdBQVcsNEVBQTRFLDBCQUEwQiwrTEFBK0wsc0JBQXNCLEVBQUUscUNBQXFDLHVCQUF1Qiw2QkFBNkIsRUFBRSxxRkFBcUYseUJBQXlCLGtCQUFrQiwwQkFBMEIsRUFBRSw2Q0FBNkMsZ0JBQWdCLGVBQWUsa0NBQWtDLGlCQUFpQixrQkFBa0IsRUFBRSw0Q0FBNEMsZUFBZSxnQkFBZ0Isa0NBQWtDLGtCQUFrQixpQkFBaUIsRUFBRSx1Q0FBdUMscUJBQXFCLEVBQUUseURBQXlELDhCQUE4QixFQUFFLDREQUE0RCxrRUFBa0UsRUFBRSx3REFBd0QsbUNBQW1DLEVBQUUseURBQXlELGdDQUFnQyxFQUFFLHlEQUF5RCw4QkFBOEIsRUFBRSw0REFBNEQsa0VBQWtFLEVBQUUsd0RBQXdELG1DQUFtQyxFQUFFLHlEQUF5RCxnQ0FBZ0MsRUFBRSx5REFBeUQsOEJBQThCLEVBQUUsNERBQTRELGtFQUFrRSxFQUFFLHdEQUF3RCxtQ0FBbUMsRUFBRSx5REFBeUQsZ0NBQWdDLEVBQUUsc0RBQXNELDhCQUE4QixFQUFFLHlEQUF5RCxrRUFBa0UsRUFBRSxxREFBcUQsbUNBQW1DLEVBQUUsc0RBQXNELGdDQUFnQyxFQUFFLHdEQUF3RCw4QkFBOEIsRUFBRSwyREFBMkQsa0VBQWtFLEVBQUUsdURBQXVELG1DQUFtQyxFQUFFLHdEQUF3RCxnQ0FBZ0MsRUFBRSwyREFBMkQsOEJBQThCLEVBQUUsNERBQTRELDhCQUE4QixFQUFFLDBEQUEwRCxnQ0FBZ0MsRUFBRSwyREFBMkQsZ0NBQWdDLEVBQUUsa0RBQWtELDBCQUEwQixFQUFFOztBQUV6aXVDIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL2hlcm8tYnV0dG9ucy9oZXJvLWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBpcyBhIHN0YXJ0aW5nIHBvaW50IHdoZXJlIHdlIGRlY2xhcmUgdGhlIG1hcHMgb2YgdGhlbWVzIGFuZCBnbG9iYWxseSBhdmFpbGFibGUgZnVuY3Rpb25zL21peGluc1xcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBUaGlzIG1peGluIGdlbmVyYXRlcyBrZXlmYW1lcy5cXG4gKiBCZWNhdXNlIG9mIGFsbCBrZXlmcmFtZXMgY2FuJ3QgYmUgc2NvcGVkLFxcbiAqIHdlIG5lZWQgdG8gcHV0cyB1bmlxdWUgbmFtZSBpbiBlYWNoIGJ0bi1wdWxzZSBjYWxsLlxcbiAqL1xcbi8qXFxuXFxuQWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXNjb3BpbmctMS8jaG9zdC1zZWxlY3RvcilcXG46aG9zdCBhbmQgOmhvc3QtY29udGV4dCBhcmUgcHNldWRvLWNsYXNzZXMuIFNvIHdlIGFzc3VtZSB0aGV5IGNvdWxkIGJlIGNvbWJpbmVkLFxcbmxpa2Ugb3RoZXIgcHNldWRvLWNsYXNzZXMsIGV2ZW4gc2FtZSBvbmVzLlxcbkZvciBleGFtcGxlOiAnOm50aC1vZi10eXBlKDJuKTpudGgtb2YtdHlwZShldmVuKScuXFxuXFxuSWRlYWwgc29sdXRpb24gd291bGQgYmUgdG8gcHJlcGVuZCBhbnkgc2VsZWN0b3Igd2l0aCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuXFxuVGhlbiBuZWJ1bGFyIGNvbXBvbmVudHMgd2lsbCBiZWhhdmUgYXMgYW4gaHRtbCBlbGVtZW50IGFuZCByZXNwb25kIHRvIFtkaXJdIGF0dHJpYnV0ZSBvbiBhbnkgbGV2ZWwsXFxuc28gZGlyZWN0aW9uIGNvdWxkIGJlIG92ZXJyaWRkZW4gb24gYW55IGNvbXBvbmVudCBsZXZlbC5cXG5cXG5JbXBsZW1lbnRhdGlvbiBjb2RlOlxcblxcbkBtaXhpbiBuYi1ydGwoKSB7XFxuICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICBAYXQtcm9vdCB7c2VsZWN0b3ItYXBwZW5kKCc6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSknLCAmKX0ge1xcbiAgICBAY29udGVudDtcXG4gIH1cXG59XFxuXFxuQW5kIHdoZW4gd2UgY2FsbCBpdCBzb21ld2hlcmU6XFxuXFxuOmhvc3Qge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuOmhvc3QtY29udGV4dCguLi4pIHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcblxcblJlc3VsdCB3aWxsIGxvb2sgbGlrZTpcXG5cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG5cXG4qXFxuICBTaWRlIG5vdGU6XFxuICA6aG9zdC1jb250ZXh0KCk6aG9zdCBzZWxlY3RvciBhcmUgdmFsaWQuIGh0dHBzOi8vbGlzdHMudzMub3JnL0FyY2hpdmVzL1B1YmxpYy93d3ctc3R5bGUvMjAxNUZlYi8wMzA1Lmh0bWxcXG5cXG4gIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSBzaG91bGQgbWF0Y2ggYW55IHBlcm11dGF0aW9uLFxcbiAgc28gb3JkZXIgaXMgbm90IGltcG9ydGFudC5cXG4qXFxuXFxuXFxuQ3VycmVudGx5LCB0aGVyZSdyZSB0d28gcHJvYmxlbXMgd2l0aCB0aGlzIGFwcHJvYWNoOlxcblxcbkZpcnN0LCBpcyB0aGF0IHdlIGNhbid0IGNvbWJpbmUgOmhvc3QsIDpob3N0LWNvbnRleHQuIEFuZ3VsYXIgYnVncyAjMTQzNDksICMxOTE5OS5cXG5Gb3IgdGhlIG1vbWVudCBvZiB3cml0aW5nLCB0aGUgb25seSBwb3NzaWJsZSB3YXkgaXM6XFxuOmhvc3Qge1xcbiAgOmhvc3QtY29udGV4dCguLi4pIHtcXG4gICAgLi4uXFxuICB9XFxufVxcbkl0IGRvZXNuJ3Qgd29yayBmb3IgdXMgYmVjYXVzZSBtaXhpbiBjb3VsZCBiZSBjYWxsZWQgc29tZXdoZXJlIGRlZXBlciwgbGlrZTpcXG46aG9zdCB7XFxuICBwIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkgeyAuLi4gfVxcbiAgfVxcbn1cXG5XZSBhcmUgbm90IGFibGUgdG8gZ28gdXAgdG8gOmhvc3QgbGV2ZWwgdG8gcGxhY2UgY29udGVudCBwYXNzZWQgdG8gbWl4aW4uXFxuXFxuVGhlIHNlY29uZCBwcm9ibGVtIGlzIHRoYXQgd2Ugb25seSBjYW4gYmUgc3VyZSB0aGF0IHdlIGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gYW5vdGhlclxcbjpob3N0Lzpob3N0LWNvbnRleHQgcHNldWRvLWNsYXNzIHdoZW4gY2FsbGVkIGluIHRoZW1lIGZpbGVzICgqLnRoZW1lLnNjc3MpLlxcbiAgKlxcbiAgICBTaWRlIG5vdGU6XFxuICAgIEN1cnJlbnRseSwgbmItaW5zdGFsbC1jb21wb25lbnQgdXNlcyBhbm90aGVyIGFwcHJvYWNoIHdoZXJlIDpob3N0IHByZXBlbmRlZCB3aXRoIHRoZSB0aGVtZSBuYW1lXFxuICAgIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNWI5NjA3ODYyNGIwYTQ3NjBmMmRiY2Y2ZmRmMGJkNjI3OTFiZTViYi9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxKSxcXG4gICAgYnV0IGl0IHdhcyBtYWRlIHRvIGJlIGFibGUgdG8gdXNlIGN1cnJlbnQgcmVhbGl6YXRpb24gb2YgcnRsIGFuZCBpdCBjYW4gYmUgcmV3cml0dGVuIGJhY2sgdG9cXG4gICAgOmhvc3QtY29udGV4dCgkdGhlbWUpIG9uY2Ugd2Ugd2lsbCBiZSBhYmxlIHRvIHVzZSBtdWx0aXBsZSBzaGFkb3cgc2VsZWN0b3JzLlxcbiAgKlxcbkJ1dCB3aGVuIGl0J3MgY2FsbGVkIGluICouY29tcG9uZW50LnNjc3Mgd2UgY2FuJ3QgYmUgc3VyZSwgdGhhdCBzZWxlY3RvciBzdGFydHMgd2l0aCA6aG9zdC86aG9zdC1jb250ZXh0LFxcbmJlY2F1c2UgYW5ndWxhciBhbGxvd3Mgb21pdHRpbmcgcHNldWRvLWNsYXNzZXMgaWYgd2UgZG9uJ3QgbmVlZCB0byBzdHlsZSA6aG9zdCBjb21wb25lbnQgaXRzZWxmLlxcbldlIGNhbiBicmVhayBzdWNoIHNlbGVjdG9ycywgYnkganVzdCBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIHRoZW0uXFxuICAqKipcXG4gICAgUG9zc2libGUgc29sdXRpb25cXG4gICAgY2hlY2sgaWYgd2UgaW4gdGhlbWUgYnkgc29tZSB0aGVtZSB2YXJpYWJsZXMgYW5kIGlmIHNvIGFwcGVuZCwgb3RoZXJ3aXNlIG5lc3QgbGlrZVxcbiAgICBAYXQtcm9vdCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkge1xcbiAgICAgIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAgICAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICAgICAgeyZ9IHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICBXaGF0IGlmIDpob3N0IHNwZWNpZmllZD8gQ2FuIHdlIGFkZCBzcGFjZSBpbiA6aG9zdC1jb250ZXh0KC4uLikgOmhvc3Q/XFxuICAgIE9yIG1heWJlIGFkZCA6aG9zdCBzZWxlY3RvciBhbnl3YXk/IElmIG11bHRpcGxlIDpob3N0IHNlbGVjdG9ycyBhcmUgYWxsb3dlZFxcbiAgKioqXFxuXFxuXFxuUHJvYmxlbXMgd2l0aCB0aGUgY3VycmVudCBhcHByb2FjaC5cXG5cXG4xLiBEaXJlY3Rpb24gY2FuIGJlIGFwcGxpZWQgb25seSBvbiBkb2N1bWVudCBsZXZlbCwgYmVjYXVzZSBtaXhpbiBwcmVwZW5kcyB0aGVtZSBjbGFzcyxcXG53aGljaCBwbGFjZWQgb24gdGhlIGJvZHkuXFxuMi4gKi5jb21wb25lbnQuc2NzcyBzdHlsZXMgc2hvdWxkIGJlIGluIDpob3N0IHNlbGVjdG9yLiBPdGhlcndpc2UgYW5ndWxhciB3aWxsIGFkZCBob3N0XFxuYXR0cmlidXRlIHRvIFtkaXI9cnRsXSBhdHRyaWJ1dGUgYXMgd2VsbC5cXG5cXG5cXG5HZW5lcmFsIHByb2JsZW1zLlxcblxcbkx0ciBpcyBkZWZhdWx0IGRvY3VtZW50IGRpcmVjdGlvbiwgYnV0IGZvciBwcm9wZXIgd29yayBvZiBuYi1sdHIgKG1lYW5zIGx0ciBvbmx5KSxcXG5bZGlyPWx0cl0gc2hvdWxkIGJlIHNwZWNpZmllZCBhdCBsZWFzdCBzb21ld2hlcmUuICc6bm90KFtkaXI9cnRsXScgbm90IGFwcGxpY2FibGUgaGVyZSxcXG5iZWNhdXNlIGl0J3Mgc2F0aXNmeSBhbnkgcGFyZW50LCB0aGF0IGRvbid0IGhhdmUgW2Rpcj1ydGxdIGF0dHJpYnV0ZS5cXG5QcmV2aW91cyBhcHByb2FjaCB3YXMgdG8gdXNlIHNpbmdsZSBydGwgbWl4aW4gYW5kIHJlc2V0IGx0ciBwcm9wZXJ0aWVzIHRvIGluaXRpYWwgdmFsdWUuXFxuQnV0IHNvbWV0aW1lcyBpdCdzIGhhcmQgdG8gZmluZCwgd2hhdCB0aGUgcHJldmlvdXMgdmFsdWUgc2hvdWxkIGJlLiBBbmQgc3VjaCBtaXhpbiBjYWxsIGxvb2tzIHRvbyB2ZXJib3NlLlxcbiovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCBuYi1jYXJkLWJvZHkge1xcbiAgcGFkZGluZy1ib3R0b206IDA7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAubm9uZSB7XFxuICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSg0NWRlZyk7IH1cXG4gIC5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5ub25lOjpiZWZvcmUsIC5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5ub25lOjphZnRlciB7XFxuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gICAgY29udGVudDogJyc7XFxuICAgIGJhY2tncm91bmQ6ICNkYWRmZTY7IH1cXG4gIC5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5ub25lOjpiZWZvcmUge1xcbiAgICBsZWZ0OiA1MCU7XFxuICAgIHRvcDogMTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTUwJSk7XFxuICAgIHdpZHRoOiAxcHg7XFxuICAgIGhlaWdodDogODAlOyB9XFxuICAubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAubm9uZTo6YWZ0ZXIge1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogMTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIGhlaWdodDogMXB4O1xcbiAgICB3aWR0aDogODAlOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnNoYWRvdyB7XFxuICBib3gtc2hhZG93OiBub25lOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnByaW1hcnktY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjOGE3ZmZmOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnByaW1hcnktY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNiNTdmZmYsICM4YTdmZmYpOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnByaW1hcnktY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgIzlmN2ZmZjsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5wcmltYXJ5LWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCAjODk2ZGRiOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLndhcm5pbmctY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZhMTAwOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLndhcm5pbmctY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZmNjMDAsICNmZmExMDApOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLndhcm5pbmctY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgI2ZmYjYwMDsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC53YXJuaW5nLWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCAjZGI5ZDAwOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNDBkYzdlOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICM0MGRjYjIsICM0MGRjN2UpOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgIzQwZGM5ODsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5zdWNjZXNzLWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCAjMzdiZDgzOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLmluZm8tY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNGNhNmZmOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLmluZm8tY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICM0Y2M0ZmYsICM0Y2E2ZmYpOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLmluZm8tY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgIzRjYjVmZjsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5pbmZvLWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCAjNDE5Y2RiOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLmRhbmdlci1jb250YWluZXIgLmNvbG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjRjNmE7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuZGFuZ2VyLWNvbnRhaW5lciAuZ3JhZGllbnQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmY0Y2E2LCAjZmY0YzZhKTsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5kYW5nZXItY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgI2ZmNGM4ODsgfVxcblxcbi5uYi10aGVtZS1kZWZhdWx0IDpob3N0IC5kYW5nZXItY29udGFpbmVyIC5iZXZlbCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwICNkYjQxNzU7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuc2Vjb25kYXJ5LWNvbnRhaW5lciAuY29sb3Ige1xcbiAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuc2Vjb25kYXJ5LWNvbnRhaW5lciAuYm9yZGVyIHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNkYWRmZTY7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuc2Vjb25kYXJ5LWNvbnRhaW5lciAuZ2xvdyB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwICNkYWRkZTY7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuc2Vjb25kYXJ5LWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCAjYmJiZWM2OyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLmV4YW1wbGUtY29udGFpbmVyIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxcblxcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IG5iLWNhcmQtYm9keSB7XFxuICBwYWRkaW5nLWJvdHRvbTogMDsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLm5vbmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XFxuICAubmItdGhlbWUtY29zbWljIDpob3N0IC5ub25lOjpiZWZvcmUsIC5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLm5vbmU6OmFmdGVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgYmFja2dyb3VuZDogIzM0MmU3MzsgfVxcbiAgLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAubm9uZTo6YmVmb3JlIHtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0b3A6IDEwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbiAgICB3aWR0aDogMXB4O1xcbiAgICBoZWlnaHQ6IDgwJTsgfVxcbiAgLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAubm9uZTo6YWZ0ZXIge1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogMTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIGhlaWdodDogMXB4O1xcbiAgICB3aWR0aDogODAlOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuc2hhZG93IHtcXG4gIGJveC1zaGFkb3c6IDAgNHB4IDEwcHggMCByZ2JhKDMzLCA3LCA3NywgMC41KTsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLnByaW1hcnktY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjNzY1OWZmOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAucHJpbWFyeS1jb250YWluZXIgLmdyYWRpZW50IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2FkNTlmZiwgIzc2NTlmZik7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5wcmltYXJ5LWNvbnRhaW5lciAuZ2xvdyB7XFxuICBib3gtc2hhZG93OiAwIDJweCA4cHggMCAjOTI1OWZmOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAucHJpbWFyeS1jb250YWluZXIgLmJldmVsIHtcXG4gIGJveC1zaGFkb3c6IDAgM3B4IDAgMCAjN2U0ZGRiOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAud2FybmluZy1jb250YWluZXIgLmNvbG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZmExMDA7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC53YXJuaW5nLWNvbnRhaW5lciAuZ3JhZGllbnQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjZmZjYzAwLCAjZmZhMTAwKTsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLndhcm5pbmctY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCAwICNmZmI2MDA7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC53YXJuaW5nLWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAzcHggMCAwICNkYjlkMDA7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5zdWNjZXNzLWNvbnRhaW5lciAuY29sb3Ige1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzAwZDk3NzsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICMwMGQ5YmYsICMwMGQ5NzcpOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuc3VjY2Vzcy1jb250YWluZXIgLmdsb3cge1xcbiAgYm94LXNoYWRvdzogMCAycHggOHB4IDAgIzAwZDk5YjsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5iZXZlbCB7XFxuICBib3gtc2hhZG93OiAwIDNweCAwIDAgIzAwYmI4NTsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLmluZm8tY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjMDA4OGZmOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuaW5mby1jb250YWluZXIgLmdyYWRpZW50IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgIzAwYjNmZiwgIzAwODhmZik7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5pbmZvLWNvbnRhaW5lciAuZ2xvdyB7XFxuICBib3gtc2hhZG93OiAwIDJweCA4cHggMCAjMDA5ZGZmOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuaW5mby1jb250YWluZXIgLmJldmVsIHtcXG4gIGJveC1zaGFkb3c6IDAgM3B4IDAgMCAjMDA4N2RiOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuZGFuZ2VyLWNvbnRhaW5lciAuY29sb3Ige1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmMzg2YTsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLmRhbmdlci1jb250YWluZXIgLmdyYWRpZW50IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2ZmMzhhYywgI2ZmMzg2YSk7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5kYW5nZXItY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCAwICNmZjM4OGI7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5kYW5nZXItY29udGFpbmVyIC5iZXZlbCB7XFxuICBib3gtc2hhZG93OiAwIDNweCAwIDAgI2RiMzA3ODsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLnNlY29uZGFyeS1jb250YWluZXIgLmNvbG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6IHRyYW5zcGFyZW50OyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuc2Vjb25kYXJ5LWNvbnRhaW5lciAuYm9yZGVyIHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICM3NjU5ZmY7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5zZWNvbmRhcnktY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMnB4IDhweCAwICM5MjU5ZmY7IH1cXG5cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IC5zZWNvbmRhcnktY29udGFpbmVyIC5iZXZlbCB7XFxuICBib3gtc2hhZG93OiAwIDNweCAwIDAgIzdlNGRkYjsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLmV4YW1wbGUtY29udGFpbmVyIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxcblxcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IG5iLWNhcmQtYm9keSB7XFxuICBwYWRkaW5nLWJvdHRvbTogMDsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLm5vbmUge1xcbiAgcG9zaXRpb246IHJlbGF0aXZlO1xcbiAgdHJhbnNmb3JtOiByb3RhdGUoNDVkZWcpOyB9XFxuICAubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5ub25lOjpiZWZvcmUsIC5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLm5vbmU6OmFmdGVyIHtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBjb250ZW50OiAnJztcXG4gICAgYmFja2dyb3VuZDogI2RhZGZlNjsgfVxcbiAgLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAubm9uZTo6YmVmb3JlIHtcXG4gICAgbGVmdDogNTAlO1xcbiAgICB0b3A6IDEwJTtcXG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKC01MCUpO1xcbiAgICB3aWR0aDogMXB4O1xcbiAgICBoZWlnaHQ6IDgwJTsgfVxcbiAgLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAubm9uZTo6YWZ0ZXIge1xcbiAgICB0b3A6IDUwJTtcXG4gICAgbGVmdDogMTAlO1xcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XFxuICAgIGhlaWdodDogMXB4O1xcbiAgICB3aWR0aDogODAlOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuc2hhZG93IHtcXG4gIGJveC1zaGFkb3c6IG5vbmU7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5wcmltYXJ5LWNvbnRhaW5lciAuY29sb3Ige1xcbiAgYmFja2dyb3VuZC1jb2xvcjogIzczYTFmZjsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLnByaW1hcnktY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICM3M2ExZmYsICM3M2ExZmYpOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAucHJpbWFyeS1jb250YWluZXIgLmdsb3cge1xcbiAgYm94LXNoYWRvdzogMCAwIDIwcHggMCAjNzNhMWZmOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAucHJpbWFyeS1jb250YWluZXIgLmJldmVsIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgIzYzOGFkYjsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLndhcm5pbmctY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZmZhMzZiOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAud2FybmluZy1jb250YWluZXIgLmdyYWRpZW50IHtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IGxpbmVhci1ncmFkaWVudCh0byByaWdodCwgI2ZmYTM2YiwgI2ZmYTM2Yik7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC53YXJuaW5nLWNvbnRhaW5lciAuZ2xvdyB7XFxuICBib3gtc2hhZG93OiAwIDAgMjBweCAwICNmZmEzNmI7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC53YXJuaW5nLWNvbnRhaW5lciAuYmV2ZWwge1xcbiAgYm94LXNoYWRvdzogMCAwIDAgMCAjZGI4YzVjOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuc3VjY2Vzcy1jb250YWluZXIgLmNvbG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICM1ZGNmZTM7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5zdWNjZXNzLWNvbnRhaW5lciAuZ3JhZGllbnQge1xcbiAgYmFja2dyb3VuZC1pbWFnZTogbGluZWFyLWdyYWRpZW50KHRvIHJpZ2h0LCAjNWRjZmUzLCAjNWRjZmUzKTsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAyMHB4IDAgIzVkY2ZlMzsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLnN1Y2Nlc3MtY29udGFpbmVyIC5iZXZlbCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwICM1MGIyYzM7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5pbmZvLWNvbnRhaW5lciAuY29sb3Ige1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2JhN2ZlYzsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLmluZm8tY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNiYTdmZWMsICNiYTdmZWMpOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuaW5mby1jb250YWluZXIgLmdsb3cge1xcbiAgYm94LXNoYWRvdzogMCAwIDIwcHggMCAjYmE3ZmVjOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuaW5mby1jb250YWluZXIgLmJldmVsIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgI2EwNmRjYjsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLmRhbmdlci1jb250YWluZXIgLmNvbG9yIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNmZjZiODM7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5kYW5nZXItY29udGFpbmVyIC5ncmFkaWVudCB7XFxuICBiYWNrZ3JvdW5kLWltYWdlOiBsaW5lYXItZ3JhZGllbnQodG8gcmlnaHQsICNmZjZiODMsICNmZjZiODMpOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuZGFuZ2VyLWNvbnRhaW5lciAuZ2xvdyB7XFxuICBib3gtc2hhZG93OiAwIDAgMjBweCAwICNmZjZiODM7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5kYW5nZXItY29udGFpbmVyIC5iZXZlbCB7XFxuICBib3gtc2hhZG93OiAwIDAgMCAwICNkYjVjNzE7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5zZWNvbmRhcnktY29udGFpbmVyIC5jb2xvciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZWRmMmY1OyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuc2Vjb25kYXJ5LWNvbnRhaW5lciAuYm9yZGVyIHtcXG4gIGJvcmRlcjogMnB4IHNvbGlkICNlZGYyZjU7IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5zZWNvbmRhcnktY29udGFpbmVyIC5nbG93IHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgI2VkZjJmNTsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLnNlY29uZGFyeS1jb250YWluZXIgLmJldmVsIHtcXG4gIGJveC1zaGFkb3c6IDAgMCAwIDAgI2NjZDBkMzsgfVxcblxcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgLmV4YW1wbGUtY29udGFpbmVyIHtcXG4gIG1hcmdpbi1ib3R0b206IDEuNXJlbTsgfVxcblwiLCBcIlwiXSk7XG5cbi8vIGV4cG9ydHNcbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss ***!
  \***************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"nb-card-body div:not(:last-child) {\\n  margin-bottom: 1rem; }\\n\\n.btn-with-icon-example {\\n  width: 100%; }\\n  .btn-with-icon-example .btn {\\n    width: 100%; }\\n\\n.btn-group:not(:last-child) {\\n  margin-bottom: 1rem; }\\n\\n.icon-button-examples {\\n  display: flex;\\n  justify-content: space-between; }\\n  .icon-button-examples button {\\n    min-width: 4rem; }\\n\\n.icon-button-examples:not(:last-child) {\\n  margin-bottom: 1rem; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9pY29uLWJ1dHRvbnMvaWNvbi1idXR0b25zLmNvbXBvbmVudC5zY3NzPzU2MmUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMscUhBQW9FO0FBQ3ZHOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyxzQ0FBc0Msd0JBQXdCLEVBQUUsNEJBQTRCLGdCQUFnQixFQUFFLGlDQUFpQyxrQkFBa0IsRUFBRSxpQ0FBaUMsd0JBQXdCLEVBQUUsMkJBQTJCLGtCQUFrQixtQ0FBbUMsRUFBRSxrQ0FBa0Msc0JBQXNCLEVBQUUsNENBQTRDLHdCQUF3QixFQUFFOztBQUV2YyIsImZpbGUiOiIuL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9pY29uLWJ1dHRvbnMvaWNvbi1idXR0b25zLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCJuYi1jYXJkLWJvZHkgZGl2Om5vdCg6bGFzdC1jaGlsZCkge1xcbiAgbWFyZ2luLWJvdHRvbTogMXJlbTsgfVxcblxcbi5idG4td2l0aC1pY29uLWV4YW1wbGUge1xcbiAgd2lkdGg6IDEwMCU7IH1cXG4gIC5idG4td2l0aC1pY29uLWV4YW1wbGUgLmJ0biB7XFxuICAgIHdpZHRoOiAxMDAlOyB9XFxuXFxuLmJ0bi1ncm91cDpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07IH1cXG5cXG4uaWNvbi1idXR0b24tZXhhbXBsZXMge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjsgfVxcbiAgLmljb24tYnV0dG9uLWV4YW1wbGVzIGJ1dHRvbiB7XFxuICAgIG1pbi13aWR0aDogNHJlbTsgfVxcblxcbi5pY29uLWJ1dHRvbi1leGFtcGxlczpub3QoOmxhc3QtY2hpbGQpIHtcXG4gIG1hcmdpbi1ib3R0b206IDFyZW07IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss":
/*!*****************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss ***!
  \*****************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0 0 29px;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between; }\\n\\n.nb-theme-default :host .shape-container {\\n  margin: 1.25rem 1.25rem 0; }\\n\\n.nb-theme-default :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-default :host .subheader {\\n  margin-bottom: 1rem;\\n  font-size: 0.875rem; }\\n  .nb-theme-default :host .subheader span:nth-child(2) {\\n    color: #2a2a2a;\\n    font-weight: 600; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0 0 29px;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between; }\\n\\n.nb-theme-cosmic :host .shape-container {\\n  margin: 1.25rem 1.25rem 0; }\\n\\n.nb-theme-cosmic :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-cosmic :host .subheader {\\n  margin-bottom: 1rem;\\n  font-size: 0.875rem; }\\n  .nb-theme-cosmic :host .subheader span:nth-child(2) {\\n    color: #ffffff;\\n    font-weight: 600; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0 0 29px;\\n  display: flex;\\n  flex-wrap: wrap;\\n  justify-content: space-between; }\\n\\n.nb-theme-corporate :host .shape-container {\\n  margin: 1.25rem 1.25rem 0; }\\n\\n.nb-theme-corporate :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-corporate :host .subheader {\\n  margin-bottom: 1rem;\\n  font-size: 0.875rem; }\\n  .nb-theme-corporate :host .subheader span:nth-child(2) {\\n    color: #181818;\\n    font-weight: 600; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss":
/*!***************************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss ***!
  \***************************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-default :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-default :host .size-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n.nb-theme-default :host .subheader {\\n  margin-bottom: 0.75rem;\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  color: #2a2a2a; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-cosmic :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-cosmic :host .size-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n.nb-theme-cosmic :host .subheader {\\n  margin-bottom: 0.75rem;\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  color: #ffffff; }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  padding: 0 1.25rem 1.25rem 0;\\n  display: flex;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-corporate :host .container-title {\\n  margin-bottom: 0.25rem; }\\n\\n.nb-theme-corporate :host .size-container {\\n  margin: 1.25rem 0 0 1.25rem; }\\n\\n.nb-theme-corporate :host .subheader {\\n  margin-bottom: 0.75rem;\\n  font-size: 0.875rem;\\n  font-weight: 500;\\n  color: #181818; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudC5zY3NzPzY0OTUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMkJBQTJCLG1CQUFPLENBQUMscUhBQW9FO0FBQ3ZHOzs7QUFHQTtBQUNBLGNBQWMsUUFBUyxzbkNBQXNuQywrR0FBK0csK0NBQStDLEVBQUUsZUFBZSxLQUFLLEdBQUcsNkNBQTZDLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyxzQkFBc0IsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHlFQUF5RSxVQUFVLDBEQUEwRCxVQUFVLDhiQUE4Yix3QkFBd0IsY0FBYyxHQUFHLHVGQUF1RixPQUFPLHlCQUF5QixNQUFNLEtBQUssR0FBRyxtbkNBQW1uQyxrSEFBa0gsRUFBRSxFQUFFLG1CQUFtQixTQUFTLE9BQU8sb3VFQUFvdUUsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLGtrRUFBa2tFLCtHQUErRywrQ0FBK0MsRUFBRSxlQUFlLEtBQUssR0FBRyw2Q0FBNkMsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHNCQUFzQixpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcseUVBQXlFLFVBQVUsMERBQTBELFVBQVUsOGJBQThiLHdCQUF3QixjQUFjLEdBQUcsdUZBQXVGLE9BQU8seUJBQXlCLE1BQU0sS0FBSyxHQUFHLG1uQ0FBbW5DLGtIQUFrSCxFQUFFLEVBQUUsbUJBQW1CLFNBQVMsT0FBTyxra0VBQWtrRSwrR0FBK0csK0NBQStDLEVBQUUsZUFBZSxLQUFLLEdBQUcsNkNBQTZDLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyxzQkFBc0IsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHlFQUF5RSxVQUFVLDBEQUEwRCxVQUFVLDhiQUE4Yix3QkFBd0IsY0FBYyxHQUFHLHVGQUF1RixPQUFPLHlCQUF5QixNQUFNLEtBQUssR0FBRyxtbkNBQW1uQyxrSEFBa0gsRUFBRSxFQUFFLG1CQUFtQixTQUFTLE9BQU8sa2tFQUFra0UsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLGtrRUFBa2tFLCtHQUErRywrQ0FBK0MsRUFBRSxlQUFlLEtBQUssR0FBRyw2Q0FBNkMsaUJBQWlCLHlCQUF5QixrQkFBa0IsS0FBSyxHQUFHLHNCQUFzQixpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcseUVBQXlFLFVBQVUsMERBQTBELFVBQVUsOGJBQThiLHdCQUF3QixjQUFjLEdBQUcsdUZBQXVGLE9BQU8seUJBQXlCLE1BQU0sS0FBSyxHQUFHLG1uQ0FBbW5DLGtIQUFrSCxFQUFFLEVBQUUsbUJBQW1CLFNBQVMsT0FBTyxnNUVBQWc1RSw4QkFBOEIsOEJBQThCLFdBQVcsNEVBQTRFLDBCQUEwQiw2TEFBNkwsaUNBQWlDLGtCQUFrQixvQkFBb0IsRUFBRSw4Q0FBOEMsMkJBQTJCLEVBQUUsNkNBQTZDLGdDQUFnQyxFQUFFLHdDQUF3QywyQkFBMkIsd0JBQXdCLHFCQUFxQixtQkFBbUIsRUFBRSxzWUFBc1ksOEJBQThCLDhCQUE4QixXQUFXLDRFQUE0RSwwQkFBMEIsNExBQTRMLGlDQUFpQyxrQkFBa0Isb0JBQW9CLEVBQUUsNkNBQTZDLDJCQUEyQixFQUFFLDRDQUE0QyxnQ0FBZ0MsRUFBRSx1Q0FBdUMsMkJBQTJCLHdCQUF3QixxQkFBcUIsbUJBQW1CLEVBQUUsc1lBQXNZLDhCQUE4Qiw4QkFBOEIsV0FBVyw0RUFBNEUsMEJBQTBCLCtMQUErTCxpQ0FBaUMsa0JBQWtCLG9CQUFvQixFQUFFLGdEQUFnRCwyQkFBMkIsRUFBRSwrQ0FBK0MsZ0NBQWdDLEVBQUUsMENBQTBDLDJCQUEyQix3QkFBd0IscUJBQXFCLG1CQUFtQixFQUFFOztBQUVyditCIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL3NpemUtYnV0dG9ucy9zaXplLWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnRzID0gbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKFwiLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvbGliL2Nzcy1iYXNlLmpzXCIpKGZhbHNlKTtcbi8vIGltcG9ydHNcblxuXG4vLyBtb2R1bGVcbmV4cG9ydHMucHVzaChbbW9kdWxlLmlkLCBcIi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBpcyBhIHN0YXJ0aW5nIHBvaW50IHdoZXJlIHdlIGRlY2xhcmUgdGhlIG1hcHMgb2YgdGhlbWVzIGFuZCBnbG9iYWxseSBhdmFpbGFibGUgZnVuY3Rpb25zL21peGluc1xcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBUaGlzIG1peGluIGdlbmVyYXRlcyBrZXlmYW1lcy5cXG4gKiBCZWNhdXNlIG9mIGFsbCBrZXlmcmFtZXMgY2FuJ3QgYmUgc2NvcGVkLFxcbiAqIHdlIG5lZWQgdG8gcHV0cyB1bmlxdWUgbmFtZSBpbiBlYWNoIGJ0bi1wdWxzZSBjYWxsLlxcbiAqL1xcbi8qXFxuXFxuQWNjb3JkaW5nIHRvIHRoZSBzcGVjaWZpY2F0aW9uIChodHRwczovL3d3dy53My5vcmcvVFIvY3NzLXNjb3BpbmctMS8jaG9zdC1zZWxlY3RvcilcXG46aG9zdCBhbmQgOmhvc3QtY29udGV4dCBhcmUgcHNldWRvLWNsYXNzZXMuIFNvIHdlIGFzc3VtZSB0aGV5IGNvdWxkIGJlIGNvbWJpbmVkLFxcbmxpa2Ugb3RoZXIgcHNldWRvLWNsYXNzZXMsIGV2ZW4gc2FtZSBvbmVzLlxcbkZvciBleGFtcGxlOiAnOm50aC1vZi10eXBlKDJuKTpudGgtb2YtdHlwZShldmVuKScuXFxuXFxuSWRlYWwgc29sdXRpb24gd291bGQgYmUgdG8gcHJlcGVuZCBhbnkgc2VsZWN0b3Igd2l0aCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkuXFxuVGhlbiBuZWJ1bGFyIGNvbXBvbmVudHMgd2lsbCBiZWhhdmUgYXMgYW4gaHRtbCBlbGVtZW50IGFuZCByZXNwb25kIHRvIFtkaXJdIGF0dHJpYnV0ZSBvbiBhbnkgbGV2ZWwsXFxuc28gZGlyZWN0aW9uIGNvdWxkIGJlIG92ZXJyaWRkZW4gb24gYW55IGNvbXBvbmVudCBsZXZlbC5cXG5cXG5JbXBsZW1lbnRhdGlvbiBjb2RlOlxcblxcbkBtaXhpbiBuYi1ydGwoKSB7XFxuICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICBAYXQtcm9vdCB7c2VsZWN0b3ItYXBwZW5kKCc6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSknLCAmKX0ge1xcbiAgICBAY29udGVudDtcXG4gIH1cXG59XFxuXFxuQW5kIHdoZW4gd2UgY2FsbCBpdCBzb21ld2hlcmU6XFxuXFxuOmhvc3Qge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuOmhvc3QtY29udGV4dCguLi4pIHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcblxcblJlc3VsdCB3aWxsIGxvb2sgbGlrZTpcXG5cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdCAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG5cXG4qXFxuICBTaWRlIG5vdGU6XFxuICA6aG9zdC1jb250ZXh0KCk6aG9zdCBzZWxlY3RvciBhcmUgdmFsaWQuIGh0dHBzOi8vbGlzdHMudzMub3JnL0FyY2hpdmVzL1B1YmxpYy93d3ctc3R5bGUvMjAxNUZlYi8wMzA1Lmh0bWxcXG5cXG4gIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSBzaG91bGQgbWF0Y2ggYW55IHBlcm11dGF0aW9uLFxcbiAgc28gb3JkZXIgaXMgbm90IGltcG9ydGFudC5cXG4qXFxuXFxuXFxuQ3VycmVudGx5LCB0aGVyZSdyZSB0d28gcHJvYmxlbXMgd2l0aCB0aGlzIGFwcHJvYWNoOlxcblxcbkZpcnN0LCBpcyB0aGF0IHdlIGNhbid0IGNvbWJpbmUgOmhvc3QsIDpob3N0LWNvbnRleHQuIEFuZ3VsYXIgYnVncyAjMTQzNDksICMxOTE5OS5cXG5Gb3IgdGhlIG1vbWVudCBvZiB3cml0aW5nLCB0aGUgb25seSBwb3NzaWJsZSB3YXkgaXM6XFxuOmhvc3Qge1xcbiAgOmhvc3QtY29udGV4dCguLi4pIHtcXG4gICAgLi4uXFxuICB9XFxufVxcbkl0IGRvZXNuJ3Qgd29yayBmb3IgdXMgYmVjYXVzZSBtaXhpbiBjb3VsZCBiZSBjYWxsZWQgc29tZXdoZXJlIGRlZXBlciwgbGlrZTpcXG46aG9zdCB7XFxuICBwIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkgeyAuLi4gfVxcbiAgfVxcbn1cXG5XZSBhcmUgbm90IGFibGUgdG8gZ28gdXAgdG8gOmhvc3QgbGV2ZWwgdG8gcGxhY2UgY29udGVudCBwYXNzZWQgdG8gbWl4aW4uXFxuXFxuVGhlIHNlY29uZCBwcm9ibGVtIGlzIHRoYXQgd2Ugb25seSBjYW4gYmUgc3VyZSB0aGF0IHdlIGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gYW5vdGhlclxcbjpob3N0Lzpob3N0LWNvbnRleHQgcHNldWRvLWNsYXNzIHdoZW4gY2FsbGVkIGluIHRoZW1lIGZpbGVzICgqLnRoZW1lLnNjc3MpLlxcbiAgKlxcbiAgICBTaWRlIG5vdGU6XFxuICAgIEN1cnJlbnRseSwgbmItaW5zdGFsbC1jb21wb25lbnQgdXNlcyBhbm90aGVyIGFwcHJvYWNoIHdoZXJlIDpob3N0IHByZXBlbmRlZCB3aXRoIHRoZSB0aGVtZSBuYW1lXFxuICAgIChodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvNWI5NjA3ODYyNGIwYTQ3NjBmMmRiY2Y2ZmRmMGJkNjI3OTFiZTViYi9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxKSxcXG4gICAgYnV0IGl0IHdhcyBtYWRlIHRvIGJlIGFibGUgdG8gdXNlIGN1cnJlbnQgcmVhbGl6YXRpb24gb2YgcnRsIGFuZCBpdCBjYW4gYmUgcmV3cml0dGVuIGJhY2sgdG9cXG4gICAgOmhvc3QtY29udGV4dCgkdGhlbWUpIG9uY2Ugd2Ugd2lsbCBiZSBhYmxlIHRvIHVzZSBtdWx0aXBsZSBzaGFkb3cgc2VsZWN0b3JzLlxcbiAgKlxcbkJ1dCB3aGVuIGl0J3MgY2FsbGVkIGluICouY29tcG9uZW50LnNjc3Mgd2UgY2FuJ3QgYmUgc3VyZSwgdGhhdCBzZWxlY3RvciBzdGFydHMgd2l0aCA6aG9zdC86aG9zdC1jb250ZXh0LFxcbmJlY2F1c2UgYW5ndWxhciBhbGxvd3Mgb21pdHRpbmcgcHNldWRvLWNsYXNzZXMgaWYgd2UgZG9uJ3QgbmVlZCB0byBzdHlsZSA6aG9zdCBjb21wb25lbnQgaXRzZWxmLlxcbldlIGNhbiBicmVhayBzdWNoIHNlbGVjdG9ycywgYnkganVzdCBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIHRoZW0uXFxuICAqKipcXG4gICAgUG9zc2libGUgc29sdXRpb25cXG4gICAgY2hlY2sgaWYgd2UgaW4gdGhlbWUgYnkgc29tZSB0aGVtZSB2YXJpYWJsZXMgYW5kIGlmIHNvIGFwcGVuZCwgb3RoZXJ3aXNlIG5lc3QgbGlrZVxcbiAgICBAYXQtcm9vdCA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkge1xcbiAgICAgIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAgICAgLy8gaXQgd29ya3MgaW4gY29tbWVudHMgYW5kIHdlIGNhbid0IHVzZSBpdCBoZXJlXFxuICAgICAgeyZ9IHtcXG4gICAgICAgIEBjb250ZW50O1xcbiAgICAgIH1cXG4gICAgfVxcbiAgICBXaGF0IGlmIDpob3N0IHNwZWNpZmllZD8gQ2FuIHdlIGFkZCBzcGFjZSBpbiA6aG9zdC1jb250ZXh0KC4uLikgOmhvc3Q/XFxuICAgIE9yIG1heWJlIGFkZCA6aG9zdCBzZWxlY3RvciBhbnl3YXk/IElmIG11bHRpcGxlIDpob3N0IHNlbGVjdG9ycyBhcmUgYWxsb3dlZFxcbiAgKioqXFxuXFxuXFxuUHJvYmxlbXMgd2l0aCB0aGUgY3VycmVudCBhcHByb2FjaC5cXG5cXG4xLiBEaXJlY3Rpb24gY2FuIGJlIGFwcGxpZWQgb25seSBvbiBkb2N1bWVudCBsZXZlbCwgYmVjYXVzZSBtaXhpbiBwcmVwZW5kcyB0aGVtZSBjbGFzcyxcXG53aGljaCBwbGFjZWQgb24gdGhlIGJvZHkuXFxuMi4gKi5jb21wb25lbnQuc2NzcyBzdHlsZXMgc2hvdWxkIGJlIGluIDpob3N0IHNlbGVjdG9yLiBPdGhlcndpc2UgYW5ndWxhciB3aWxsIGFkZCBob3N0XFxuYXR0cmlidXRlIHRvIFtkaXI9cnRsXSBhdHRyaWJ1dGUgYXMgd2VsbC5cXG5cXG5cXG5HZW5lcmFsIHByb2JsZW1zLlxcblxcbkx0ciBpcyBkZWZhdWx0IGRvY3VtZW50IGRpcmVjdGlvbiwgYnV0IGZvciBwcm9wZXIgd29yayBvZiBuYi1sdHIgKG1lYW5zIGx0ciBvbmx5KSxcXG5bZGlyPWx0cl0gc2hvdWxkIGJlIHNwZWNpZmllZCBhdCBsZWFzdCBzb21ld2hlcmUuICc6bm90KFtkaXI9cnRsXScgbm90IGFwcGxpY2FibGUgaGVyZSxcXG5iZWNhdXNlIGl0J3Mgc2F0aXNmeSBhbnkgcGFyZW50LCB0aGF0IGRvbid0IGhhdmUgW2Rpcj1ydGxdIGF0dHJpYnV0ZS5cXG5QcmV2aW91cyBhcHByb2FjaCB3YXMgdG8gdXNlIHNpbmdsZSBydGwgbWl4aW4gYW5kIHJlc2V0IGx0ciBwcm9wZXJ0aWVzIHRvIGluaXRpYWwgdmFsdWUuXFxuQnV0IHNvbWV0aW1lcyBpdCdzIGhhcmQgdG8gZmluZCwgd2hhdCB0aGUgcHJldmlvdXMgdmFsdWUgc2hvdWxkIGJlLiBBbmQgc3VjaCBtaXhpbiBjYWxsIGxvb2tzIHRvbyB2ZXJib3NlLlxcbiovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogVGhpcyBtaXhpbiBnZW5lcmF0ZXMga2V5ZmFtZXMuXFxuICogQmVjYXVzZSBvZiBhbGwga2V5ZnJhbWVzIGNhbid0IGJlIHNjb3BlZCxcXG4gKiB3ZSBuZWVkIHRvIHB1dHMgdW5pcXVlIG5hbWUgaW4gZWFjaCBidG4tcHVsc2UgY2FsbC5cXG4gKi9cXG4vKlxcblxcbkFjY29yZGluZyB0byB0aGUgc3BlY2lmaWNhdGlvbiAoaHR0cHM6Ly93d3cudzMub3JnL1RSL2Nzcy1zY29waW5nLTEvI2hvc3Qtc2VsZWN0b3IpXFxuOmhvc3QgYW5kIDpob3N0LWNvbnRleHQgYXJlIHBzZXVkby1jbGFzc2VzLiBTbyB3ZSBhc3N1bWUgdGhleSBjb3VsZCBiZSBjb21iaW5lZCxcXG5saWtlIG90aGVyIHBzZXVkby1jbGFzc2VzLCBldmVuIHNhbWUgb25lcy5cXG5Gb3IgZXhhbXBsZTogJzpudGgtb2YtdHlwZSgybik6bnRoLW9mLXR5cGUoZXZlbiknLlxcblxcbklkZWFsIHNvbHV0aW9uIHdvdWxkIGJlIHRvIHByZXBlbmQgYW55IHNlbGVjdG9yIHdpdGggOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pLlxcblRoZW4gbmVidWxhciBjb21wb25lbnRzIHdpbGwgYmVoYXZlIGFzIGFuIGh0bWwgZWxlbWVudCBhbmQgcmVzcG9uZCB0byBbZGlyXSBhdHRyaWJ1dGUgb24gYW55IGxldmVsLFxcbnNvIGRpcmVjdGlvbiBjb3VsZCBiZSBvdmVycmlkZGVuIG9uIGFueSBjb21wb25lbnQgbGV2ZWwuXFxuXFxuSW1wbGVtZW50YXRpb24gY29kZTpcXG5cXG5AbWl4aW4gbmItcnRsKCkge1xcbiAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgQGF0LXJvb3Qge3NlbGVjdG9yLWFwcGVuZCgnOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pJywgJil9IHtcXG4gICAgQGNvbnRlbnQ7XFxuICB9XFxufVxcblxcbkFuZCB3aGVuIHdlIGNhbGwgaXQgc29tZXdoZXJlOlxcblxcbjpob3N0IHtcXG4gIC5zb21lLWNsYXNzIHtcXG4gICAgQGluY2x1ZGUgbmItcnRsKCkge1xcbiAgICAgIC4uLlxcbiAgICB9XFxuICB9XFxufVxcbjpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG5cXG5SZXN1bHQgd2lsbCBsb29rIGxpa2U6XFxuXFxuOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0LWNvbnRleHQoLi4uKSAuc29tZS1jbGFzcyB7XFxuICAuLi5cXG59XFxuXFxuKlxcbiAgU2lkZSBub3RlOlxcbiAgOmhvc3QtY29udGV4dCgpOmhvc3Qgc2VsZWN0b3IgYXJlIHZhbGlkLiBodHRwczovL2xpc3RzLnczLm9yZy9BcmNoaXZlcy9QdWJsaWMvd3d3LXN0eWxlLzIwMTVGZWIvMDMwNS5odG1sXFxuXFxuICA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgc2hvdWxkIG1hdGNoIGFueSBwZXJtdXRhdGlvbixcXG4gIHNvIG9yZGVyIGlzIG5vdCBpbXBvcnRhbnQuXFxuKlxcblxcblxcbkN1cnJlbnRseSwgdGhlcmUncmUgdHdvIHByb2JsZW1zIHdpdGggdGhpcyBhcHByb2FjaDpcXG5cXG5GaXJzdCwgaXMgdGhhdCB3ZSBjYW4ndCBjb21iaW5lIDpob3N0LCA6aG9zdC1jb250ZXh0LiBBbmd1bGFyIGJ1Z3MgIzE0MzQ5LCAjMTkxOTkuXFxuRm9yIHRoZSBtb21lbnQgb2Ygd3JpdGluZywgdGhlIG9ubHkgcG9zc2libGUgd2F5IGlzOlxcbjpob3N0IHtcXG4gIDpob3N0LWNvbnRleHQoLi4uKSB7XFxuICAgIC4uLlxcbiAgfVxcbn1cXG5JdCBkb2Vzbid0IHdvcmsgZm9yIHVzIGJlY2F1c2UgbWl4aW4gY291bGQgYmUgY2FsbGVkIHNvbWV3aGVyZSBkZWVwZXIsIGxpa2U6XFxuOmhvc3Qge1xcbiAgcCB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHsgLi4uIH1cXG4gIH1cXG59XFxuV2UgYXJlIG5vdCBhYmxlIHRvIGdvIHVwIHRvIDpob3N0IGxldmVsIHRvIHBsYWNlIGNvbnRlbnQgcGFzc2VkIHRvIG1peGluLlxcblxcblRoZSBzZWNvbmQgcHJvYmxlbSBpcyB0aGF0IHdlIG9ubHkgY2FuIGJlIHN1cmUgdGhhdCB3ZSBhcHBlbmRpbmcgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHRvIGFub3RoZXJcXG46aG9zdC86aG9zdC1jb250ZXh0IHBzZXVkby1jbGFzcyB3aGVuIGNhbGxlZCBpbiB0aGVtZSBmaWxlcyAoKi50aGVtZS5zY3NzKS5cXG4gICpcXG4gICAgU2lkZSBub3RlOlxcbiAgICBDdXJyZW50bHksIG5iLWluc3RhbGwtY29tcG9uZW50IHVzZXMgYW5vdGhlciBhcHByb2FjaCB3aGVyZSA6aG9zdCBwcmVwZW5kZWQgd2l0aCB0aGUgdGhlbWUgbmFtZVxcbiAgICAoaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzViOTYwNzg2MjRiMGE0NzYwZjJkYmNmNmZkZjBiZDYyNzkxYmU1YmIvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MSksXFxuICAgIGJ1dCBpdCB3YXMgbWFkZSB0byBiZSBhYmxlIHRvIHVzZSBjdXJyZW50IHJlYWxpemF0aW9uIG9mIHJ0bCBhbmQgaXQgY2FuIGJlIHJld3JpdHRlbiBiYWNrIHRvXFxuICAgIDpob3N0LWNvbnRleHQoJHRoZW1lKSBvbmNlIHdlIHdpbGwgYmUgYWJsZSB0byB1c2UgbXVsdGlwbGUgc2hhZG93IHNlbGVjdG9ycy5cXG4gICpcXG5CdXQgd2hlbiBpdCdzIGNhbGxlZCBpbiAqLmNvbXBvbmVudC5zY3NzIHdlIGNhbid0IGJlIHN1cmUsIHRoYXQgc2VsZWN0b3Igc3RhcnRzIHdpdGggOmhvc3QvOmhvc3QtY29udGV4dCxcXG5iZWNhdXNlIGFuZ3VsYXIgYWxsb3dzIG9taXR0aW5nIHBzZXVkby1jbGFzc2VzIGlmIHdlIGRvbid0IG5lZWQgdG8gc3R5bGUgOmhvc3QgY29tcG9uZW50IGl0c2VsZi5cXG5XZSBjYW4gYnJlYWsgc3VjaCBzZWxlY3RvcnMsIGJ5IGp1c3QgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byB0aGVtLlxcbiAgKioqXFxuICAgIFBvc3NpYmxlIHNvbHV0aW9uXFxuICAgIGNoZWNrIGlmIHdlIGluIHRoZW1lIGJ5IHNvbWUgdGhlbWUgdmFyaWFibGVzIGFuZCBpZiBzbyBhcHBlbmQsIG90aGVyd2lzZSBuZXN0IGxpa2VcXG4gICAgQGF0LXJvb3QgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pIHtcXG4gICAgICAvLyBhZGQgIyB0byBzY3NzIGludGVycG9sYXRpb24gc3RhdGVtZW50LlxcbiAgICAgIC8vIGl0IHdvcmtzIGluIGNvbW1lbnRzIGFuZCB3ZSBjYW4ndCB1c2UgaXQgaGVyZVxcbiAgICAgIHsmfSB7XFxuICAgICAgICBAY29udGVudDtcXG4gICAgICB9XFxuICAgIH1cXG4gICAgV2hhdCBpZiA6aG9zdCBzcGVjaWZpZWQ/IENhbiB3ZSBhZGQgc3BhY2UgaW4gOmhvc3QtY29udGV4dCguLi4pIDpob3N0P1xcbiAgICBPciBtYXliZSBhZGQgOmhvc3Qgc2VsZWN0b3IgYW55d2F5PyBJZiBtdWx0aXBsZSA6aG9zdCBzZWxlY3RvcnMgYXJlIGFsbG93ZWRcXG4gICoqKlxcblxcblxcblByb2JsZW1zIHdpdGggdGhlIGN1cnJlbnQgYXBwcm9hY2guXFxuXFxuMS4gRGlyZWN0aW9uIGNhbiBiZSBhcHBsaWVkIG9ubHkgb24gZG9jdW1lbnQgbGV2ZWwsIGJlY2F1c2UgbWl4aW4gcHJlcGVuZHMgdGhlbWUgY2xhc3MsXFxud2hpY2ggcGxhY2VkIG9uIHRoZSBib2R5LlxcbjIuICouY29tcG9uZW50LnNjc3Mgc3R5bGVzIHNob3VsZCBiZSBpbiA6aG9zdCBzZWxlY3Rvci4gT3RoZXJ3aXNlIGFuZ3VsYXIgd2lsbCBhZGQgaG9zdFxcbmF0dHJpYnV0ZSB0byBbZGlyPXJ0bF0gYXR0cmlidXRlIGFzIHdlbGwuXFxuXFxuXFxuR2VuZXJhbCBwcm9ibGVtcy5cXG5cXG5MdHIgaXMgZGVmYXVsdCBkb2N1bWVudCBkaXJlY3Rpb24sIGJ1dCBmb3IgcHJvcGVyIHdvcmsgb2YgbmItbHRyIChtZWFucyBsdHIgb25seSksXFxuW2Rpcj1sdHJdIHNob3VsZCBiZSBzcGVjaWZpZWQgYXQgbGVhc3Qgc29tZXdoZXJlLiAnOm5vdChbZGlyPXJ0bF0nIG5vdCBhcHBsaWNhYmxlIGhlcmUsXFxuYmVjYXVzZSBpdCdzIHNhdGlzZnkgYW55IHBhcmVudCwgdGhhdCBkb24ndCBoYXZlIFtkaXI9cnRsXSBhdHRyaWJ1dGUuXFxuUHJldmlvdXMgYXBwcm9hY2ggd2FzIHRvIHVzZSBzaW5nbGUgcnRsIG1peGluIGFuZCByZXNldCBsdHIgcHJvcGVydGllcyB0byBpbml0aWFsIHZhbHVlLlxcbkJ1dCBzb21ldGltZXMgaXQncyBoYXJkIHRvIGZpbmQsIHdoYXQgdGhlIHByZXZpb3VzIHZhbHVlIHNob3VsZCBiZS4gQW5kIHN1Y2ggbWl4aW4gY2FsbCBsb29rcyB0b28gdmVyYm9zZS5cXG4qL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIEBsaWNlbnNlXFxuICogQ29weXJpZ2h0IEFrdmVvLiBBbGwgUmlnaHRzIFJlc2VydmVkLlxcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgTGljZW5zZS4gU2VlIExpY2Vuc2UudHh0IGluIHRoZSBwcm9qZWN0IHJvb3QgZm9yIGxpY2Vuc2UgaW5mb3JtYXRpb24uXFxuICovXFxuLyoqXFxuICogQGxpY2Vuc2VcXG4gKiBDb3B5cmlnaHQgQWt2ZW8uIEFsbCBSaWdodHMgUmVzZXJ2ZWQuXFxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlLiBTZWUgTGljZW5zZS50eHQgaW4gdGhlIHByb2plY3Qgcm9vdCBmb3IgbGljZW5zZSBpbmZvcm1hdGlvbi5cXG4gKi9cXG4vKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCBuYi1jYXJkLWJvZHkge1xcbiAgcGFkZGluZzogMCAxLjI1cmVtIDEuMjVyZW0gMDtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LXdyYXA6IHdyYXA7IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuY29udGFpbmVyLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuMjVyZW07IH1cXG5cXG4ubmItdGhlbWUtZGVmYXVsdCA6aG9zdCAuc2l6ZS1jb250YWluZXIge1xcbiAgbWFyZ2luOiAxLjI1cmVtIDAgMCAxLjI1cmVtOyB9XFxuXFxuLm5iLXRoZW1lLWRlZmF1bHQgOmhvc3QgLnN1YmhlYWRlciB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjc1cmVtO1xcbiAgZm9udC1zaXplOiAwLjg3NXJlbTtcXG4gIGZvbnQtd2VpZ2h0OiA1MDA7XFxuICBjb2xvcjogIzJhMmEyYTsgfVxcblxcbi8qXFxuICAgICAgOmhvc3QgY2FuIGJlIHByZWZpeGVkXFxuICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2FuZ3VsYXIvYW5ndWxhci9ibG9iLzhkMGVlMzQ5MzlmMTRjMDc4NzZkMjIyYzI1YjQwNWVkNDU4YTM0ZDMvcGFja2FnZXMvY29tcGlsZXIvc3JjL3NoYWRvd19jc3MudHMjTDQ0MVxcblxcbiAgICAgIFdlIGhhdmUgdG8gdXNlIDpob3N0IGluc3RlZCBvZiA6aG9zdC1jb250ZXh0KCR0aGVtZSksIHRvIGJlIGFibGUgdG8gcHJlZml4IHRoZW1lIGNsYXNzXFxuICAgICAgd2l0aCBzb21ldGhpbmcgZGVmaW5lZCBpbnNpZGUgb2YgQGNvbnRlbnQsIGJ5IHByZWZpeGluZyAmLlxcbiAgICAgIEZvciBleGFtcGxlIHRoaXMgc2NzcyBjb2RlOlxcbiAgICAgICAgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuc29tZS1zZWxlY3RvciAmIHtcXG4gICAgICAgICAgICAuLi5cXG4gICAgICAgICAgfVxcbiAgICAgICAgfVxcbiAgICAgIFdpbGwgcmVzdWx0IGluIG5leHQgY3NzOlxcbiAgICAgICAgLnNvbWUtc2VsZWN0b3IgLm5iLXRoZW1lLWRlZmF1bHQge1xcbiAgICAgICAgICAuLi5cXG4gICAgICAgIH1cXG5cXG4gICAgICBJdCBkb2Vzbid0IHdvcmsgd2l0aCA6aG9zdC1jb250ZXh0IGJlY2F1c2UgYW5ndWxhciBzcGxpdHRpbmcgaXQgaW4gdHdvIHNlbGVjdG9ycyBhbmQgcmVtb3Zlc1xcbiAgICAgIHByZWZpeCBpbiBvbmUgb2YgdGhlIHNlbGVjdG9ycy5cXG4gICAgKi9cXG4ubmItdGhlbWUtY29zbWljIDpob3N0IG5iLWNhcmQtYm9keSB7XFxuICBwYWRkaW5nOiAwIDEuMjVyZW0gMS4yNXJlbSAwO1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtd3JhcDogd3JhcDsgfVxcblxcbi5uYi10aGVtZS1jb3NtaWMgOmhvc3QgLmNvbnRhaW5lci10aXRsZSB7XFxuICBtYXJnaW4tYm90dG9tOiAwLjI1cmVtOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuc2l6ZS1jb250YWluZXIge1xcbiAgbWFyZ2luOiAxLjI1cmVtIDAgMCAxLjI1cmVtOyB9XFxuXFxuLm5iLXRoZW1lLWNvc21pYyA6aG9zdCAuc3ViaGVhZGVyIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNzVyZW07XFxuICBmb250LXNpemU6IDAuODc1cmVtO1xcbiAgZm9udC13ZWlnaHQ6IDUwMDtcXG4gIGNvbG9yOiAjZmZmZmZmOyB9XFxuXFxuLypcXG4gICAgICA6aG9zdCBjYW4gYmUgcHJlZml4ZWRcXG4gICAgICBodHRwczovL2dpdGh1Yi5jb20vYW5ndWxhci9hbmd1bGFyL2Jsb2IvOGQwZWUzNDkzOWYxNGMwNzg3NmQyMjJjMjViNDA1ZWQ0NThhMzRkMy9wYWNrYWdlcy9jb21waWxlci9zcmMvc2hhZG93X2Nzcy50cyNMNDQxXFxuXFxuICAgICAgV2UgaGF2ZSB0byB1c2UgOmhvc3QgaW5zdGVkIG9mIDpob3N0LWNvbnRleHQoJHRoZW1lKSwgdG8gYmUgYWJsZSB0byBwcmVmaXggdGhlbWUgY2xhc3NcXG4gICAgICB3aXRoIHNvbWV0aGluZyBkZWZpbmVkIGluc2lkZSBvZiBAY29udGVudCwgYnkgcHJlZml4aW5nICYuXFxuICAgICAgRm9yIGV4YW1wbGUgdGhpcyBzY3NzIGNvZGU6XFxuICAgICAgICAubmItdGhlbWUtZGVmYXVsdCB7XFxuICAgICAgICAgIC5zb21lLXNlbGVjdG9yICYge1xcbiAgICAgICAgICAgIC4uLlxcbiAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgICAgV2lsbCByZXN1bHQgaW4gbmV4dCBjc3M6XFxuICAgICAgICAuc29tZS1zZWxlY3RvciAubmItdGhlbWUtZGVmYXVsdCB7XFxuICAgICAgICAgIC4uLlxcbiAgICAgICAgfVxcblxcbiAgICAgIEl0IGRvZXNuJ3Qgd29yayB3aXRoIDpob3N0LWNvbnRleHQgYmVjYXVzZSBhbmd1bGFyIHNwbGl0dGluZyBpdCBpbiB0d28gc2VsZWN0b3JzIGFuZCByZW1vdmVzXFxuICAgICAgcHJlZml4IGluIG9uZSBvZiB0aGUgc2VsZWN0b3JzLlxcbiAgICAqL1xcbi5uYi10aGVtZS1jb3Jwb3JhdGUgOmhvc3QgbmItY2FyZC1ib2R5IHtcXG4gIHBhZGRpbmc6IDAgMS4yNXJlbSAxLjI1cmVtIDA7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC13cmFwOiB3cmFwOyB9XFxuXFxuLm5iLXRoZW1lLWNvcnBvcmF0ZSA6aG9zdCAuY29udGFpbmVyLXRpdGxlIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuMjVyZW07IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5zaXplLWNvbnRhaW5lciB7XFxuICBtYXJnaW46IDEuMjVyZW0gMCAwIDEuMjVyZW07IH1cXG5cXG4ubmItdGhlbWUtY29ycG9yYXRlIDpob3N0IC5zdWJoZWFkZXIge1xcbiAgbWFyZ2luLWJvdHRvbTogMC43NXJlbTtcXG4gIGZvbnQtc2l6ZTogMC44NzVyZW07XFxuICBmb250LXdlaWdodDogNTAwO1xcbiAgY29sb3I6ICMxODE4MTg7IH1cXG5cIiwgXCJcIl0pO1xuXG4vLyBleHBvcnRzXG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss":
/*!*****************************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss ***!
  \*****************************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This is a starting point where we declare the maps of themes and globally available functions/mixins\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n/*!\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-default :host nb-card-body {\\n  overflow: visible; }\\n\\n.nb-theme-default :host .input-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .validation-checkboxes {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-default :host .validation-checkboxes .custom-control {\\n    margin-left: 1rem; }\\n\\n.nb-theme-default :host .demo-checkboxes {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .demo-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .demo-disabled-checkbox-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-default :host .demo-checkboxes-radio {\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.nb-theme-default :host .demo-rating {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-default :host .star {\\n  font-size: 1.5rem;\\n  color: #a4abb3; }\\n\\n.nb-theme-default :host .filled {\\n  color: #a4abb3; }\\n\\n.nb-theme-default :host .rating-header {\\n  line-height: 2rem;\\n  font-size: 1.25rem;\\n  font-family: Exo;\\n  font-weight: 500;\\n  color: #2a2a2a; }\\n\\n.nb-theme-default :host .current-rate {\\n  font-size: 1.5rem;\\n  color: #2a2a2a; }\\n  [dir=ltr] .nb-theme-default :host .current-rate {\\n    padding-left: 1rem; }\\n  [dir=rtl] .nb-theme-default :host .current-rate {\\n    padding-right: 1rem; }\\n\\n.nb-theme-default :host .full-name-inputs {\\n  display: flex; }\\n\\n.nb-theme-default :host .input-group.has-person-icon {\\n  position: relative; }\\n  .nb-theme-default :host .input-group.has-person-icon .form-control {\\n    padding-left: 3rem; }\\n  .nb-theme-default :host .input-group.has-person-icon::before {\\n    content: '\\\\F47D';\\n    font-family: 'Ionicons';\\n    font-size: 2rem;\\n    position: absolute;\\n    z-index: 100;\\n    left: 1rem;\\n    top: 0.25rem; }\\n\\n.nb-theme-default :host .dropdown {\\n  min-width: 7rem; }\\n\\n.nb-theme-default :host .dropdown-menu {\\n  width: auto; }\\n\\n.nb-theme-default :host .form-group label {\\n  padding: 0 0 0.75rem; }\\n\\n.nb-theme-default :host ngb-rating {\\n  outline: none; }\\n\\n.nb-theme-default :host ngb-rating i {\\n  color: #40dc7e; }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-default :host button:not(.btn-icon) {\\n    padding: 0.75rem 1rem;\\n    font-size: 0.75rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-cosmic :host nb-card-body {\\n  overflow: visible; }\\n\\n.nb-theme-cosmic :host .input-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .validation-checkboxes {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-cosmic :host .validation-checkboxes .custom-control {\\n    margin-left: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-checkboxes {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-disabled-checkbox-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-cosmic :host .demo-checkboxes-radio {\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.nb-theme-cosmic :host .demo-rating {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-cosmic :host .star {\\n  font-size: 1.5rem;\\n  color: #a1a1e5; }\\n\\n.nb-theme-cosmic :host .filled {\\n  color: #a1a1e5; }\\n\\n.nb-theme-cosmic :host .rating-header {\\n  line-height: 2rem;\\n  font-size: 1.25rem;\\n  font-family: Exo;\\n  font-weight: 500;\\n  color: #ffffff; }\\n\\n.nb-theme-cosmic :host .current-rate {\\n  font-size: 1.5rem;\\n  color: #ffffff; }\\n  [dir=ltr] .nb-theme-cosmic :host .current-rate {\\n    padding-left: 1rem; }\\n  [dir=rtl] .nb-theme-cosmic :host .current-rate {\\n    padding-right: 1rem; }\\n\\n.nb-theme-cosmic :host .full-name-inputs {\\n  display: flex; }\\n\\n.nb-theme-cosmic :host .input-group.has-person-icon {\\n  position: relative; }\\n  .nb-theme-cosmic :host .input-group.has-person-icon .form-control {\\n    padding-left: 3rem; }\\n  .nb-theme-cosmic :host .input-group.has-person-icon::before {\\n    content: '\\\\F47D';\\n    font-family: 'Ionicons';\\n    font-size: 2rem;\\n    position: absolute;\\n    z-index: 100;\\n    left: 1rem;\\n    top: 0.25rem; }\\n\\n.nb-theme-cosmic :host .dropdown {\\n  min-width: 7rem; }\\n\\n.nb-theme-cosmic :host .dropdown-menu {\\n  width: auto; }\\n\\n.nb-theme-cosmic :host .form-group label {\\n  padding: 0 0 0.75rem; }\\n\\n.nb-theme-cosmic :host ngb-rating {\\n  outline: none; }\\n\\n.nb-theme-cosmic :host ngb-rating i {\\n  color: #00d977;\\n  color: #7659ff; }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-cosmic :host button:not(.btn-icon) {\\n    padding: 0.75rem 1rem;\\n    font-size: 0.75rem; } }\\n\\n/*\\n      :host can be prefixed\\n      https://github.com/angular/angular/blob/8d0ee34939f14c07876d222c25b405ed458a34d3/packages/compiler/src/shadow_css.ts#L441\\n\\n      We have to use :host insted of :host-context($theme), to be able to prefix theme class\\n      with something defined inside of @content, by prefixing &.\\n      For example this scss code:\\n        .nb-theme-default {\\n          .some-selector & {\\n            ...\\n          }\\n        }\\n      Will result in next css:\\n        .some-selector .nb-theme-default {\\n          ...\\n        }\\n\\n      It doesn't work with :host-context because angular splitting it in two selectors and removes\\n      prefix in one of the selectors.\\n    */\\n.nb-theme-corporate :host nb-card-body {\\n  overflow: visible; }\\n\\n.nb-theme-corporate :host .input-group {\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .validation-checkboxes {\\n  display: flex;\\n  justify-content: space-between; }\\n  .nb-theme-corporate :host .validation-checkboxes .custom-control {\\n    margin-left: 1rem; }\\n\\n.nb-theme-corporate :host .demo-checkboxes {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .demo-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .demo-disabled-checkbox-radio {\\n  display: flex;\\n  flex-direction: column;\\n  margin-bottom: 1rem; }\\n\\n.nb-theme-corporate :host .demo-checkboxes-radio {\\n  display: flex;\\n  justify-content: space-between; }\\n\\n.nb-theme-corporate :host .demo-rating {\\n  display: flex;\\n  justify-content: space-between;\\n  flex-wrap: wrap; }\\n\\n.nb-theme-corporate :host .star {\\n  font-size: 1.5rem;\\n  color: #a4abb3; }\\n\\n.nb-theme-corporate :host .filled {\\n  color: #a4abb3; }\\n\\n.nb-theme-corporate :host .rating-header {\\n  line-height: 2rem;\\n  font-size: 1.25rem;\\n  font-family: Exo;\\n  font-weight: 500;\\n  color: #181818; }\\n\\n.nb-theme-corporate :host .current-rate {\\n  font-size: 1.5rem;\\n  color: #181818; }\\n  [dir=ltr] .nb-theme-corporate :host .current-rate {\\n    padding-left: 1rem; }\\n  [dir=rtl] .nb-theme-corporate :host .current-rate {\\n    padding-right: 1rem; }\\n\\n.nb-theme-corporate :host .full-name-inputs {\\n  display: flex; }\\n\\n.nb-theme-corporate :host .input-group.has-person-icon {\\n  position: relative; }\\n  .nb-theme-corporate :host .input-group.has-person-icon .form-control {\\n    padding-left: 3rem; }\\n  .nb-theme-corporate :host .input-group.has-person-icon::before {\\n    content: '\\\\F47D';\\n    font-family: 'Ionicons';\\n    font-size: 2rem;\\n    position: absolute;\\n    z-index: 100;\\n    left: 1rem;\\n    top: 0.25rem; }\\n\\n.nb-theme-corporate :host .dropdown {\\n  min-width: 7rem; }\\n\\n.nb-theme-corporate :host .dropdown-menu {\\n  width: auto; }\\n\\n.nb-theme-corporate :host .form-group label {\\n  padding: 0 0 0.75rem; }\\n\\n.nb-theme-corporate :host ngb-rating {\\n  outline: none; }\\n\\n.nb-theme-corporate :host ngb-rating i {\\n  color: #5dcfe3; }\\n\\n@media (max-width: 399.98px) {\\n  .nb-theme-corporate :host button:not(.btn-icon) {\\n    padding: 0.75rem 1rem;\\n    font-size: 0.75rem; } }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss\n");

/***/ }),

/***/ "./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss":
/*!*******************************************************************************************************************************************************!*\
  !*** ./node_modules/css-loader!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss ***!
  \*******************************************************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("exports = module.exports = __webpack_require__(/*! ../../../../../../../../node_modules/css-loader/lib/css-base.js */ \"./node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.i, \"/**\\n * @license\\n * Copyright Akveo. All Rights Reserved.\\n * Licensed under the MIT License. See License.txt in the project root for license information.\\n */\\n/**\\n * This mixin generates keyfames.\\n * Because of all keyframes can't be scoped,\\n * we need to puts unique name in each btn-pulse call.\\n */\\n/*\\n\\nAccording to the specification (https://www.w3.org/TR/css-scoping-1/#host-selector)\\n:host and :host-context are pseudo-classes. So we assume they could be combined,\\nlike other pseudo-classes, even same ones.\\nFor example: ':nth-of-type(2n):nth-of-type(even)'.\\n\\nIdeal solution would be to prepend any selector with :host-context([dir=rtl]).\\nThen nebular components will behave as an html element and respond to [dir] attribute on any level,\\nso direction could be overridden on any component level.\\n\\nImplementation code:\\n\\n@mixin nb-rtl() {\\n  // add # to scss interpolation statement.\\n  // it works in comments and we can't use it here\\n  @at-root {selector-append(':host-context([dir=rtl])', &)} {\\n    @content;\\n  }\\n}\\n\\nAnd when we call it somewhere:\\n\\n:host {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n:host-context(...) {\\n  .some-class {\\n    @include nb-rtl() {\\n      ...\\n    }\\n  }\\n}\\n\\nResult will look like:\\n\\n:host-context([dir=rtl]):host .some-class {\\n  ...\\n}\\n:host-context([dir=rtl]):host-context(...) .some-class {\\n  ...\\n}\\n\\n*\\n  Side note:\\n  :host-context():host selector are valid. https://lists.w3.org/Archives/Public/www-style/2015Feb/0305.html\\n\\n  :host-context([dir=rtl]):host-context(...) should match any permutation,\\n  so order is not important.\\n*\\n\\n\\nCurrently, there're two problems with this approach:\\n\\nFirst, is that we can't combine :host, :host-context. Angular bugs #14349, #19199.\\nFor the moment of writing, the only possible way is:\\n:host {\\n  :host-context(...) {\\n    ...\\n  }\\n}\\nIt doesn't work for us because mixin could be called somewhere deeper, like:\\n:host {\\n  p {\\n    @include nb-rtl() { ... }\\n  }\\n}\\nWe are not able to go up to :host level to place content passed to mixin.\\n\\nThe second problem is that we only can be sure that we appending :host-context([dir=rtl]) to another\\n:host/:host-context pseudo-class when called in theme files (*.theme.scss).\\n  *\\n    Side note:\\n    Currently, nb-install-component uses another approach where :host prepended with the theme name\\n    (https://github.com/angular/angular/blob/5b96078624b0a4760f2dbcf6fdf0bd62791be5bb/packages/compiler/src/shadow_css.ts#L441),\\n    but it was made to be able to use current realization of rtl and it can be rewritten back to\\n    :host-context($theme) once we will be able to use multiple shadow selectors.\\n  *\\nBut when it's called in *.component.scss we can't be sure, that selector starts with :host/:host-context,\\nbecause angular allows omitting pseudo-classes if we don't need to style :host component itself.\\nWe can break such selectors, by just appending :host-context([dir=rtl]) to them.\\n  ***\\n    Possible solution\\n    check if we in theme by some theme variables and if so append, otherwise nest like\\n    @at-root :host-context([dir=rtl]) {\\n      // add # to scss interpolation statement.\\n      // it works in comments and we can't use it here\\n      {&} {\\n        @content;\\n      }\\n    }\\n    What if :host specified? Can we add space in :host-context(...) :host?\\n    Or maybe add :host selector anyway? If multiple :host selectors are allowed\\n  ***\\n\\n\\nProblems with the current approach.\\n\\n1. Direction can be applied only on document level, because mixin prepends theme class,\\nwhich placed on the body.\\n2. *.component.scss styles should be in :host selector. Otherwise angular will add host\\nattribute to [dir=rtl] attribute as well.\\n\\n\\nGeneral problems.\\n\\nLtr is default document direction, but for proper work of nb-ltr (means ltr only),\\n[dir=ltr] should be specified at least somewhere. ':not([dir=rtl]' not applicable here,\\nbecause it's satisfy any parent, that don't have [dir=rtl] attribute.\\nPrevious approach was to use single rtl mixin and reset ltr properties to initial value.\\nBut sometimes it's hard to find, what the previous value should be. And such mixin call looks too verbose.\\n*/\\n[dir=ltr] :host button {\\n  margin: 0 0.75rem 2rem 0; }\\n\\n[dir=rtl] :host button {\\n  margin: 0 0 2rem 0.75rem; }\\n\", \"\"]);\n\n// exports\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvbW9kYWxzL21vZGFscy5jb21wb25lbnQuc2Nzcz9iYTI2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBLDJCQUEyQixtQkFBTyxDQUFDLGtIQUFpRTtBQUNwRzs7O0FBR0E7QUFDQSxjQUFjLFFBQVMsaTJCQUFpMkIsK0dBQStHLCtDQUErQyxFQUFFLGVBQWUsS0FBSyxHQUFHLDZDQUE2QyxpQkFBaUIseUJBQXlCLGtCQUFrQixLQUFLLEdBQUcsc0JBQXNCLGlCQUFpQix5QkFBeUIsa0JBQWtCLEtBQUssR0FBRyx5RUFBeUUsVUFBVSwwREFBMEQsVUFBVSw4YkFBOGIsd0JBQXdCLGNBQWMsR0FBRyx1RkFBdUYsT0FBTyx5QkFBeUIsTUFBTSxLQUFLLEdBQUcsbW5DQUFtbkMsa0hBQWtILEVBQUUsRUFBRSxtQkFBbUIsU0FBUyxPQUFPLHc3QkFBdzdCLDZCQUE2QixFQUFFLDRCQUE0Qiw2QkFBNkIsRUFBRTs7QUFFM3hJIiwiZmlsZSI6Ii4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9tb2RhbHMvbW9kYWxzLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiZXhwb3J0cyA9IG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZShcIi4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2xpYi9jc3MtYmFzZS5qc1wiKShmYWxzZSk7XG4vLyBpbXBvcnRzXG5cblxuLy8gbW9kdWxlXG5leHBvcnRzLnB1c2goW21vZHVsZS5pZCwgXCIvKipcXG4gKiBAbGljZW5zZVxcbiAqIENvcHlyaWdodCBBa3Zlby4gQWxsIFJpZ2h0cyBSZXNlcnZlZC5cXG4gKiBMaWNlbnNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuIFNlZSBMaWNlbnNlLnR4dCBpbiB0aGUgcHJvamVjdCByb290IGZvciBsaWNlbnNlIGluZm9ybWF0aW9uLlxcbiAqL1xcbi8qKlxcbiAqIFRoaXMgbWl4aW4gZ2VuZXJhdGVzIGtleWZhbWVzLlxcbiAqIEJlY2F1c2Ugb2YgYWxsIGtleWZyYW1lcyBjYW4ndCBiZSBzY29wZWQsXFxuICogd2UgbmVlZCB0byBwdXRzIHVuaXF1ZSBuYW1lIGluIGVhY2ggYnRuLXB1bHNlIGNhbGwuXFxuICovXFxuLypcXG5cXG5BY2NvcmRpbmcgdG8gdGhlIHNwZWNpZmljYXRpb24gKGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3Mtc2NvcGluZy0xLyNob3N0LXNlbGVjdG9yKVxcbjpob3N0IGFuZCA6aG9zdC1jb250ZXh0IGFyZSBwc2V1ZG8tY2xhc3Nlcy4gU28gd2UgYXNzdW1lIHRoZXkgY291bGQgYmUgY29tYmluZWQsXFxubGlrZSBvdGhlciBwc2V1ZG8tY2xhc3NlcywgZXZlbiBzYW1lIG9uZXMuXFxuRm9yIGV4YW1wbGU6ICc6bnRoLW9mLXR5cGUoMm4pOm50aC1vZi10eXBlKGV2ZW4pJy5cXG5cXG5JZGVhbCBzb2x1dGlvbiB3b3VsZCBiZSB0byBwcmVwZW5kIGFueSBzZWxlY3RvciB3aXRoIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKS5cXG5UaGVuIG5lYnVsYXIgY29tcG9uZW50cyB3aWxsIGJlaGF2ZSBhcyBhbiBodG1sIGVsZW1lbnQgYW5kIHJlc3BvbmQgdG8gW2Rpcl0gYXR0cmlidXRlIG9uIGFueSBsZXZlbCxcXG5zbyBkaXJlY3Rpb24gY291bGQgYmUgb3ZlcnJpZGRlbiBvbiBhbnkgY29tcG9uZW50IGxldmVsLlxcblxcbkltcGxlbWVudGF0aW9uIGNvZGU6XFxuXFxuQG1peGluIG5iLXJ0bCgpIHtcXG4gIC8vIGFkZCAjIHRvIHNjc3MgaW50ZXJwb2xhdGlvbiBzdGF0ZW1lbnQuXFxuICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gIEBhdC1yb290IHtzZWxlY3Rvci1hcHBlbmQoJzpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKScsICYpfSB7XFxuICAgIEBjb250ZW50O1xcbiAgfVxcbn1cXG5cXG5BbmQgd2hlbiB3ZSBjYWxsIGl0IHNvbWV3aGVyZTpcXG5cXG46aG9zdCB7XFxuICAuc29tZS1jbGFzcyB7XFxuICAgIEBpbmNsdWRlIG5iLXJ0bCgpIHtcXG4gICAgICAuLi5cXG4gICAgfVxcbiAgfVxcbn1cXG46aG9zdC1jb250ZXh0KC4uLikge1xcbiAgLnNvbWUtY2xhc3Mge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7XFxuICAgICAgLi4uXFxuICAgIH1cXG4gIH1cXG59XFxuXFxuUmVzdWx0IHdpbGwgbG9vayBsaWtlOlxcblxcbjpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKTpob3N0IC5zb21lLWNsYXNzIHtcXG4gIC4uLlxcbn1cXG46aG9zdC1jb250ZXh0KFtkaXI9cnRsXSk6aG9zdC1jb250ZXh0KC4uLikgLnNvbWUtY2xhc3Mge1xcbiAgLi4uXFxufVxcblxcbipcXG4gIFNpZGUgbm90ZTpcXG4gIDpob3N0LWNvbnRleHQoKTpob3N0IHNlbGVjdG9yIGFyZSB2YWxpZC4gaHR0cHM6Ly9saXN0cy53My5vcmcvQXJjaGl2ZXMvUHVibGljL3d3dy1zdHlsZS8yMDE1RmViLzAzMDUuaHRtbFxcblxcbiAgOmhvc3QtY29udGV4dChbZGlyPXJ0bF0pOmhvc3QtY29udGV4dCguLi4pIHNob3VsZCBtYXRjaCBhbnkgcGVybXV0YXRpb24sXFxuICBzbyBvcmRlciBpcyBub3QgaW1wb3J0YW50LlxcbipcXG5cXG5cXG5DdXJyZW50bHksIHRoZXJlJ3JlIHR3byBwcm9ibGVtcyB3aXRoIHRoaXMgYXBwcm9hY2g6XFxuXFxuRmlyc3QsIGlzIHRoYXQgd2UgY2FuJ3QgY29tYmluZSA6aG9zdCwgOmhvc3QtY29udGV4dC4gQW5ndWxhciBidWdzICMxNDM0OSwgIzE5MTk5LlxcbkZvciB0aGUgbW9tZW50IG9mIHdyaXRpbmcsIHRoZSBvbmx5IHBvc3NpYmxlIHdheSBpczpcXG46aG9zdCB7XFxuICA6aG9zdC1jb250ZXh0KC4uLikge1xcbiAgICAuLi5cXG4gIH1cXG59XFxuSXQgZG9lc24ndCB3b3JrIGZvciB1cyBiZWNhdXNlIG1peGluIGNvdWxkIGJlIGNhbGxlZCBzb21ld2hlcmUgZGVlcGVyLCBsaWtlOlxcbjpob3N0IHtcXG4gIHAge1xcbiAgICBAaW5jbHVkZSBuYi1ydGwoKSB7IC4uLiB9XFxuICB9XFxufVxcbldlIGFyZSBub3QgYWJsZSB0byBnbyB1cCB0byA6aG9zdCBsZXZlbCB0byBwbGFjZSBjb250ZW50IHBhc3NlZCB0byBtaXhpbi5cXG5cXG5UaGUgc2Vjb25kIHByb2JsZW0gaXMgdGhhdCB3ZSBvbmx5IGNhbiBiZSBzdXJlIHRoYXQgd2UgYXBwZW5kaW5nIDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB0byBhbm90aGVyXFxuOmhvc3QvOmhvc3QtY29udGV4dCBwc2V1ZG8tY2xhc3Mgd2hlbiBjYWxsZWQgaW4gdGhlbWUgZmlsZXMgKCoudGhlbWUuc2NzcykuXFxuICAqXFxuICAgIFNpZGUgbm90ZTpcXG4gICAgQ3VycmVudGx5LCBuYi1pbnN0YWxsLWNvbXBvbmVudCB1c2VzIGFub3RoZXIgYXBwcm9hY2ggd2hlcmUgOmhvc3QgcHJlcGVuZGVkIHdpdGggdGhlIHRoZW1lIG5hbWVcXG4gICAgKGh0dHBzOi8vZ2l0aHViLmNvbS9hbmd1bGFyL2FuZ3VsYXIvYmxvYi81Yjk2MDc4NjI0YjBhNDc2MGYyZGJjZjZmZGYwYmQ2Mjc5MWJlNWJiL3BhY2thZ2VzL2NvbXBpbGVyL3NyYy9zaGFkb3dfY3NzLnRzI0w0NDEpLFxcbiAgICBidXQgaXQgd2FzIG1hZGUgdG8gYmUgYWJsZSB0byB1c2UgY3VycmVudCByZWFsaXphdGlvbiBvZiBydGwgYW5kIGl0IGNhbiBiZSByZXdyaXR0ZW4gYmFjayB0b1xcbiAgICA6aG9zdC1jb250ZXh0KCR0aGVtZSkgb25jZSB3ZSB3aWxsIGJlIGFibGUgdG8gdXNlIG11bHRpcGxlIHNoYWRvdyBzZWxlY3RvcnMuXFxuICAqXFxuQnV0IHdoZW4gaXQncyBjYWxsZWQgaW4gKi5jb21wb25lbnQuc2NzcyB3ZSBjYW4ndCBiZSBzdXJlLCB0aGF0IHNlbGVjdG9yIHN0YXJ0cyB3aXRoIDpob3N0Lzpob3N0LWNvbnRleHQsXFxuYmVjYXVzZSBhbmd1bGFyIGFsbG93cyBvbWl0dGluZyBwc2V1ZG8tY2xhc3NlcyBpZiB3ZSBkb24ndCBuZWVkIHRvIHN0eWxlIDpob3N0IGNvbXBvbmVudCBpdHNlbGYuXFxuV2UgY2FuIGJyZWFrIHN1Y2ggc2VsZWN0b3JzLCBieSBqdXN0IGFwcGVuZGluZyA6aG9zdC1jb250ZXh0KFtkaXI9cnRsXSkgdG8gdGhlbS5cXG4gICoqKlxcbiAgICBQb3NzaWJsZSBzb2x1dGlvblxcbiAgICBjaGVjayBpZiB3ZSBpbiB0aGVtZSBieSBzb21lIHRoZW1lIHZhcmlhYmxlcyBhbmQgaWYgc28gYXBwZW5kLCBvdGhlcndpc2UgbmVzdCBsaWtlXFxuICAgIEBhdC1yb290IDpob3N0LWNvbnRleHQoW2Rpcj1ydGxdKSB7XFxuICAgICAgLy8gYWRkICMgdG8gc2NzcyBpbnRlcnBvbGF0aW9uIHN0YXRlbWVudC5cXG4gICAgICAvLyBpdCB3b3JrcyBpbiBjb21tZW50cyBhbmQgd2UgY2FuJ3QgdXNlIGl0IGhlcmVcXG4gICAgICB7Jn0ge1xcbiAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgfVxcbiAgICB9XFxuICAgIFdoYXQgaWYgOmhvc3Qgc3BlY2lmaWVkPyBDYW4gd2UgYWRkIHNwYWNlIGluIDpob3N0LWNvbnRleHQoLi4uKSA6aG9zdD9cXG4gICAgT3IgbWF5YmUgYWRkIDpob3N0IHNlbGVjdG9yIGFueXdheT8gSWYgbXVsdGlwbGUgOmhvc3Qgc2VsZWN0b3JzIGFyZSBhbGxvd2VkXFxuICAqKipcXG5cXG5cXG5Qcm9ibGVtcyB3aXRoIHRoZSBjdXJyZW50IGFwcHJvYWNoLlxcblxcbjEuIERpcmVjdGlvbiBjYW4gYmUgYXBwbGllZCBvbmx5IG9uIGRvY3VtZW50IGxldmVsLCBiZWNhdXNlIG1peGluIHByZXBlbmRzIHRoZW1lIGNsYXNzLFxcbndoaWNoIHBsYWNlZCBvbiB0aGUgYm9keS5cXG4yLiAqLmNvbXBvbmVudC5zY3NzIHN0eWxlcyBzaG91bGQgYmUgaW4gOmhvc3Qgc2VsZWN0b3IuIE90aGVyd2lzZSBhbmd1bGFyIHdpbGwgYWRkIGhvc3RcXG5hdHRyaWJ1dGUgdG8gW2Rpcj1ydGxdIGF0dHJpYnV0ZSBhcyB3ZWxsLlxcblxcblxcbkdlbmVyYWwgcHJvYmxlbXMuXFxuXFxuTHRyIGlzIGRlZmF1bHQgZG9jdW1lbnQgZGlyZWN0aW9uLCBidXQgZm9yIHByb3BlciB3b3JrIG9mIG5iLWx0ciAobWVhbnMgbHRyIG9ubHkpLFxcbltkaXI9bHRyXSBzaG91bGQgYmUgc3BlY2lmaWVkIGF0IGxlYXN0IHNvbWV3aGVyZS4gJzpub3QoW2Rpcj1ydGxdJyBub3QgYXBwbGljYWJsZSBoZXJlLFxcbmJlY2F1c2UgaXQncyBzYXRpc2Z5IGFueSBwYXJlbnQsIHRoYXQgZG9uJ3QgaGF2ZSBbZGlyPXJ0bF0gYXR0cmlidXRlLlxcblByZXZpb3VzIGFwcHJvYWNoIHdhcyB0byB1c2Ugc2luZ2xlIHJ0bCBtaXhpbiBhbmQgcmVzZXQgbHRyIHByb3BlcnRpZXMgdG8gaW5pdGlhbCB2YWx1ZS5cXG5CdXQgc29tZXRpbWVzIGl0J3MgaGFyZCB0byBmaW5kLCB3aGF0IHRoZSBwcmV2aW91cyB2YWx1ZSBzaG91bGQgYmUuIEFuZCBzdWNoIG1peGluIGNhbGwgbG9va3MgdG9vIHZlcmJvc2UuXFxuKi9cXG5bZGlyPWx0cl0gOmhvc3QgYnV0dG9uIHtcXG4gIG1hcmdpbjogMCAwLjc1cmVtIDJyZW0gMDsgfVxcblxcbltkaXI9cnRsXSA6aG9zdCBidXR0b24ge1xcbiAgbWFyZ2luOiAwIDAgMnJlbSAwLjc1cmVtOyB9XFxuXCIsIFwiXCJdKTtcblxuLy8gZXhwb3J0c1xuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap-routing.module.ts":
/*!***********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap-routing.module.ts ***!
  \***********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar router_1 = __webpack_require__(/*! @angular/router */ \"./node_modules/@angular/router/fesm5/router.js\");\nvar bootstrap_component_1 = __webpack_require__(/*! ./bootstrap.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.component.ts\");\nvar modals_component_1 = __webpack_require__(/*! ./modals/modals.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.ts\");\nvar buttons_component_1 = __webpack_require__(/*! ./buttons/buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.ts\");\nvar form_inputs_component_1 = __webpack_require__(/*! ./form-inputs/form-inputs.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.ts\");\nvar routes = [\n    {\n        path: '',\n        component: bootstrap_component_1.BootstrapComponent,\n        children: [\n            {\n                path: 'inputs',\n                component: form_inputs_component_1.FormInputsComponent\n            },\n            {\n                path: 'buttons',\n                component: buttons_component_1.ButtonsComponent\n            },\n            {\n                path: 'modal',\n                component: modals_component_1.ModalsComponent\n            }\n        ]\n    }\n];\nvar BootstrapRoutingModule = /** @class */ (function () {\n    function BootstrapRoutingModule() {\n    }\n    BootstrapRoutingModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [router_1.RouterModule.forChild(routes)],\n            exports: [router_1.RouterModule]\n        })\n    ], BootstrapRoutingModule);\n    return BootstrapRoutingModule;\n}());\nexports.BootstrapRoutingModule = BootstrapRoutingModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYm9vdHN0cmFwLXJvdXRpbmcubW9kdWxlLnRzPzAzZjEiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQXlDO0FBQ3pDLDRHQUF1RDtBQUV2RCx1SkFBMkQ7QUFDM0QsNEpBQTREO0FBQzVELGlLQUErRDtBQUMvRCxxTEFBMEU7QUFFMUUsSUFBTSxNQUFNLEdBQVc7SUFDbkI7UUFDSSxJQUFJLEVBQUUsRUFBRTtRQUNSLFNBQVMsRUFBRSx3Q0FBa0I7UUFDN0IsUUFBUSxFQUFFO1lBQ047Z0JBQ0ksSUFBSSxFQUFFLFFBQVE7Z0JBQ2QsU0FBUyxFQUFFLDJDQUFtQjthQUNqQztZQUNEO2dCQUNJLElBQUksRUFBRSxTQUFTO2dCQUNmLFNBQVMsRUFBRSxvQ0FBZ0I7YUFDOUI7WUFDRDtnQkFDSSxJQUFJLEVBQUUsT0FBTztnQkFDYixTQUFTLEVBQUUsa0NBQWU7YUFDN0I7U0FDSjtLQUNKO0NBQ0osQ0FBQztBQU1GO0lBQUE7SUFBcUMsQ0FBQztJQUF6QixzQkFBc0I7UUFKbEMsZUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFLENBQUMscUJBQVksQ0FBQyxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7WUFDeEMsT0FBTyxFQUFFLENBQUMscUJBQVksQ0FBQztTQUMxQixDQUFDO09BQ1csc0JBQXNCLENBQUc7SUFBRCw2QkFBQztDQUFBO0FBQXpCLHdEQUFzQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9ib290c3RyYXAtcm91dGluZy5tb2R1bGUudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBOZ01vZHVsZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgUm91dGVzLCBSb3V0ZXJNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9yb3V0ZXInO1xuXG5pbXBvcnQgeyBCb290c3RyYXBDb21wb25lbnQgfSBmcm9tICcuL2Jvb3RzdHJhcC5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9kYWxzQ29tcG9uZW50IH0gZnJvbSAnLi9tb2RhbHMvbW9kYWxzLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25zQ29tcG9uZW50IH0gZnJvbSAnLi9idXR0b25zL2J1dHRvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IEZvcm1JbnB1dHNDb21wb25lbnQgfSBmcm9tICcuL2Zvcm0taW5wdXRzL2Zvcm0taW5wdXRzLmNvbXBvbmVudCc7XG5cbmNvbnN0IHJvdXRlczogUm91dGVzID0gW1xuICAgIHtcbiAgICAgICAgcGF0aDogJycsXG4gICAgICAgIGNvbXBvbmVudDogQm9vdHN0cmFwQ29tcG9uZW50LFxuICAgICAgICBjaGlsZHJlbjogW1xuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICdpbnB1dHMnLFxuICAgICAgICAgICAgICAgIGNvbXBvbmVudDogRm9ybUlucHV0c0NvbXBvbmVudFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBwYXRoOiAnYnV0dG9ucycsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBCdXR0b25zQ29tcG9uZW50XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHBhdGg6ICdtb2RhbCcsXG4gICAgICAgICAgICAgICAgY29tcG9uZW50OiBNb2RhbHNDb21wb25lbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgXVxuICAgIH1cbl07XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1JvdXRlck1vZHVsZS5mb3JDaGlsZChyb3V0ZXMpXSxcbiAgICBleHBvcnRzOiBbUm91dGVyTW9kdWxlXVxufSlcbmV4cG9ydCBjbGFzcyBCb290c3RyYXBSb3V0aW5nTW9kdWxlIHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap-routing.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.component.ts":
/*!******************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.component.ts ***!
  \******************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar BootstrapComponent = /** @class */ (function () {\n    function BootstrapComponent() {\n    }\n    BootstrapComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-bootstrap',\n            template: \"\\n    <router-outlet></router-outlet>\\n  \"\n        })\n    ], BootstrapComponent);\n    return BootstrapComponent;\n}());\nexports.BootstrapComponent = BootstrapComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYm9vdHN0cmFwLmNvbXBvbmVudC50cz83MWUyIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQVExQztJQUFBO0lBQWlDLENBQUM7SUFBckIsa0JBQWtCO1FBTjlCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsZUFBZTtZQUN6QixRQUFRLEVBQUUsMkNBRVg7U0FDRixDQUFDO09BQ1csa0JBQWtCLENBQUc7SUFBRCx5QkFBQztDQUFBO0FBQXJCLGdEQUFrQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9ib290c3RyYXAuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LWJvb3RzdHJhcCcsXG4gICAgdGVtcGxhdGU6IGBcbiAgICA8cm91dGVyLW91dGxldD48L3JvdXRlci1vdXRsZXQ+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgQm9vdHN0cmFwQ29tcG9uZW50IHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.module.ts":
/*!***************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.module.ts ***!
  \***************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_module_1 = __webpack_require__(/*! ../../@theme/theme.module */ \"./src/main/webapp/app/ngx-admin/@theme/theme.module.ts\");\nvar bootstrap_routing_module_1 = __webpack_require__(/*! ./bootstrap-routing.module */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap-routing.module.ts\");\nvar modals_component_1 = __webpack_require__(/*! ./modals/modals.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.ts\");\nvar modal_component_1 = __webpack_require__(/*! ./modals/modal/modal.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modal/modal.component.ts\");\nvar bootstrap_component_1 = __webpack_require__(/*! ./bootstrap.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.component.ts\");\nvar buttons_module_1 = __webpack_require__(/*! ./buttons/buttons.module */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.module.ts\");\nvar form_inputs_component_1 = __webpack_require__(/*! ./form-inputs/form-inputs.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.ts\");\nvar COMPONENTS = [bootstrap_component_1.BootstrapComponent, modals_component_1.ModalsComponent, modal_component_1.ModalComponent, form_inputs_component_1.FormInputsComponent];\nvar ENTRY_COMPONENTS = [modal_component_1.ModalComponent];\nvar BootstrapModule = /** @class */ (function () {\n    function BootstrapModule() {\n    }\n    BootstrapModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [theme_module_1.ThemeModule, bootstrap_routing_module_1.BootstrapRoutingModule, buttons_module_1.ButtonsModule],\n            declarations: COMPONENTS.slice(),\n            entryComponents: ENTRY_COMPONENTS.slice()\n        })\n    ], BootstrapModule);\n    return BootstrapModule;\n}());\nexports.BootstrapModule = BootstrapModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYm9vdHN0cmFwLm1vZHVsZS50cz81MDk0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUF5QztBQUV6QyxvSUFBd0Q7QUFFeEQsc0tBQW9FO0FBQ3BFLDRKQUE0RDtBQUM1RCxxS0FBZ0U7QUFDaEUsdUpBQTJEO0FBQzNELHdKQUF5RDtBQUN6RCxxTEFBMEU7QUFFMUUsSUFBTSxVQUFVLEdBQUcsQ0FBQyx3Q0FBa0IsRUFBRSxrQ0FBZSxFQUFFLGdDQUFjLEVBQUUsMkNBQW1CLENBQUMsQ0FBQztBQUU5RixJQUFNLGdCQUFnQixHQUFHLENBQUMsZ0NBQWMsQ0FBQyxDQUFDO0FBTzFDO0lBQUE7SUFBOEIsQ0FBQztJQUFsQixlQUFlO1FBTDNCLGVBQVEsQ0FBQztZQUNOLE9BQU8sRUFBRSxDQUFDLDBCQUFXLEVBQUUsaURBQXNCLEVBQUUsOEJBQWEsQ0FBQztZQUM3RCxZQUFZLEVBQU0sVUFBVSxRQUFDO1lBQzdCLGVBQWUsRUFBTSxnQkFBZ0IsUUFBQztTQUN6QyxDQUFDO09BQ1csZUFBZSxDQUFHO0lBQUQsc0JBQUM7Q0FBQTtBQUFsQiwwQ0FBZSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9ib290c3RyYXAubW9kdWxlLnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgTmdNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuaW1wb3J0IHsgVGhlbWVNb2R1bGUgfSBmcm9tICcuLi8uLi9AdGhlbWUvdGhlbWUubW9kdWxlJztcblxuaW1wb3J0IHsgQm9vdHN0cmFwUm91dGluZ01vZHVsZSB9IGZyb20gJy4vYm9vdHN0cmFwLXJvdXRpbmcubW9kdWxlJztcbmltcG9ydCB7IE1vZGFsc0NvbXBvbmVudCB9IGZyb20gJy4vbW9kYWxzL21vZGFscy5jb21wb25lbnQnO1xuaW1wb3J0IHsgTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL21vZGFscy9tb2RhbC9tb2RhbC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQm9vdHN0cmFwQ29tcG9uZW50IH0gZnJvbSAnLi9ib290c3RyYXAuY29tcG9uZW50JztcbmltcG9ydCB7IEJ1dHRvbnNNb2R1bGUgfSBmcm9tICcuL2J1dHRvbnMvYnV0dG9ucy5tb2R1bGUnO1xuaW1wb3J0IHsgRm9ybUlucHV0c0NvbXBvbmVudCB9IGZyb20gJy4vZm9ybS1pbnB1dHMvZm9ybS1pbnB1dHMuY29tcG9uZW50JztcblxuY29uc3QgQ09NUE9ORU5UUyA9IFtCb290c3RyYXBDb21wb25lbnQsIE1vZGFsc0NvbXBvbmVudCwgTW9kYWxDb21wb25lbnQsIEZvcm1JbnB1dHNDb21wb25lbnRdO1xuXG5jb25zdCBFTlRSWV9DT01QT05FTlRTID0gW01vZGFsQ29tcG9uZW50XTtcblxuQE5nTW9kdWxlKHtcbiAgICBpbXBvcnRzOiBbVGhlbWVNb2R1bGUsIEJvb3RzdHJhcFJvdXRpbmdNb2R1bGUsIEJ1dHRvbnNNb2R1bGVdLFxuICAgIGRlY2xhcmF0aW9uczogWy4uLkNPTVBPTkVOVFNdLFxuICAgIGVudHJ5Q29tcG9uZW50czogWy4uLkVOVFJZX0NPTVBPTkVOVFNdXG59KVxuZXhwb3J0IGNsYXNzIEJvb3RzdHJhcE1vZHVsZSB7fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/bootstrap.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.html":
/*!**********************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.html ***!
  \**********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Block Level Buttons</nb-card-header> <nb-card-body> <div class=\\\"row block-level-buttons\\\"> <div class=\\\"col-md-12\\\"> <div class=\\\"btn-group btn-group-full-width\\\" role=\\\"group\\\"> <button type=\\\"button\\\" class=\\\"btn btn-primary btn-group-icon btn-group-divider btn-fixed\\\"> <i class=\\\"nb-home\\\"></i> </button> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Icon Block Button</button> </div> <button type=\\\"button\\\" class=\\\"btn btn-outline-primary btn-block\\\">Block Button</button> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9ibG9jay1sZXZlbC1idXR0b25zL2Jsb2NrLWxldmVsLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWw/OGE1NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL2Jsb2NrLWxldmVsLWJ1dHRvbnMvYmxvY2stbGV2ZWwtYnV0dG9ucy5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkJsb2NrIExldmVsIEJ1dHRvbnM8L25iLWNhcmQtaGVhZGVyPiA8bmItY2FyZC1ib2R5PiA8ZGl2IGNsYXNzPVxcXCJyb3cgYmxvY2stbGV2ZWwtYnV0dG9uc1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+IDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cCBidG4tZ3JvdXAtZnVsbC13aWR0aFxcXCIgcm9sZT1cXFwiZ3JvdXBcXFwiPiA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeSBidG4tZ3JvdXAtaWNvbiBidG4tZ3JvdXAtZGl2aWRlciBidG4tZml4ZWRcXFwiPiA8aSBjbGFzcz1cXFwibmItaG9tZVxcXCI+PC9pPiA8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkljb24gQmxvY2sgQnV0dG9uPC9idXR0b24+IDwvZGl2PiA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5IGJ0bi1ibG9ja1xcXCI+QmxvY2sgQnV0dG9uPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.ts":
/*!********************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.ts ***!
  \********************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar BlockLevelButtonsComponent = /** @class */ (function () {\n    function BlockLevelButtonsComponent() {\n    }\n    BlockLevelButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-block-level-buttons',\n            template: __webpack_require__(/*! ./block-level-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.html\")\n        })\n    ], BlockLevelButtonsComponent);\n    return BlockLevelButtonsComponent;\n}());\nexports.BlockLevelButtonsComponent = BlockLevelButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9ibG9jay1sZXZlbC1idXR0b25zL2Jsb2NrLWxldmVsLWJ1dHRvbnMuY29tcG9uZW50LnRzPzIwMjMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTTFDO0lBQUE7SUFBeUMsQ0FBQztJQUE3QiwwQkFBMEI7UUFKdEMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSx5QkFBeUI7WUFDbkMsNkJBQWEsNkpBQXNDO1NBQ3RELENBQUM7T0FDVywwQkFBMEIsQ0FBRztJQUFELGlDQUFDO0NBQUE7QUFBN0IsZ0VBQTBCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvYmxvY2stbGV2ZWwtYnV0dG9ucy9ibG9jay1sZXZlbC1idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1ibG9jay1sZXZlbC1idXR0b25zJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYmxvY2stbGV2ZWwtYnV0dG9ucy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQmxvY2tMZXZlbEJ1dHRvbnNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Groups</nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <div class=\\\"example-container toggle-types\\\"> <div class=\\\"container-title\\\">Toggle Types</div> <div [(ngModel)]=\\\"radioModel\\\" ngbRadioGroup class=\\\"btn-group btn-group-toggle btn-outline-toggle-group btn-group-full-width btn-toggle-radio-group\\\"> <label ngbButtonLabel class=\\\"btn btn-outline-primary\\\"> <input ngbButton type=\\\"radio\\\" value=\\\"left\\\"> Left </label> <label ngbButtonLabel class=\\\"btn btn-outline-primary\\\"> <input ngbButton type=\\\"radio\\\" value=\\\"middle\\\"> Middle </label> <label ngbButtonLabel class=\\\"btn btn-outline-primary\\\"> <input ngbButton type=\\\"radio\\\" value=\\\"right\\\"> Right </label> </div> <div class=\\\"btn-group btn-group-toggle btn-group-full-width\\\" data-toggle=\\\"buttons\\\"> <label ngbButtonLabel class=\\\"btn btn-primary\\\" [class.active]=\\\"checkboxModel.left\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"checkboxModel.left\\\"> Left </label> <label ngbButtonLabel class=\\\"btn btn-primary\\\" [class.active]=\\\"checkboxModel.middle\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"checkboxModel.middle\\\"> Middle </label> <label ngbButtonLabel class=\\\"btn btn-primary\\\" [class.active]=\\\"checkboxModel.right\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"checkboxModel.right\\\"> Right </label> </div> </div> <div class=\\\"example-container toolbars-container\\\"> <div class=\\\"pagination-container\\\"> <div class=\\\"container-title\\\">Pagination</div> <div class=\\\"btn-group btn-group-toggle btn-outline-toggle-group\\\" data-toggle=\\\"buttons\\\" [(ngModel)]=\\\"paginationModel\\\" ngbRadioGroup> <label ngbButtonLabel class=\\\"btn btn-outline-success\\\"> <input ngbButton type=\\\"radio\\\" [value]=\\\"1\\\"> 1 </label> <label ngbButtonLabel class=\\\"btn btn-outline-success\\\"> <input ngbButton type=\\\"radio\\\" [value]=\\\"2\\\"> 2 </label> <label ngbButtonLabel class=\\\"btn btn-outline-success\\\"> <input ngbButton type=\\\"radio\\\" [value]=\\\"3\\\"> 3 </label> <label ngbButtonLabel class=\\\"btn btn-outline-success\\\"> <input ngbButton type=\\\"radio\\\" [value]=\\\"4\\\"> 4 </label> <label ngbButtonLabel class=\\\"btn btn-outline-success\\\"> <input ngbButton type=\\\"radio\\\" [value]=\\\"5\\\"> 5 </label> </div> </div> <div class=\\\"icon-toolbar-container\\\"> <div class=\\\"container-title\\\">Icon Toolbar</div> <div class=\\\"btn-group btn-group-toggle\\\" data-toggle=\\\"buttons\\\"> <label ngbButtonLabel class=\\\"btn btn-success\\\" [class.active]=\\\"iconToolbarModel.one\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"iconToolbarModel.one\\\"> 1 </label> <label ngbButtonLabel class=\\\"btn btn-success\\\" [class.active]=\\\"iconToolbarModel.two\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"iconToolbarModel.two\\\"> 2 </label> <label ngbButtonLabel class=\\\"btn btn-success\\\" [class.active]=\\\"iconToolbarModel.three\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"iconToolbarModel.three\\\"> 3 </label> <label ngbButtonLabel class=\\\"btn btn-success\\\" [class.active]=\\\"iconToolbarModel.four\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"iconToolbarModel.four\\\"> 4 </label> <label ngbButtonLabel class=\\\"btn btn-success\\\" [class.active]=\\\"iconToolbarModel.five\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"iconToolbarModel.five\\\"> 5 </label> </div> </div> </div> <div class=\\\"example-container\\\"> <div class=\\\"container-title divided-button-group\\\">Divided Button Group</div> <div class=\\\"btn-group btn-group-toggle btn-divided-group btn-outline-divided-group btn-group-full-width btn-divided-checkbox-group\\\" data-toggle=\\\"buttons\\\"> <label ngbButtonLabel class=\\\"btn btn-outline-success btn-icon\\\" [class.active]=\\\"dividedCheckboxModel.monday\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedCheckboxModel.monday\\\"> <i class=\\\"nb-arrow-thin-down\\\"></i> </label> <label ngbButtonLabel class=\\\"btn btn-outline-success btn-icon\\\" [class.active]=\\\"dividedCheckboxModel.tuesday\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedCheckboxModel.tuesday\\\"> <i class=\\\"nb-arrow-thin-up\\\"></i> </label> <label ngbButtonLabel class=\\\"btn btn-outline-success btn-icon\\\" [class.active]=\\\"dividedCheckboxModel.wednesday\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedCheckboxModel.wednesday\\\"> <i class=\\\"nb-arrow-thin-left\\\"></i> </label> <label ngbButtonLabel class=\\\"btn btn-outline-success btn-icon\\\" [class.active]=\\\"dividedCheckboxModel.thursday\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedCheckboxModel.thursday\\\"> <i class=\\\"nb-arrow-thin-right\\\"></i> </label> <label ngbButtonLabel class=\\\"btn btn-outline-success btn-icon\\\" [class.active]=\\\"dividedCheckboxModel.friday\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedCheckboxModel.friday\\\"> <i class=\\\"nb-arrow-left\\\"></i> </label> <label ngbButtonLabel class=\\\"btn btn-outline-success btn-icon\\\" [class.active]=\\\"dividedCheckboxModel.saturday\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedCheckboxModel.saturday\\\"> <i class=\\\"nb-arrow-right\\\"></i> </label> </div> </div> <div class=\\\"example-container\\\"> <div class=\\\"container-title\\\">Divided Button Group</div> <div class=\\\"row\\\"> <div [(ngModel)]=\\\"dividedButtonGroupOne\\\" ngbRadioGroup class=\\\"btn-group btn-group-toggle btn-divided-group btn-outline-divided-group btn-group-full-width col-md-12\\\"> <label ngbButtonLabel class=\\\"btn btn-outline-primary\\\"> <input ngbButton type=\\\"radio\\\" value=\\\"left\\\"> Left </label> <label ngbButtonLabel class=\\\"btn btn-outline-primary\\\"> <input ngbButton type=\\\"radio\\\" value=\\\"middle\\\"> Middle </label> <label ngbButtonLabel class=\\\"btn btn-outline-primary\\\"> <input ngbButton type=\\\"radio\\\" value=\\\"right\\\"> Right </label> </div> </div> <div class=\\\"btn-group btn-group-toggle btn-divided-group btn-group-full-width\\\" data-toggle=\\\"buttons\\\"> <label ngbButtonLabel class=\\\"btn btn-primary\\\" [class.active]=\\\"dividedButtonGroupTwo.left\\\" [class.focus]=\\\"dividedButtonGroupTwo.left\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedButtonGroupTwo.left\\\"> Left </label> <label ngbButtonLabel class=\\\"btn btn-primary\\\" [class.active]=\\\"dividedButtonGroupTwo.middle\\\" [class.focus]=\\\"dividedButtonGroupTwo.middle\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedButtonGroupTwo.middle\\\"> Middle </label> <label ngbButtonLabel class=\\\"btn btn-primary\\\" [class.active]=\\\"dividedButtonGroupTwo.right\\\" [class.focus]=\\\"dividedButtonGroupTwo.right\\\"> <input ngbButton type=\\\"checkbox\\\" [(ngModel)]=\\\"dividedButtonGroupTwo.right\\\"> Right </label> </div> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./button-groups.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b24tZ3JvdXBzL2J1dHRvbi1ncm91cHMuY29tcG9uZW50LnNjc3M/ZTU0NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsNFVBQWdLOztBQUU3TDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b24tZ3JvdXBzL2J1dHRvbi1ncm91cHMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vYnV0dG9uLWdyb3Vwcy5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ButtonGroupsComponent = /** @class */ (function () {\n    function ButtonGroupsComponent() {\n        this.radioModel = 'left';\n        this.checkboxModel = {\n            left: false,\n            middle: false,\n            right: false\n        };\n        this.dividedCheckboxModel = {\n            monday: true,\n            tuesday: true,\n            wednesday: false,\n            thursday: false,\n            friday: false,\n            saturday: false\n        };\n        this.paginationModel = 1;\n        this.iconToolbarModel = {\n            one: false,\n            two: false,\n            three: true,\n            four: false,\n            five: false\n        };\n        this.dividedButtonGroupOne = 'left';\n        this.dividedButtonGroupTwo = {\n            left: false,\n            middle: false,\n            right: false\n        };\n    }\n    ButtonGroupsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-button-groups',\n            styles: [__webpack_require__(/*! ./button-groups.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.scss\")],\n            template: __webpack_require__(/*! ./button-groups.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.html\")\n        })\n    ], ButtonGroupsComponent);\n    return ButtonGroupsComponent;\n}());\nexports.ButtonGroupsComponent = ButtonGroupsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b24tZ3JvdXBzL2J1dHRvbi1ncm91cHMuY29tcG9uZW50LnRzPzI0ZWYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBTEE7UUFNSSxlQUFVLEdBQUcsTUFBTSxDQUFDO1FBRXBCLGtCQUFhLEdBQUc7WUFDWixJQUFJLEVBQUUsS0FBSztZQUNYLE1BQU0sRUFBRSxLQUFLO1lBQ2IsS0FBSyxFQUFFLEtBQUs7U0FDZixDQUFDO1FBRUYseUJBQW9CLEdBQUc7WUFDbkIsTUFBTSxFQUFFLElBQUk7WUFDWixPQUFPLEVBQUUsSUFBSTtZQUNiLFNBQVMsRUFBRSxLQUFLO1lBQ2hCLFFBQVEsRUFBRSxLQUFLO1lBQ2YsTUFBTSxFQUFFLEtBQUs7WUFDYixRQUFRLEVBQUUsS0FBSztTQUNsQixDQUFDO1FBRUYsb0JBQWUsR0FBRyxDQUFDLENBQUM7UUFFcEIscUJBQWdCLEdBQUc7WUFDZixHQUFHLEVBQUUsS0FBSztZQUNWLEdBQUcsRUFBRSxLQUFLO1lBQ1YsS0FBSyxFQUFFLElBQUk7WUFDWCxJQUFJLEVBQUUsS0FBSztZQUNYLElBQUksRUFBRSxLQUFLO1NBQ2QsQ0FBQztRQUVGLDBCQUFxQixHQUFHLE1BQU0sQ0FBQztRQUUvQiwwQkFBcUIsR0FBRztZQUNwQixJQUFJLEVBQUUsS0FBSztZQUNYLE1BQU0sRUFBRSxLQUFLO1lBQ2IsS0FBSyxFQUFFLEtBQUs7U0FDZixDQUFDO0lBQ04sQ0FBQztJQW5DWSxxQkFBcUI7UUFMakMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsU0FBUyxtQkFBRywySUFBaUM7WUFDN0MsNkJBQWEsMklBQWdDO1NBQ2hELENBQUM7T0FDVyxxQkFBcUIsQ0FtQ2pDO0lBQUQsNEJBQUM7Q0FBQTtBQW5DWSxzREFBcUIiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b24tZ3JvdXBzL2J1dHRvbi1ncm91cHMuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LWJ1dHRvbi1ncm91cHMnLFxuICAgIHN0eWxlVXJsczogWycuL2J1dHRvbi1ncm91cHMuY29tcG9uZW50LnNjc3MnXSxcbiAgICB0ZW1wbGF0ZVVybDogJy4vYnV0dG9uLWdyb3Vwcy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgQnV0dG9uR3JvdXBzQ29tcG9uZW50IHtcbiAgICByYWRpb01vZGVsID0gJ2xlZnQnO1xuXG4gICAgY2hlY2tib3hNb2RlbCA9IHtcbiAgICAgICAgbGVmdDogZmFsc2UsXG4gICAgICAgIG1pZGRsZTogZmFsc2UsXG4gICAgICAgIHJpZ2h0OiBmYWxzZVxuICAgIH07XG5cbiAgICBkaXZpZGVkQ2hlY2tib3hNb2RlbCA9IHtcbiAgICAgICAgbW9uZGF5OiB0cnVlLFxuICAgICAgICB0dWVzZGF5OiB0cnVlLFxuICAgICAgICB3ZWRuZXNkYXk6IGZhbHNlLFxuICAgICAgICB0aHVyc2RheTogZmFsc2UsXG4gICAgICAgIGZyaWRheTogZmFsc2UsXG4gICAgICAgIHNhdHVyZGF5OiBmYWxzZVxuICAgIH07XG5cbiAgICBwYWdpbmF0aW9uTW9kZWwgPSAxO1xuXG4gICAgaWNvblRvb2xiYXJNb2RlbCA9IHtcbiAgICAgICAgb25lOiBmYWxzZSxcbiAgICAgICAgdHdvOiBmYWxzZSxcbiAgICAgICAgdGhyZWU6IHRydWUsXG4gICAgICAgIGZvdXI6IGZhbHNlLFxuICAgICAgICBmaXZlOiBmYWxzZVxuICAgIH07XG5cbiAgICBkaXZpZGVkQnV0dG9uR3JvdXBPbmUgPSAnbGVmdCc7XG5cbiAgICBkaXZpZGVkQnV0dG9uR3JvdXBUd28gPSB7XG4gICAgICAgIGxlZnQ6IGZhbHNlLFxuICAgICAgICBtaWRkbGU6IGZhbHNlLFxuICAgICAgICByaWdodDogZmFsc2VcbiAgICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.html":
/*!**************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.html ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-lg-12\\\"> <ngx-hero-buttons></ngx-hero-buttons> </div> <div class=\\\"col-md-12 col-lg-12 col-xxxl-6\\\"> <ngx-shape-buttons></ngx-shape-buttons> <div class=\\\"row\\\"> <div class=\\\"col-lg-5\\\"> <ngx-dropdown-buttons></ngx-dropdown-buttons> <ngx-icon-buttons></ngx-icon-buttons> </div> <div class=\\\"col-lg-7\\\"> <ngx-button-groups></ngx-button-groups> </div> </div> </div> <div class=\\\"col-md-12 col-lg-12 col-xxxl-6\\\"> <ngx-size-buttons></ngx-size-buttons> <ngx-default-buttons></ngx-default-buttons> <ngx-block-level-buttons></ngx-block-level-buttons> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC5odG1sPzBiZjAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC5odG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC1sZy0xMlxcXCI+IDxuZ3gtaGVyby1idXR0b25zPjwvbmd4LWhlcm8tYnV0dG9ucz4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMiBjb2wtbGctMTIgY29sLXh4eGwtNlxcXCI+IDxuZ3gtc2hhcGUtYnV0dG9ucz48L25neC1zaGFwZS1idXR0b25zPiA8ZGl2IGNsYXNzPVxcXCJyb3dcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctNVxcXCI+IDxuZ3gtZHJvcGRvd24tYnV0dG9ucz48L25neC1kcm9wZG93bi1idXR0b25zPiA8bmd4LWljb24tYnV0dG9ucz48L25neC1pY29uLWJ1dHRvbnM+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtbGctN1xcXCI+IDxuZ3gtYnV0dG9uLWdyb3Vwcz48L25neC1idXR0b24tZ3JvdXBzPiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJjb2wtbWQtMTIgY29sLWxnLTEyIGNvbC14eHhsLTZcXFwiPiA8bmd4LXNpemUtYnV0dG9ucz48L25neC1zaXplLWJ1dHRvbnM+IDxuZ3gtZGVmYXVsdC1idXR0b25zPjwvbmd4LWRlZmF1bHQtYnV0dG9ucz4gPG5neC1ibG9jay1sZXZlbC1idXR0b25zPjwvbmd4LWJsb2NrLWxldmVsLWJ1dHRvbnM+IDwvZGl2PiA8L2Rpdj4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss":
/*!**************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss ***!
  \**************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC5zY3NzPzJjMmYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLDRTQUFvSjs7QUFFakw7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvYnV0dG9ucy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9idXR0b25zLmNvbXBvbmVudC5zY3NzXCIpO1xuXG4gICAgICAgIGlmICh0eXBlb2YgcmVzdWx0ID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0LnRvU3RyaW5nKCk7XG4gICAgICAgIH1cbiAgICAiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.ts":
/*!************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.ts ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ButtonsComponent = /** @class */ (function () {\n    function ButtonsComponent() {\n    }\n    ButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-buttons',\n            styles: [__webpack_require__(/*! ./buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.scss\")],\n            template: __webpack_require__(/*! ./buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.html\")\n        })\n    ], ButtonsComponent);\n    return ButtonsComponent;\n}());\nexports.ButtonsComponent = ButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC50cz80ZjFkIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQU8xQztJQUFBO0lBQStCLENBQUM7SUFBbkIsZ0JBQWdCO1FBTDVCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsYUFBYTtZQUN2QixTQUFTLG1CQUFHLGlIQUEyQjtZQUN2Qyw2QkFBYSxpSEFBMEI7U0FDMUMsQ0FBQztPQUNXLGdCQUFnQixDQUFHO0lBQUQsdUJBQUM7Q0FBQTtBQUFuQiw0Q0FBZ0IiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1idXR0b25zJyxcbiAgICBzdHlsZVVybHM6IFsnLi9idXR0b25zLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2J1dHRvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIEJ1dHRvbnNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.module.ts":
/*!*********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.module.ts ***!
  \*********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_module_1 = __webpack_require__(/*! ../../../@theme/theme.module */ \"./src/main/webapp/app/ngx-admin/@theme/theme.module.ts\");\nvar default_buttons_component_1 = __webpack_require__(/*! ./default-buttons/default-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.ts\");\nvar hero_buttons_component_1 = __webpack_require__(/*! ./hero-buttons/hero-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.ts\");\nvar shape_buttons_component_1 = __webpack_require__(/*! ./shape-buttons/shape-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.ts\");\nvar size_buttons_component_1 = __webpack_require__(/*! ./size-buttons/size-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.ts\");\nvar buttons_component_1 = __webpack_require__(/*! ./buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.component.ts\");\nvar dropdown_button_component_1 = __webpack_require__(/*! ./dropdown-buttons/dropdown-button.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.ts\");\nvar block_level_buttons_component_1 = __webpack_require__(/*! ./block-level-buttons/block-level-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/block-level-buttons/block-level-buttons.component.ts\");\nvar button_groups_component_1 = __webpack_require__(/*! ./button-groups/button-groups.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/button-groups/button-groups.component.ts\");\nvar icon_buttons_component_1 = __webpack_require__(/*! ./icon-buttons/icon-buttons.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.ts\");\nvar components = [\n    buttons_component_1.ButtonsComponent,\n    default_buttons_component_1.DefaultButtonsComponent,\n    hero_buttons_component_1.HeroButtonComponent,\n    shape_buttons_component_1.ShapeButtonsComponent,\n    size_buttons_component_1.SizeButtonsComponent,\n    dropdown_button_component_1.DropdownButtonsComponent,\n    block_level_buttons_component_1.BlockLevelButtonsComponent,\n    button_groups_component_1.ButtonGroupsComponent,\n    icon_buttons_component_1.IconButtonsComponent\n];\nvar ButtonsModule = /** @class */ (function () {\n    function ButtonsModule() {\n    }\n    ButtonsModule = tslib_1.__decorate([\n        core_1.NgModule({\n            imports: [theme_module_1.ThemeModule],\n            exports: components.slice(),\n            declarations: components.slice(),\n            providers: []\n        })\n    ], ButtonsModule);\n    return ButtonsModule;\n}());\nexports.ButtonsModule = ButtonsModule;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLm1vZHVsZS50cz9jNGRlIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUF5QztBQUV6Qyx1SUFBMkQ7QUFDM0QsaU5BQXNGO0FBQ3RGLGtNQUE0RTtBQUM1RSx1TUFBZ0Y7QUFDaEYsa01BQTZFO0FBQzdFLHlKQUF1RDtBQUN2RCxtTkFBd0Y7QUFDeEYscU9BQWlHO0FBQ2pHLHVNQUFnRjtBQUNoRixrTUFBNkU7QUFFN0UsSUFBTSxVQUFVLEdBQUc7SUFDZixvQ0FBZ0I7SUFDaEIsbURBQXVCO0lBQ3ZCLDRDQUFtQjtJQUNuQiwrQ0FBcUI7SUFDckIsNkNBQW9CO0lBQ3BCLG9EQUF3QjtJQUN4QiwwREFBMEI7SUFDMUIsK0NBQXFCO0lBQ3JCLDZDQUFvQjtDQUN2QixDQUFDO0FBUUY7SUFBQTtJQUE0QixDQUFDO0lBQWhCLGFBQWE7UUFOekIsZUFBUSxDQUFDO1lBQ04sT0FBTyxFQUFFLENBQUMsMEJBQVcsQ0FBQztZQUN0QixPQUFPLEVBQU0sVUFBVSxRQUFDO1lBQ3hCLFlBQVksRUFBTSxVQUFVLFFBQUM7WUFDN0IsU0FBUyxFQUFFLEVBQUU7U0FDaEIsQ0FBQztPQUNXLGFBQWEsQ0FBRztJQUFELG9CQUFDO0NBQUE7QUFBaEIsc0NBQWEiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9idXR0b25zLm1vZHVsZS50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IE5nTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbmltcG9ydCB7IFRoZW1lTW9kdWxlIH0gZnJvbSAnLi4vLi4vLi4vQHRoZW1lL3RoZW1lLm1vZHVsZSc7XG5pbXBvcnQgeyBEZWZhdWx0QnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vZGVmYXVsdC1idXR0b25zL2RlZmF1bHQtYnV0dG9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSGVyb0J1dHRvbkNvbXBvbmVudCB9IGZyb20gJy4vaGVyby1idXR0b25zL2hlcm8tYnV0dG9ucy5jb21wb25lbnQnO1xuaW1wb3J0IHsgU2hhcGVCdXR0b25zQ29tcG9uZW50IH0gZnJvbSAnLi9zaGFwZS1idXR0b25zL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50JztcbmltcG9ydCB7IFNpemVCdXR0b25zQ29tcG9uZW50IH0gZnJvbSAnLi9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25zQ29tcG9uZW50IH0gZnJvbSAnLi9idXR0b25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBEcm9wZG93bkJ1dHRvbnNDb21wb25lbnQgfSBmcm9tICcuL2Ryb3Bkb3duLWJ1dHRvbnMvZHJvcGRvd24tYnV0dG9uLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCbG9ja0xldmVsQnV0dG9uc0NvbXBvbmVudCB9IGZyb20gJy4vYmxvY2stbGV2ZWwtYnV0dG9ucy9ibG9jay1sZXZlbC1idXR0b25zLmNvbXBvbmVudCc7XG5pbXBvcnQgeyBCdXR0b25Hcm91cHNDb21wb25lbnQgfSBmcm9tICcuL2J1dHRvbi1ncm91cHMvYnV0dG9uLWdyb3Vwcy5jb21wb25lbnQnO1xuaW1wb3J0IHsgSWNvbkJ1dHRvbnNDb21wb25lbnQgfSBmcm9tICcuL2ljb24tYnV0dG9ucy9pY29uLWJ1dHRvbnMuY29tcG9uZW50JztcblxuY29uc3QgY29tcG9uZW50cyA9IFtcbiAgICBCdXR0b25zQ29tcG9uZW50LFxuICAgIERlZmF1bHRCdXR0b25zQ29tcG9uZW50LFxuICAgIEhlcm9CdXR0b25Db21wb25lbnQsXG4gICAgU2hhcGVCdXR0b25zQ29tcG9uZW50LFxuICAgIFNpemVCdXR0b25zQ29tcG9uZW50LFxuICAgIERyb3Bkb3duQnV0dG9uc0NvbXBvbmVudCxcbiAgICBCbG9ja0xldmVsQnV0dG9uc0NvbXBvbmVudCxcbiAgICBCdXR0b25Hcm91cHNDb21wb25lbnQsXG4gICAgSWNvbkJ1dHRvbnNDb21wb25lbnRcbl07XG5cbkBOZ01vZHVsZSh7XG4gICAgaW1wb3J0czogW1RoZW1lTW9kdWxlXSxcbiAgICBleHBvcnRzOiBbLi4uY29tcG9uZW50c10sXG4gICAgZGVjbGFyYXRpb25zOiBbLi4uY29tcG9uZW50c10sXG4gICAgcHJvdmlkZXJzOiBbXVxufSlcbmV4cG9ydCBjbGFzcyBCdXR0b25zTW9kdWxlIHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/buttons.module.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.html":
/*!**************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.html ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header> <span>Default Buttons</span> <div class=\\\"dropdown\\\" ngbDropdown> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ngbDropdownToggle> {{ selectedView.title }} </button> <ul class=\\\"dropdown-menu\\\" ngbDropdownMenu> <li class=\\\"dropdown-item\\\" *ngFor=\\\"let v of buttonsViews\\\" (click)=\\\"this.selectedView = v\\\">{{ v.title }}</li> </ul> </div> </nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"example-container col-md-4\\\" *ngFor=\\\"let b of buttons[selectedView.key]\\\"> <div class=\\\"container-title\\\"> <span>{{ b.containerTitle }}</span> </div> <div class=\\\"container-btn\\\"> <button class=\\\"btn {{ b.class }} btn-demo\\\">{{ b.title }}</button> </div> <div class=\\\"{{ b.container }}\\\"> <div class=\\\"state-container\\\"> <div class=\\\"state-value original\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Default</span> <span class=\\\"subheader\\\">{{ b.default }}</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value hover\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Hover</span> <span class=\\\"subheader\\\">14% white</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value active\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Active</span> <span class=\\\"subheader\\\">14% black</span> </div> </div> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMvZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC5odG1sP2YwODIiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsc0xBQXNMLHNCQUFzQix5SkFBeUosV0FBVyx5TUFBeU0sb0JBQW9CLG1FQUFtRSxXQUFXLGNBQWMsV0FBVyxnQ0FBZ0MsZUFBZSwrS0FBK0ssYUFBYSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL2RlZmF1bHQtYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPG5iLWNhcmQ+IDxuYi1jYXJkLWhlYWRlcj4gPHNwYW4+RGVmYXVsdCBCdXR0b25zPC9zcGFuPiA8ZGl2IGNsYXNzPVxcXCJkcm9wZG93blxcXCIgbmdiRHJvcGRvd24+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBuZ2JEcm9wZG93blRvZ2dsZT4ge3sgc2VsZWN0ZWRWaWV3LnRpdGxlIH19IDwvYnV0dG9uPiA8dWwgY2xhc3M9XFxcImRyb3Bkb3duLW1lbnVcXFwiIG5nYkRyb3Bkb3duTWVudT4gPGxpIGNsYXNzPVxcXCJkcm9wZG93bi1pdGVtXFxcIiAqbmdGb3I9XFxcImxldCB2IG9mIGJ1dHRvbnNWaWV3c1xcXCIgKGNsaWNrKT1cXFwidGhpcy5zZWxlY3RlZFZpZXcgPSB2XFxcIj57eyB2LnRpdGxlIH19PC9saT4gPC91bD4gPC9kaXY+IDwvbmItY2FyZC1oZWFkZXI+IDxuYi1jYXJkLWJvZHk+IDxkaXYgY2xhc3M9XFxcInJvd1xcXCI+IDxkaXYgY2xhc3M9XFxcImV4YW1wbGUtY29udGFpbmVyIGNvbC1tZC00XFxcIiAqbmdGb3I9XFxcImxldCBiIG9mIGJ1dHRvbnNbc2VsZWN0ZWRWaWV3LmtleV1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj57eyBiLmNvbnRhaW5lclRpdGxlIH19PC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLWJ0blxcXCI+IDxidXR0b24gY2xhc3M9XFxcImJ0biB7eyBiLmNsYXNzIH19IGJ0bi1kZW1vXFxcIj57eyBiLnRpdGxlIH19PC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ7eyBiLmNvbnRhaW5lciB9fVxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIG9yaWdpbmFsXFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RhdGUtZGV0YWlsc1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPkRlZmF1bHQ8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPnt7IGIuZGVmYXVsdCB9fTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBob3ZlclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5Ib3Zlcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+MTQlIHdoaXRlPC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGFjdGl2ZVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5BY3RpdmU8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjE0JSBibGFjazwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss":
/*!**************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss ***!
  \**************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./default-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMvZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC5zY3NzP2Q3MjciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLGtWQUFrSzs7QUFFL0w7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvZGVmYXVsdC1idXR0b25zL2RlZmF1bHQtYnV0dG9ucy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.ts":
/*!************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.ts ***!
  \************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar DefaultButtonsComponent = /** @class */ (function () {\n    function DefaultButtonsComponent() {\n        this.buttonsViews = [\n            {\n                title: 'Default Buttons',\n                key: 'default'\n            },\n            {\n                title: 'Outline Buttons',\n                key: 'outline'\n            }\n        ];\n        this.selectedView = this.buttonsViews[0];\n        this.buttons = {\n            default: [\n                {\n                    class: 'btn-primary',\n                    container: 'primary-container',\n                    containerTitle: 'Primary Button',\n                    title: 'Primary',\n                    default: '#7659ff'\n                },\n                {\n                    class: 'btn-warning',\n                    container: 'warning-container',\n                    containerTitle: 'Warning Button',\n                    title: 'Warning',\n                    default: '#ffcb17'\n                },\n                {\n                    class: 'btn-success',\n                    container: 'success-container',\n                    containerTitle: 'Success Button',\n                    title: 'Success',\n                    default: '#00d977'\n                },\n                {\n                    class: 'btn-info',\n                    container: 'info-container',\n                    containerTitle: 'Info Button',\n                    title: 'Info',\n                    default: '#0088ff'\n                },\n                {\n                    class: 'btn-danger',\n                    container: 'danger-container',\n                    containerTitle: 'Danger Button',\n                    title: 'Danger',\n                    default: '#ff386a'\n                },\n                {\n                    class: 'btn-secondary',\n                    container: 'secondary-container',\n                    containerTitle: 'Default Button',\n                    title: 'Default',\n                    default: '#bdbaff'\n                }\n            ],\n            outline: [\n                {\n                    class: 'btn-outline-primary',\n                    container: 'primary-container outline',\n                    containerTitle: 'Primary Button',\n                    title: 'Primary',\n                    default: '#7659ff'\n                },\n                {\n                    class: 'btn-outline-warning',\n                    container: 'warning-container outline',\n                    containerTitle: 'Warning Button',\n                    title: 'Warning',\n                    default: '#ffcb17'\n                },\n                {\n                    class: 'btn-outline-success',\n                    container: 'success-container outline',\n                    containerTitle: 'Success Button',\n                    title: 'Success',\n                    default: '#00d977'\n                },\n                {\n                    class: 'btn-outline-info',\n                    container: 'info-container',\n                    containerTitle: 'Info Button',\n                    title: 'Info',\n                    default: '#0088ff'\n                },\n                {\n                    class: 'btn-outline-danger',\n                    container: 'danger-container outline',\n                    containerTitle: 'Danger Button',\n                    title: 'Danger',\n                    default: '#ff386a'\n                },\n                {\n                    class: 'btn-outline-secondary',\n                    container: 'secondary-container outline',\n                    containerTitle: 'Default Button',\n                    title: 'Default',\n                    default: '#bdbaff'\n                }\n            ]\n        };\n    }\n    DefaultButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-default-buttons',\n            styles: [__webpack_require__(/*! ./default-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./default-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.html\")\n        })\n    ], DefaultButtonsComponent);\n    return DefaultButtonsComponent;\n}());\nexports.DefaultButtonsComponent = DefaultButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMvZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC50cz9hYTRhIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQU8xQztJQUxBO1FBTUksaUJBQVksR0FBRztZQUNYO2dCQUNJLEtBQUssRUFBRSxpQkFBaUI7Z0JBQ3hCLEdBQUcsRUFBRSxTQUFTO2FBQ2pCO1lBQ0Q7Z0JBQ0ksS0FBSyxFQUFFLGlCQUFpQjtnQkFDeEIsR0FBRyxFQUFFLFNBQVM7YUFDakI7U0FDSixDQUFDO1FBRUYsaUJBQVksR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUMsQ0FBQyxDQUFDO1FBRXBDLFlBQU8sR0FBRztZQUNOLE9BQU8sRUFBRTtnQkFDTDtvQkFDSSxLQUFLLEVBQUUsYUFBYTtvQkFDcEIsU0FBUyxFQUFFLG1CQUFtQjtvQkFDOUIsY0FBYyxFQUFFLGdCQUFnQjtvQkFDaEMsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsYUFBYTtvQkFDcEIsU0FBUyxFQUFFLG1CQUFtQjtvQkFDOUIsY0FBYyxFQUFFLGdCQUFnQjtvQkFDaEMsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsYUFBYTtvQkFDcEIsU0FBUyxFQUFFLG1CQUFtQjtvQkFDOUIsY0FBYyxFQUFFLGdCQUFnQjtvQkFDaEMsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsVUFBVTtvQkFDakIsU0FBUyxFQUFFLGdCQUFnQjtvQkFDM0IsY0FBYyxFQUFFLGFBQWE7b0JBQzdCLEtBQUssRUFBRSxNQUFNO29CQUNiLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsWUFBWTtvQkFDbkIsU0FBUyxFQUFFLGtCQUFrQjtvQkFDN0IsY0FBYyxFQUFFLGVBQWU7b0JBQy9CLEtBQUssRUFBRSxRQUFRO29CQUNmLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsZUFBZTtvQkFDdEIsU0FBUyxFQUFFLHFCQUFxQjtvQkFDaEMsY0FBYyxFQUFFLGdCQUFnQjtvQkFDaEMsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjthQUNKO1lBRUQsT0FBTyxFQUFFO2dCQUNMO29CQUNJLEtBQUssRUFBRSxxQkFBcUI7b0JBQzVCLFNBQVMsRUFBRSwyQkFBMkI7b0JBQ3RDLGNBQWMsRUFBRSxnQkFBZ0I7b0JBQ2hDLEtBQUssRUFBRSxTQUFTO29CQUNoQixPQUFPLEVBQUUsU0FBUztpQkFDckI7Z0JBQ0Q7b0JBQ0ksS0FBSyxFQUFFLHFCQUFxQjtvQkFDNUIsU0FBUyxFQUFFLDJCQUEyQjtvQkFDdEMsY0FBYyxFQUFFLGdCQUFnQjtvQkFDaEMsS0FBSyxFQUFFLFNBQVM7b0JBQ2hCLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUscUJBQXFCO29CQUM1QixTQUFTLEVBQUUsMkJBQTJCO29CQUN0QyxjQUFjLEVBQUUsZ0JBQWdCO29CQUNoQyxLQUFLLEVBQUUsU0FBUztvQkFDaEIsT0FBTyxFQUFFLFNBQVM7aUJBQ3JCO2dCQUNEO29CQUNJLEtBQUssRUFBRSxrQkFBa0I7b0JBQ3pCLFNBQVMsRUFBRSxnQkFBZ0I7b0JBQzNCLGNBQWMsRUFBRSxhQUFhO29CQUM3QixLQUFLLEVBQUUsTUFBTTtvQkFDYixPQUFPLEVBQUUsU0FBUztpQkFDckI7Z0JBQ0Q7b0JBQ0ksS0FBSyxFQUFFLG9CQUFvQjtvQkFDM0IsU0FBUyxFQUFFLDBCQUEwQjtvQkFDckMsY0FBYyxFQUFFLGVBQWU7b0JBQy9CLEtBQUssRUFBRSxRQUFRO29CQUNmLE9BQU8sRUFBRSxTQUFTO2lCQUNyQjtnQkFDRDtvQkFDSSxLQUFLLEVBQUUsdUJBQXVCO29CQUM5QixTQUFTLEVBQUUsNkJBQTZCO29CQUN4QyxjQUFjLEVBQUUsZ0JBQWdCO29CQUNoQyxLQUFLLEVBQUUsU0FBUztvQkFDaEIsT0FBTyxFQUFFLFNBQVM7aUJBQ3JCO2FBQ0o7U0FDSixDQUFDO0lBQ04sQ0FBQztJQXpHWSx1QkFBdUI7UUFMbkMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsU0FBUyxtQkFBRyxpSkFBbUM7WUFDL0MsNkJBQWEsaUpBQWtDO1NBQ2xELENBQUM7T0FDVyx1QkFBdUIsQ0F5R25DO0lBQUQsOEJBQUM7Q0FBQTtBQXpHWSwwREFBdUIiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kZWZhdWx0LWJ1dHRvbnMvZGVmYXVsdC1idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1kZWZhdWx0LWJ1dHRvbnMnLFxuICAgIHN0eWxlVXJsczogWycuL2RlZmF1bHQtYnV0dG9ucy5jb21wb25lbnQuc2NzcyddLFxuICAgIHRlbXBsYXRlVXJsOiAnLi9kZWZhdWx0LWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIERlZmF1bHRCdXR0b25zQ29tcG9uZW50IHtcbiAgICBidXR0b25zVmlld3MgPSBbXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiAnRGVmYXVsdCBCdXR0b25zJyxcbiAgICAgICAgICAgIGtleTogJ2RlZmF1bHQnXG4gICAgICAgIH0sXG4gICAgICAgIHtcbiAgICAgICAgICAgIHRpdGxlOiAnT3V0bGluZSBCdXR0b25zJyxcbiAgICAgICAgICAgIGtleTogJ291dGxpbmUnXG4gICAgICAgIH1cbiAgICBdO1xuXG4gICAgc2VsZWN0ZWRWaWV3ID0gdGhpcy5idXR0b25zVmlld3NbMF07XG5cbiAgICBidXR0b25zID0ge1xuICAgICAgICBkZWZhdWx0OiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4tcHJpbWFyeScsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAncHJpbWFyeS1jb250YWluZXInLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnUHJpbWFyeSBCdXR0b24nLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnUHJpbWFyeScsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyM3NjU5ZmYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuLXdhcm5pbmcnLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJ3dhcm5pbmctY29udGFpbmVyJyxcbiAgICAgICAgICAgICAgICBjb250YWluZXJUaXRsZTogJ1dhcm5pbmcgQnV0dG9uJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1dhcm5pbmcnLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICcjZmZjYjE3J1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0bi1zdWNjZXNzJyxcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICdzdWNjZXNzLWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdTdWNjZXNzIEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnIzAwZDk3NydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4taW5mbycsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAnaW5mby1jb250YWluZXInLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnSW5mbyBCdXR0b24nLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnSW5mbycsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyMwMDg4ZmYnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuLWRhbmdlcicsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAnZGFuZ2VyLWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdEYW5nZXIgQnV0dG9uJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0RhbmdlcicsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyNmZjM4NmEnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuLXNlY29uZGFyeScsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAnc2Vjb25kYXJ5LWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdEZWZhdWx0IEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdEZWZhdWx0JyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnI2JkYmFmZidcbiAgICAgICAgICAgIH1cbiAgICAgICAgXSxcblxuICAgICAgICBvdXRsaW5lOiBbXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4tb3V0bGluZS1wcmltYXJ5JyxcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICdwcmltYXJ5LWNvbnRhaW5lciBvdXRsaW5lJyxcbiAgICAgICAgICAgICAgICBjb250YWluZXJUaXRsZTogJ1ByaW1hcnkgQnV0dG9uJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ1ByaW1hcnknLFxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6ICcjNzY1OWZmJ1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBjbGFzczogJ2J0bi1vdXRsaW5lLXdhcm5pbmcnLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJ3dhcm5pbmctY29udGFpbmVyIG91dGxpbmUnLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnV2FybmluZyBCdXR0b24nLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnV2FybmluZycsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyNmZmNiMTcnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuLW91dGxpbmUtc3VjY2VzcycsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyOiAnc3VjY2Vzcy1jb250YWluZXIgb3V0bGluZScsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdTdWNjZXNzIEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdTdWNjZXNzJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnIzAwZDk3NydcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4tb3V0bGluZS1pbmZvJyxcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICdpbmZvLWNvbnRhaW5lcicsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdJbmZvIEJ1dHRvbicsXG4gICAgICAgICAgICAgICAgdGl0bGU6ICdJbmZvJyxcbiAgICAgICAgICAgICAgICBkZWZhdWx0OiAnIzAwODhmZidcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgY2xhc3M6ICdidG4tb3V0bGluZS1kYW5nZXInLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lcjogJ2Rhbmdlci1jb250YWluZXIgb3V0bGluZScsXG4gICAgICAgICAgICAgICAgY29udGFpbmVyVGl0bGU6ICdEYW5nZXIgQnV0dG9uJyxcbiAgICAgICAgICAgICAgICB0aXRsZTogJ0RhbmdlcicsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyNmZjM4NmEnXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIGNsYXNzOiAnYnRuLW91dGxpbmUtc2Vjb25kYXJ5JyxcbiAgICAgICAgICAgICAgICBjb250YWluZXI6ICdzZWNvbmRhcnktY29udGFpbmVyIG91dGxpbmUnLFxuICAgICAgICAgICAgICAgIGNvbnRhaW5lclRpdGxlOiAnRGVmYXVsdCBCdXR0b24nLFxuICAgICAgICAgICAgICAgIHRpdGxlOiAnRGVmYXVsdCcsXG4gICAgICAgICAgICAgICAgZGVmYXVsdDogJyNiZGJhZmYnXG4gICAgICAgICAgICB9XG4gICAgICAgIF1cbiAgICB9O1xufVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/default-buttons/default-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.html":
/*!***************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.html ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Dropdowns</nb-card-header> <nb-card-body> <div class=\\\"dropdown btn-group\\\" ngbDropdown> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Dropdown</button> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" ngbDropdownToggle></button> <ul class=\\\"dropdown-menu\\\" ngbDropdownMenu> <li class=\\\"dropdown-item\\\">Icon Button</li> <li class=\\\"dropdown-item\\\">Hero Button</li> <li class=\\\"dropdown-item\\\">Default</li> </ul> </div> <div class=\\\"dropdown\\\" ngbDropdown> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ngbDropdownToggle> Dropdown </button> <ul class=\\\"dropdown-menu\\\" ngbDropdownMenu> <li class=\\\"dropdown-item\\\">Icon Button</li> <li class=\\\"dropdown-item\\\">Hero Button</li> <li class=\\\"dropdown-item\\\">Default</li> </ul> </div> <div class=\\\"dropdown\\\" placement=\\\"top\\\" ngbDropdown> <button class=\\\"btn btn-outline-primary\\\" type=\\\"button\\\" ngbDropdownToggle> Dropup </button> <ul class=\\\"dropdown-menu\\\" ngbDropdownMenu> <li class=\\\"dropdown-item\\\">Icon Button</li> <li class=\\\"dropdown-item\\\">Hero Button</li> <li class=\\\"dropdown-item\\\">Default</li> </ul> </div> <div class=\\\"dropdown ghost-dropdown\\\" ngbDropdown> <button class=\\\"btn btn-primary\\\" type=\\\"button\\\" ngbDropdownToggle> Dropdown </button> <ul class=\\\"dropdown-menu\\\" ngbDropdownMenu> <li class=\\\"dropdown-item\\\">Icon Button</li> <li class=\\\"dropdown-item\\\">Hero Button</li> <li class=\\\"dropdown-item\\\">Default</li> </ul> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kcm9wZG93bi1idXR0b25zL2Ryb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQuaHRtbD9kZDM3Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvZHJvcGRvd24tYnV0dG9ucy9kcm9wZG93bi1idXR0b24uY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPG5iLWNhcmQ+IDxuYi1jYXJkLWhlYWRlcj5CdXR0b24gRHJvcGRvd25zPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwiZHJvcGRvd24gYnRuLWdyb3VwXFxcIiBuZ2JEcm9wZG93bj4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnlcXFwiPkRyb3Bkb3duPC9idXR0b24+IDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiBuZ2JEcm9wZG93blRvZ2dsZT48L2J1dHRvbj4gPHVsIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51XFxcIiBuZ2JEcm9wZG93bk1lbnU+IDxsaSBjbGFzcz1cXFwiZHJvcGRvd24taXRlbVxcXCI+SWNvbiBCdXR0b248L2xpPiA8bGkgY2xhc3M9XFxcImRyb3Bkb3duLWl0ZW1cXFwiPkhlcm8gQnV0dG9uPC9saT4gPGxpIGNsYXNzPVxcXCJkcm9wZG93bi1pdGVtXFxcIj5EZWZhdWx0PC9saT4gPC91bD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3Bkb3duXFxcIiBuZ2JEcm9wZG93bj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIG5nYkRyb3Bkb3duVG9nZ2xlPiBEcm9wZG93biA8L2J1dHRvbj4gPHVsIGNsYXNzPVxcXCJkcm9wZG93bi1tZW51XFxcIiBuZ2JEcm9wZG93bk1lbnU+IDxsaSBjbGFzcz1cXFwiZHJvcGRvd24taXRlbVxcXCI+SWNvbiBCdXR0b248L2xpPiA8bGkgY2xhc3M9XFxcImRyb3Bkb3duLWl0ZW1cXFwiPkhlcm8gQnV0dG9uPC9saT4gPGxpIGNsYXNzPVxcXCJkcm9wZG93bi1pdGVtXFxcIj5EZWZhdWx0PC9saT4gPC91bD4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImRyb3Bkb3duXFxcIiBwbGFjZW1lbnQ9XFxcInRvcFxcXCIgbmdiRHJvcGRvd24+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tb3V0bGluZS1wcmltYXJ5XFxcIiB0eXBlPVxcXCJidXR0b25cXFwiIG5nYkRyb3Bkb3duVG9nZ2xlPiBEcm9wdXAgPC9idXR0b24+IDx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudVxcXCIgbmdiRHJvcGRvd25NZW51PiA8bGkgY2xhc3M9XFxcImRyb3Bkb3duLWl0ZW1cXFwiPkljb24gQnV0dG9uPC9saT4gPGxpIGNsYXNzPVxcXCJkcm9wZG93bi1pdGVtXFxcIj5IZXJvIEJ1dHRvbjwvbGk+IDxsaSBjbGFzcz1cXFwiZHJvcGRvd24taXRlbVxcXCI+RGVmYXVsdDwvbGk+IDwvdWw+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJkcm9wZG93biBnaG9zdC1kcm9wZG93blxcXCIgbmdiRHJvcGRvd24+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tcHJpbWFyeVxcXCIgdHlwZT1cXFwiYnV0dG9uXFxcIiBuZ2JEcm9wZG93blRvZ2dsZT4gRHJvcGRvd24gPC9idXR0b24+IDx1bCBjbGFzcz1cXFwiZHJvcGRvd24tbWVudVxcXCIgbmdiRHJvcGRvd25NZW51PiA8bGkgY2xhc3M9XFxcImRyb3Bkb3duLWl0ZW1cXFwiPkljb24gQnV0dG9uPC9saT4gPGxpIGNsYXNzPVxcXCJkcm9wZG93bi1pdGVtXFxcIj5IZXJvIEJ1dHRvbjwvbGk+IDxsaSBjbGFzcz1cXFwiZHJvcGRvd24taXRlbVxcXCI+RGVmYXVsdDwvbGk+IDwvdWw+IDwvZGl2PiA8L25iLWNhcmQtYm9keT4gPC9uYi1jYXJkPiBcIjsiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss":
/*!***************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss ***!
  \***************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./dropdown-button.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kcm9wZG93bi1idXR0b25zL2Ryb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQuc2Nzcz9jNDU0Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyxtVkFBa0s7O0FBRS9MO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL2Ryb3Bkb3duLWJ1dHRvbnMvZHJvcGRvd24tYnV0dG9uLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL2Ryb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.ts":
/*!*************************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.ts ***!
  \*************************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar DropdownButtonsComponent = /** @class */ (function () {\n    function DropdownButtonsComponent() {\n    }\n    DropdownButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-dropdown-buttons',\n            styles: [__webpack_require__(/*! ./dropdown-button.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.scss\")],\n            template: __webpack_require__(/*! ./dropdown-button.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.html\")\n        })\n    ], DropdownButtonsComponent);\n    return DropdownButtonsComponent;\n}());\nexports.DropdownButtonsComponent = DropdownButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kcm9wZG93bi1idXR0b25zL2Ryb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQudHM/MGJiYiJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFPMUM7SUFBQTtJQUF1QyxDQUFDO0lBQTNCLHdCQUF3QjtRQUxwQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLHNCQUFzQjtZQUNoQyxTQUFTLG1CQUFHLGtKQUFtQztZQUMvQyw2QkFBYSxrSkFBa0M7U0FDbEQsQ0FBQztPQUNXLHdCQUF3QixDQUFHO0lBQUQsK0JBQUM7Q0FBQTtBQUEzQiw0REFBd0IiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9kcm9wZG93bi1idXR0b25zL2Ryb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtZHJvcGRvd24tYnV0dG9ucycsXG4gICAgc3R5bGVVcmxzOiBbJy4vZHJvcGRvd24tYnV0dG9uLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Ryb3Bkb3duLWJ1dHRvbi5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgRHJvcGRvd25CdXR0b25zQ29tcG9uZW50IHt9XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/dropdown-buttons/dropdown-button.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.html":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.html ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Hero Buttons</nb-card-header> <nb-card-body> <div class=\\\"row\\\"> <div class=\\\"example-container col-sm-6 col-md-4 col-xl-3 col-xxxl-2\\\" *ngFor=\\\"let hb of settings\\\"> <div class=\\\"container-title\\\"> <span>{{ hb.title }}</span> </div> <div class=\\\"container-btn\\\"> <button class=\\\"btn {{ hb.class }} btn-demo\\\">{{ hb.buttonTitle }}</button> </div> <div class=\\\"{{ hb.container }}\\\"> <div class=\\\"state-container\\\" *ngIf=\\\"hb[themeName].border\\\"> <div class=\\\"state-value border\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Border</span> <span class=\\\"subheader\\\">{{ hb[themeName].border }}</span> </div> </div> <div class=\\\"state-container\\\" *ngIf=\\\"hb[themeName].color\\\"> <div class=\\\"state-value color\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Color</span> <span class=\\\"subheader\\\">{{ hb[themeName].color }}</span> </div> </div> <div class=\\\"state-container\\\" *ngIf=\\\"hb[themeName].gradientLeft\\\"> <div class=\\\"state-value gradient\\\"></div> <div class=\\\"state-details\\\"> <span class=\\\"header\\\">Linear Gradient</span> <span class=\\\"subheader\\\">{{ hb[themeName].gradientLeft }}</span> <span class=\\\"subheader\\\">{{ hb[themeName].gradientRight }}</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value bevel\\\" [ngClass]=\\\"{ 'none': !hb[themeName].bevel }\\\"></div> <div class=\\\"state-details\\\" *ngIf=\\\"hb[themeName].bevel\\\"> <span class=\\\"header\\\">Bevel</span> <span class=\\\"subheader\\\">0 3px 0 0</span> <span class=\\\"subheader\\\">{{ hb[themeName].bevel }}</span> </div> <div class=\\\"state-details\\\" *ngIf=\\\"!hb[themeName].bevel\\\"> <span class=\\\"header\\\">No Bevel</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value shadow\\\" [ngClass]=\\\"{ 'none': !hb[themeName].shadow }\\\"></div> <div class=\\\"state-details\\\" *ngIf=\\\"hb[themeName].shadow\\\"> <span class=\\\"header\\\">Shadow</span> <span class=\\\"subheader\\\">0 4px 10px 0</span> <span class=\\\"subheader\\\">{{ hb[themeName].shadow }}</span> </div> <div class=\\\"state-details\\\" *ngIf=\\\"!hb[themeName].shadow\\\"> <span class=\\\"header\\\">No Shadow</span> </div> </div> <div class=\\\"state-container\\\"> <div class=\\\"state-value glow\\\" [ngClass]=\\\"{ 'none': !hb[themeName].glow }\\\"></div> <div class=\\\"state-details\\\" *ngIf=\\\"hb[themeName].glow\\\"> <span class=\\\"header\\\">Glow</span> <span class=\\\"subheader\\\">{{ hb[themeName].glow.params }}</span> <span class=\\\"subheader\\\">{{ hb[themeName].glow.color }}</span> </div> <div class=\\\"state-details\\\" *ngIf=\\\"!hb[themeName].glow\\\"> <span class=\\\"header\\\">No Glow</span> </div> </div> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9oZXJvLWJ1dHRvbnMvaGVyby1idXR0b25zLmNvbXBvbmVudC5odG1sP2U4ODMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEsMlBBQTJQLFlBQVksbUVBQW1FLFlBQVksY0FBYyxrQkFBa0IsZ0NBQWdDLGdCQUFnQiwyTUFBMk0sd0JBQXdCLDBOQUEwTix1QkFBdUIsOE9BQThPLDhCQUE4QixvQ0FBb0MsK0JBQStCLG9HQUFvRywrQkFBK0IsaUxBQWlMLHVCQUF1QixnTkFBZ04sZ0NBQWdDLHNMQUFzTCx3QkFBd0IsZ05BQWdOLDhCQUE4QixvSUFBb0ksNkJBQTZCLG9DQUFvQyw0QkFBNEIiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9oZXJvLWJ1dHRvbnMvaGVyby1idXR0b25zLmNvbXBvbmVudC5odG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+SGVybyBCdXR0b25zPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiZXhhbXBsZS1jb250YWluZXIgY29sLXNtLTYgY29sLW1kLTQgY29sLXhsLTMgY29sLXh4eGwtMlxcXCIgKm5nRm9yPVxcXCJsZXQgaGIgb2Ygc2V0dGluZ3NcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj57eyBoYi50aXRsZSB9fTwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci1idG5cXFwiPiA8YnV0dG9uIGNsYXNzPVxcXCJidG4ge3sgaGIuY2xhc3MgfX0gYnRuLWRlbW9cXFwiPnt7IGhiLmJ1dHRvblRpdGxlIH19PC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJ7eyBoYi5jb250YWluZXIgfX1cXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmJvcmRlclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGJvcmRlclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5Cb3JkZXI8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPnt7IGhiW3RoZW1lTmFtZV0uYm9yZGVyIH19PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCIgKm5nSWY9XFxcImhiW3RoZW1lTmFtZV0uY29sb3JcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBjb2xvclxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5Db2xvcjwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5jb2xvciB9fTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmdyYWRpZW50TGVmdFxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGdyYWRpZW50XFxcIj48L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3RhdGUtZGV0YWlsc1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPkxpbmVhciBHcmFkaWVudDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5ncmFkaWVudExlZnQgfX08L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPnt7IGhiW3RoZW1lTmFtZV0uZ3JhZGllbnRSaWdodCB9fTwvc3Bhbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS12YWx1ZSBiZXZlbFxcXCIgW25nQ2xhc3NdPVxcXCJ7ICdub25lJzogIWhiW3RoZW1lTmFtZV0uYmV2ZWwgfVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmJldmVsXFxcIj4gPHNwYW4gY2xhc3M9XFxcImhlYWRlclxcXCI+QmV2ZWw8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjAgM3B4IDAgMDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5iZXZlbCB9fTwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiICpuZ0lmPVxcXCIhaGJbdGhlbWVOYW1lXS5iZXZlbFxcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPk5vIEJldmVsPC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIHNoYWRvd1xcXCIgW25nQ2xhc3NdPVxcXCJ7ICdub25lJzogIWhiW3RoZW1lTmFtZV0uc2hhZG93IH1cXFwiPjwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIiAqbmdJZj1cXFwiaGJbdGhlbWVOYW1lXS5zaGFkb3dcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5TaGFkb3c8L3NwYW4+IDxzcGFuIGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPjAgNHB4IDEwcHggMDwvc3Bhbj4gPHNwYW4gY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+e3sgaGJbdGhlbWVOYW1lXS5zaGFkb3cgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIiAqbmdJZj1cXFwiIWhiW3RoZW1lTmFtZV0uc2hhZG93XFxcIj4gPHNwYW4gY2xhc3M9XFxcImhlYWRlclxcXCI+Tm8gU2hhZG93PC9zcGFuPiA8L2Rpdj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcInN0YXRlLXZhbHVlIGdsb3dcXFwiIFtuZ0NsYXNzXT1cXFwieyAnbm9uZSc6ICFoYlt0aGVtZU5hbWVdLmdsb3cgfVxcXCI+PC9kaXY+IDxkaXYgY2xhc3M9XFxcInN0YXRlLWRldGFpbHNcXFwiICpuZ0lmPVxcXCJoYlt0aGVtZU5hbWVdLmdsb3dcXFwiPiA8c3BhbiBjbGFzcz1cXFwiaGVhZGVyXFxcIj5HbG93PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj57eyBoYlt0aGVtZU5hbWVdLmdsb3cucGFyYW1zIH19PC9zcGFuPiA8c3BhbiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj57eyBoYlt0aGVtZU5hbWVdLmdsb3cuY29sb3IgfX08L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdGF0ZS1kZXRhaWxzXFxcIiAqbmdJZj1cXFwiIWhiW3RoZW1lTmFtZV0uZ2xvd1xcXCI+IDxzcGFuIGNsYXNzPVxcXCJoZWFkZXJcXFwiPk5vIEdsb3c8L3NwYW4+IDwvZGl2PiA8L2Rpdj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./hero-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9oZXJvLWJ1dHRvbnMvaGVyby1idXR0b25zLmNvbXBvbmVudC5zY3NzPzRjNzUiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlVQUErSjs7QUFFNUw7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvaGVyby1idXR0b25zL2hlcm8tYnV0dG9ucy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9oZXJvLWJ1dHRvbnMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.ts":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar theme_1 = __webpack_require__(/*! @nebular/theme */ \"./node_modules/@nebular/theme/index.js\");\nvar HeroButtonComponent = /** @class */ (function () {\n    function HeroButtonComponent(themeService) {\n        var _this = this;\n        this.themeService = themeService;\n        this.themeName = 'default';\n        this.themeSubscription = this.themeService.getJsTheme().subscribe(function (theme) {\n            _this.themeName = theme.name;\n            _this.init(theme.variables);\n        });\n    }\n    HeroButtonComponent.prototype.init = function (colors) {\n        this.settings = [\n            {\n                class: 'btn-hero-primary',\n                container: 'primary-container',\n                title: 'Primary Button',\n                buttonTitle: 'Primary',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.primary + \", 20deg)\",\n                    gradientRight: colors.primary\n                },\n                corporate: {\n                    color: colors.primary,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (115, 161, 255, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.primary + \", 20deg)\",\n                    gradientRight: colors.primary,\n                    bevel: \"shade(\" + colors.primary + \", 14%)\",\n                    shadow: 'rgba (6, 7, 64, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.primary + \", 10deg)\"\n                    }\n                }\n            },\n            {\n                class: 'btn-hero-warning',\n                container: 'warning-container',\n                title: 'Warning Button',\n                buttonTitle: 'Warning',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.warning + \", 10deg)\",\n                    gradientRight: colors.warning\n                },\n                corporate: {\n                    color: colors.warning,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (256, 163, 107, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.warning + \", 10deg)\",\n                    gradientRight: colors.warning,\n                    bevel: \"shade(\" + colors.warning + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.warning + \", 5deg)\"\n                    }\n                }\n            },\n            {\n                class: 'btn-hero-success',\n                container: 'success-container',\n                title: 'Success Button',\n                buttonTitle: 'Success',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.success + \", 20deg)\",\n                    gradientRight: colors.success\n                },\n                corporate: {\n                    color: colors.success,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (93, 207, 227, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.success + \", 20deg)\",\n                    gradientRight: colors.success,\n                    bevel: \"shade(\" + colors.success + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.success + \", 10deg)\"\n                    }\n                }\n            },\n            {\n                class: 'btn-hero-info',\n                container: 'info-container',\n                title: 'Info Button',\n                buttonTitle: 'Info',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.info + \", -10deg)\",\n                    gradientRight: colors.info\n                },\n                corporate: {\n                    color: colors.info,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (186, 127, 236, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.info + \", -10deg)\",\n                    gradientRight: colors.info,\n                    bevel: \"shade(\" + colors.info + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.info + \", -5deg)\"\n                    }\n                }\n            },\n            {\n                class: 'btn-hero-danger',\n                container: 'danger-container',\n                title: 'Danger Button',\n                buttonTitle: 'Danger',\n                default: {\n                    gradientLeft: \"adjust-hue(\" + colors.danger + \", -20deg)\",\n                    gradientRight: colors.danger\n                },\n                corporate: {\n                    color: colors.danger,\n                    glow: {\n                        params: '0 0 20px 0',\n                        color: 'rgba (255, 107, 131, 0.5)'\n                    }\n                },\n                cosmic: {\n                    gradientLeft: \"adjust-hue(\" + colors.danger + \", -20deg)\",\n                    gradientRight: colors.danger,\n                    bevel: \"shade(\" + colors.danger + \", 14%)\",\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: \"adjust-hue(\" + colors.danger + \", -10deg)\"\n                    }\n                }\n            },\n            {\n                class: 'btn-hero-secondary',\n                container: 'secondary-container',\n                title: 'Ghost Button',\n                buttonTitle: 'Ghost',\n                default: {\n                    border: '#dadfe6'\n                },\n                corporate: {\n                    color: '#edf2f5'\n                },\n                cosmic: {\n                    border: colors.primary,\n                    bevel: '#665ebd',\n                    shadow: 'rgba (33, 7, 77, 0.5)',\n                    glow: {\n                        params: '0 2px 12px 0',\n                        color: 'rgba (146, 141, 255, 1)'\n                    }\n                }\n            }\n        ];\n    };\n    HeroButtonComponent.prototype.ngOnDestroy = function () {\n        this.themeSubscription.unsubscribe();\n    };\n    var _a;\n    HeroButtonComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-hero-buttons',\n            styles: [__webpack_require__(/*! ./hero-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./hero-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.html\")\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _a : Object])\n    ], HeroButtonComponent);\n    return HeroButtonComponent;\n}());\nexports.HeroButtonComponent = HeroButtonComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/hero-buttons/hero-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.html":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.html ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Icon buttons</nb-card-header> <nb-card-body> <div class=\\\"row icon-buttons\\\"> <div class=\\\"col-md-12\\\"> <div class=\\\"btn-group\\\"> <button type=\\\"button\\\" class=\\\"btn btn-primary btn-group-icon btn-group-divider\\\"> <i class=\\\"nb-home\\\"></i> </button> <button type=\\\"button\\\" class=\\\"btn btn-primary\\\">Icon Button</button> </div> <div class=\\\"btn-with-icon-example\\\"> <button type=\\\"button\\\" class=\\\"btn btn-primary btn-with-icon\\\"> <i class=\\\"nb-home\\\"></i> <span>Icon Button</span> </button> </div> <div class=\\\"icon-button-examples\\\"> <button type=\\\"button\\\" class=\\\"btn btn-outline-primary btn-icon\\\"> <i class=\\\"nb-layout-centre\\\"></i> </button> <button type=\\\"button\\\" class=\\\"btn btn-outline-success btn-icon\\\"> <i class=\\\"nb-layout-default\\\"></i> </button> <button type=\\\"button\\\" class=\\\"btn btn-outline-danger btn-icon\\\"> <i class=\\\"nb-layout-one-column\\\"></i> </button> </div> <div class=\\\"icon-button-examples\\\"> <button type=\\\"button\\\" class=\\\"btn btn-primary btn-icon\\\"> <i class=\\\"nb-shuffle\\\"></i> </button> <button type=\\\"button\\\" class=\\\"btn btn-success btn-icon\\\"> <i class=\\\"nb-skip-backward-outline\\\"></i> </button> <button type=\\\"button\\\" class=\\\"btn btn-danger btn-icon\\\"> <i class=\\\"nb-skip-forward-outline\\\"></i> </button> </div> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9pY29uLWJ1dHRvbnMvaWNvbi1idXR0b25zLmNvbXBvbmVudC5odG1sP2UzYzYiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9pY29uLWJ1dHRvbnMvaWNvbi1idXR0b25zLmNvbXBvbmVudC5odG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+SWNvbiBidXR0b25zPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwicm93IGljb24tYnV0dG9uc1xcXCI+IDxkaXYgY2xhc3M9XFxcImNvbC1tZC0xMlxcXCI+IDxkaXYgY2xhc3M9XFxcImJ0bi1ncm91cFxcXCI+IDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1ncm91cC1pY29uIGJ0bi1ncm91cC1kaXZpZGVyXFxcIj4gPGkgY2xhc3M9XFxcIm5iLWhvbWVcXFwiPjwvaT4gPC9idXR0b24+IDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIj5JY29uIEJ1dHRvbjwvYnV0dG9uPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwiYnRuLXdpdGgtaWNvbi1leGFtcGxlXFxcIj4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgYnRuLXdpdGgtaWNvblxcXCI+IDxpIGNsYXNzPVxcXCJuYi1ob21lXFxcIj48L2k+IDxzcGFuPkljb24gQnV0dG9uPC9zcGFuPiA8L2J1dHRvbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcImljb24tYnV0dG9uLWV4YW1wbGVzXFxcIj4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLW91dGxpbmUtcHJpbWFyeSBidG4taWNvblxcXCI+IDxpIGNsYXNzPVxcXCJuYi1sYXlvdXQtY2VudHJlXFxcIj48L2k+IDwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tb3V0bGluZS1zdWNjZXNzIGJ0bi1pY29uXFxcIj4gPGkgY2xhc3M9XFxcIm5iLWxheW91dC1kZWZhdWx0XFxcIj48L2k+IDwvYnV0dG9uPiA8YnV0dG9uIHR5cGU9XFxcImJ1dHRvblxcXCIgY2xhc3M9XFxcImJ0biBidG4tb3V0bGluZS1kYW5nZXIgYnRuLWljb25cXFwiPiA8aSBjbGFzcz1cXFwibmItbGF5b3V0LW9uZS1jb2x1bW5cXFwiPjwvaT4gPC9idXR0b24+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJpY29uLWJ1dHRvbi1leGFtcGxlc1xcXCI+IDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1pY29uXFxcIj4gPGkgY2xhc3M9XFxcIm5iLXNodWZmbGVcXFwiPjwvaT4gPC9idXR0b24+IDxidXR0b24gdHlwZT1cXFwiYnV0dG9uXFxcIiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1pY29uXFxcIj4gPGkgY2xhc3M9XFxcIm5iLXNraXAtYmFja3dhcmQtb3V0bGluZVxcXCI+PC9pPiA8L2J1dHRvbj4gPGJ1dHRvbiB0eXBlPVxcXCJidXR0b25cXFwiIGNsYXNzPVxcXCJidG4gYnRuLWRhbmdlciBidG4taWNvblxcXCI+IDxpIGNsYXNzPVxcXCJuYi1za2lwLWZvcndhcmQtb3V0bGluZVxcXCI+PC9pPiA8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8L2Rpdj4gPC9uYi1jYXJkLWJvZHk+IDwvbmItY2FyZD4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./icon-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9pY29uLWJ1dHRvbnMvaWNvbi1idXR0b25zLmNvbXBvbmVudC5zY3NzPzA5ZDciXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlVQUErSjs7QUFFNUw7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvaWNvbi1idXR0b25zL2ljb24tYnV0dG9ucy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9pY29uLWJ1dHRvbnMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.ts":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar IconButtonsComponent = /** @class */ (function () {\n    function IconButtonsComponent() {\n    }\n    IconButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-icon-buttons',\n            styles: [__webpack_require__(/*! ./icon-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./icon-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.html\")\n        })\n    ], IconButtonsComponent);\n    return IconButtonsComponent;\n}());\nexports.IconButtonsComponent = IconButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9pY29uLWJ1dHRvbnMvaWNvbi1idXR0b25zLmNvbXBvbmVudC50cz8zMzkzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQU8xQztJQUFBO0lBQW1DLENBQUM7SUFBdkIsb0JBQW9CO1FBTGhDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsbUJBQUcsd0lBQWdDO1lBQzVDLDZCQUFhLHdJQUErQjtTQUMvQyxDQUFDO09BQ1csb0JBQW9CLENBQUc7SUFBRCwyQkFBQztDQUFBO0FBQXZCLG9EQUFvQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL2ljb24tYnV0dG9ucy9pY29uLWJ1dHRvbnMuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LWljb24tYnV0dG9ucycsXG4gICAgc3R5bGVVcmxzOiBbJy4vaWNvbi1idXR0b25zLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2ljb24tYnV0dG9ucy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgSWNvbkJ1dHRvbnNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/icon-buttons/icon-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.html":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.html ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Shapes</nb-card-header> <nb-card-body> <div class=\\\"shape-container\\\"> <div class=\\\"container-title\\\"> <span>Rectangle Button</span> </div> <div class=\\\"subheader\\\"> <span>Border radius:</span> <span>4px</span> </div> <div> <button class=\\\"btn btn-success btn-rectangle btn-demo\\\">Rectangle</button> </div> </div> <div class=\\\"shape-container\\\"> <div class=\\\"container-title\\\"> <span>Semi-round Button</span> </div> <div class=\\\"subheader\\\"> <span>Border radius:</span> <span>12px</span> </div> <div> <button class=\\\"btn btn-success btn-semi-round btn-demo\\\">Semi-round</button> </div> </div> <div class=\\\"shape-container\\\"> <div class=\\\"container-title\\\"> <span>Rounded Button</span> </div> <div class=\\\"subheader\\\"> <span>Border radius:</span> <span>round</span> </div> <div> <button class=\\\"btn btn-success btn-round btn-demo\\\">Round</button> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaGFwZS1idXR0b25zL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWw/OWQ1OSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL3NoYXBlLWJ1dHRvbnMvc2hhcGUtYnV0dG9ucy5jb21wb25lbnQuaHRtbC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZS5leHBvcnRzID0gXCI8bmItY2FyZD4gPG5iLWNhcmQtaGVhZGVyPkJ1dHRvbiBTaGFwZXM8L25iLWNhcmQtaGVhZGVyPiA8bmItY2FyZC1ib2R5PiA8ZGl2IGNsYXNzPVxcXCJzaGFwZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5SZWN0YW5nbGUgQnV0dG9uPC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj4gPHNwYW4+Qm9yZGVyIHJhZGl1czo8L3NwYW4+IDxzcGFuPjRweDwvc3Bhbj4gPC9kaXY+IDxkaXY+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4tc3VjY2VzcyBidG4tcmVjdGFuZ2xlIGJ0bi1kZW1vXFxcIj5SZWN0YW5nbGU8L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzaGFwZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5TZW1pLXJvdW5kIEJ1dHRvbjwvc3Bhbj4gPC9kaXY+IDxkaXYgY2xhc3M9XFxcInN1YmhlYWRlclxcXCI+IDxzcGFuPkJvcmRlciByYWRpdXM6PC9zcGFuPiA8c3Bhbj4xMnB4PC9zcGFuPiA8L2Rpdj4gPGRpdj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1zdWNjZXNzIGJ0bi1zZW1pLXJvdW5kIGJ0bi1kZW1vXFxcIj5TZW1pLXJvdW5kPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2hhcGUtY29udGFpbmVyXFxcIj4gPGRpdiBjbGFzcz1cXFwiY29udGFpbmVyLXRpdGxlXFxcIj4gPHNwYW4+Um91bmRlZCBCdXR0b248L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPiA8c3Bhbj5Cb3JkZXIgcmFkaXVzOjwvc3Bhbj4gPHNwYW4+cm91bmQ8L3NwYW4+IDwvZGl2PiA8ZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXN1Y2Nlc3MgYnRuLXJvdW5kIGJ0bi1kZW1vXFxcIj5Sb3VuZDwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvbmItY2FyZC1ib2R5PiA8L25iLWNhcmQ+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss":
/*!**********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss ***!
  \**********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./shape-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaGFwZS1idXR0b25zL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50LnNjc3M/MDU4NCJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsNFVBQWdLOztBQUU3TDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaGFwZS1idXR0b25zL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vc2hhcGUtYnV0dG9ucy5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.ts":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.ts ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ShapeButtonsComponent = /** @class */ (function () {\n    function ShapeButtonsComponent() {\n    }\n    ShapeButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-shape-buttons',\n            styles: [__webpack_require__(/*! ./shape-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./shape-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.html\")\n        })\n    ], ShapeButtonsComponent);\n    return ShapeButtonsComponent;\n}());\nexports.ShapeButtonsComponent = ShapeButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaGFwZS1idXR0b25zL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50LnRzPzFlMzMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBQUE7SUFBb0MsQ0FBQztJQUF4QixxQkFBcUI7UUFMakMsZ0JBQVMsQ0FBQztZQUNQLFFBQVEsRUFBRSxtQkFBbUI7WUFDN0IsU0FBUyxtQkFBRywySUFBaUM7WUFDN0MsNkJBQWEsMklBQWdDO1NBQ2hELENBQUM7T0FDVyxxQkFBcUIsQ0FBRztJQUFELDRCQUFDO0NBQUE7QUFBeEIsc0RBQXFCIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvc2hhcGUtYnV0dG9ucy9zaGFwZS1idXR0b25zLmNvbXBvbmVudC50cy5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IENvbXBvbmVudCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuXG5AQ29tcG9uZW50KHtcbiAgICBzZWxlY3RvcjogJ25neC1zaGFwZS1idXR0b25zJyxcbiAgICBzdHlsZVVybHM6IFsnLi9zaGFwZS1idXR0b25zLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NoYXBlLWJ1dHRvbnMuY29tcG9uZW50Lmh0bWwnXG59KVxuZXhwb3J0IGNsYXNzIFNoYXBlQnV0dG9uc0NvbXBvbmVudCB7fVxuIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/shape-buttons/shape-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.html":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.html ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<nb-card> <nb-card-header>Button Sizes</nb-card-header> <nb-card-body> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>Large Button</span> </div> <div class=\\\"subheader\\\"> <span>0.875rem 1.75rem</span> </div> <div> <button class=\\\"btn btn-primary btn-lg\\\">Large Button</button> </div> </div> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>Medium Button</span> </div> <div class=\\\"subheader\\\"> <span>0.75rem 1.5rem</span> </div> <div> <button class=\\\"btn btn-primary btn-md\\\">Medium Button</button> </div> </div> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>Small Button</span> </div> <div class=\\\"subheader\\\"> <span>0.675rem 1.5rem</span> </div> <div> <button class=\\\"btn btn-primary btn-sm\\\">Small Button</button> </div> </div> <div class=\\\"size-container\\\"> <div class=\\\"container-title\\\"> <span>X-Small Button</span> </div> <div class=\\\"subheader\\\"> <span>0.5rem 1.25rem</span> </div> <div> <button class=\\\"btn btn-primary btn-xs\\\">X-Small Button</button> </div> </div> </nb-card-body> </nb-card> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudC5odG1sP2JlYzkiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUEiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudC5odG1sLmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlLmV4cG9ydHMgPSBcIjxuYi1jYXJkPiA8bmItY2FyZC1oZWFkZXI+QnV0dG9uIFNpemVzPC9uYi1jYXJkLWhlYWRlcj4gPG5iLWNhcmQtYm9keT4gPGRpdiBjbGFzcz1cXFwic2l6ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5MYXJnZSBCdXR0b248L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPiA8c3Bhbj4wLjg3NXJlbSAxLjc1cmVtPC9zcGFuPiA8L2Rpdj4gPGRpdj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5IGJ0bi1sZ1xcXCI+TGFyZ2UgQnV0dG9uPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2l6ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5NZWRpdW0gQnV0dG9uPC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj4gPHNwYW4+MC43NXJlbSAxLjVyZW08L3NwYW4+IDwvZGl2PiA8ZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgYnRuLW1kXFxcIj5NZWRpdW0gQnV0dG9uPC9idXR0b24+IDwvZGl2PiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic2l6ZS1jb250YWluZXJcXFwiPiA8ZGl2IGNsYXNzPVxcXCJjb250YWluZXItdGl0bGVcXFwiPiA8c3Bhbj5TbWFsbCBCdXR0b248L3NwYW4+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzdWJoZWFkZXJcXFwiPiA8c3Bhbj4wLjY3NXJlbSAxLjVyZW08L3NwYW4+IDwvZGl2PiA8ZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgYnRuLXNtXFxcIj5TbWFsbCBCdXR0b248L2J1dHRvbj4gPC9kaXY+IDwvZGl2PiA8ZGl2IGNsYXNzPVxcXCJzaXplLWNvbnRhaW5lclxcXCI+IDxkaXYgY2xhc3M9XFxcImNvbnRhaW5lci10aXRsZVxcXCI+IDxzcGFuPlgtU21hbGwgQnV0dG9uPC9zcGFuPiA8L2Rpdj4gPGRpdiBjbGFzcz1cXFwic3ViaGVhZGVyXFxcIj4gPHNwYW4+MC41cmVtIDEuMjVyZW08L3NwYW4+IDwvZGl2PiA8ZGl2PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXByaW1hcnkgYnRuLXhzXFxcIj5YLVNtYWxsIEJ1dHRvbjwvYnV0dG9uPiA8L2Rpdj4gPC9kaXY+IDwvbmItY2FyZC1ib2R5PiA8L25iLWNhcmQ+IFwiOyJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss":
/*!********************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss ***!
  \********************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../../node_modules/css-loader!../../../../../../../../../node_modules/sass-loader/lib/loader.js!./size-buttons.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudC5zY3NzP2MyYjQiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUNBLHFCQUFxQixtQkFBTyxDQUFDLHlVQUErSjs7QUFFNUw7QUFDQTtBQUNBLFNBQVM7QUFDVDtBQUNBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL2J1dHRvbnMvc2l6ZS1idXR0b25zL3NpemUtYnV0dG9ucy5jb21wb25lbnQuc2Nzcy5qcyIsInNvdXJjZXNDb250ZW50IjpbIlxuICAgICAgICB2YXIgcmVzdWx0ID0gcmVxdWlyZShcIiEhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvaW5kZXguanMhLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2xpYi9sb2FkZXIuanMhLi9zaXplLWJ1dHRvbnMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.ts":
/*!******************************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.ts ***!
  \******************************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar SizeButtonsComponent = /** @class */ (function () {\n    function SizeButtonsComponent() {\n    }\n    SizeButtonsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-size-buttons',\n            styles: [__webpack_require__(/*! ./size-buttons.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.scss\")],\n            template: __webpack_require__(/*! ./size-buttons.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.html\")\n        })\n    ], SizeButtonsComponent);\n    return SizeButtonsComponent;\n}());\nexports.SizeButtonsComponent = SizeButtonsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvYnV0dG9ucy9zaXplLWJ1dHRvbnMvc2l6ZS1idXR0b25zLmNvbXBvbmVudC50cz82NDQwIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQU8xQztJQUFBO0lBQW1DLENBQUM7SUFBdkIsb0JBQW9CO1FBTGhDLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsa0JBQWtCO1lBQzVCLFNBQVMsbUJBQUcsd0lBQWdDO1lBQzVDLDZCQUFhLHdJQUErQjtTQUMvQyxDQUFDO09BQ1csb0JBQW9CLENBQUc7SUFBRCwyQkFBQztDQUFBO0FBQXZCLG9EQUFvQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9idXR0b25zL3NpemUtYnV0dG9ucy9zaXplLWJ1dHRvbnMuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LXNpemUtYnV0dG9ucycsXG4gICAgc3R5bGVVcmxzOiBbJy4vc2l6ZS1idXR0b25zLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL3NpemUtYnV0dG9ucy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgU2l6ZUJ1dHRvbnNDb21wb25lbnQge31cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/buttons/size-buttons/size-buttons.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.html":
/*!**********************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.html ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-lg-6\\\"> <nb-card> <nb-card-header>Default Inputs</nb-card-header> <nb-card-body> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Project\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"row full-name-inputs\\\"> <div class=\\\"col-sm-6 input-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Nick\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"col-sm-6 input-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Last Name\\\" class=\\\"form-control\\\"/> </div> </div> <div class=\\\"input-group\\\"> <input type=\\\"password\\\" placeholder=\\\"Password\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"input-group has-person-icon\\\"> <input type=\\\"text\\\" placeholder=\\\"With Icon\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"input-group input-group-rounded\\\"> <input type=\\\"text\\\" placeholder=\\\"Rounded border\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Project\\\" class=\\\"form-control\\\"/> <small class=\\\"form-text\\\">A block of help text that breaks into a new line and may extend beyond one line. </small> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Disabled input\\\" class=\\\"form-control\\\" disabled=\\\"disabled\\\"/> </div> <div class=\\\"input-group\\\"> <textarea rows=\\\"5\\\" placeholder=\\\"Text Area\\\" class=\\\"form-control\\\"></textarea> </div> <div class=\\\"input-group input-group-sm\\\"> <input type=\\\"text\\\" placeholder=\\\"Small Input\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"input-group input-group-lg\\\"> <input type=\\\"text\\\" placeholder=\\\"Large Input\\\" class=\\\"form-control\\\"/> </div> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Input Groups</nb-card-header> <nb-card-body> <div class=\\\"input-group\\\"> <span class=\\\"input-group-addon success\\\">@</span> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Username\\\"/> </div> <div class=\\\"input-group mail-btn-group\\\"> <span class=\\\"input-group-prepend\\\"> <button class=\\\"btn btn-primary btn-icon input-group-text\\\"> <i class=\\\"ion-ios-email-outline\\\"></i> </button> </span> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Recipient's username\\\"> <span class=\\\"input-group-append\\\"> <button class=\\\"btn btn-primary input-group-text\\\"> @example.com </button> </span> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" class=\\\"form-control\\\" placeholder=\\\"Search for...\\\"> <span class=\\\"input-group-append\\\"> <button class=\\\"btn btn-danger input-group-text\\\"> Search </button> </span> </div> <div class=\\\"input-group\\\"> <div class=\\\"dropdown input-group-prepend input-group-btn\\\" ngbDropdown> <button type=\\\"button\\\" class=\\\"btn btn-success dropdown-toggle\\\" ngbDropdownToggle> Action </button> <ul class=\\\"dropdown-menu\\\" ngbDropdownMenu> <li class=\\\"dropdown-item\\\">Action</li> <li class=\\\"dropdown-item\\\">Another action</li> <li class=\\\"dropdown-item\\\">Something else here</li> <div role=\\\"separator\\\" class=\\\"dropdown-divider\\\"></div> <li class=\\\"dropdown-item\\\">Separated link</li> </ul> </div> <input type=\\\"text\\\" class=\\\"form-control\\\"> </div> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Selects</nb-card-header> <nb-card-body> <div class=\\\"form-group\\\"> <label>Simple Select</label> <select class=\\\"form-control\\\"> <option>Minsk</option> <option>Gomel</option> <option>Brest</option> <option>Grodno</option> <option>Mogilev</option> </select> </div> <div class=\\\"form-group\\\"> <label>Multiple Select</label> <select multiple=\\\"multiple\\\" class=\\\"form-control\\\"> <option>Item 1</option> <option>Item 2</option> <option>Item 3</option> <option>Item 4</option> <option>Item 5</option> </select> </div> </nb-card-body> </nb-card> </div> <div class=\\\"col-lg-6\\\"> <nb-card> <nb-card-header>Input Styles</nb-card-header> <nb-card-body> <div class=\\\"input-group input-group-border-only\\\"> <input type=\\\"text\\\" placeholder=\\\"Border Only\\\" class=\\\"form-control\\\"/> </div> <div class=\\\"input-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Default Input\\\" class=\\\"form-control\\\"> </div> <div class=\\\"input-group input-group-fill-only\\\"> <input type=\\\"text\\\" placeholder=\\\"Fill Only\\\" class=\\\"form-control\\\"> </div> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Validation States</nb-card-header> <nb-card-body> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Input with Success\\\" class=\\\"form-control form-control-success\\\"> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Input with Warning\\\" class=\\\"form-control form-control-warning\\\"> </div> <div class=\\\"form-group\\\"> <input type=\\\"text\\\" placeholder=\\\"Input with Danger\\\" class=\\\"form-control form-control-danger\\\"> </div> <div class=\\\"form-group validation-checkboxes row\\\"> <nb-checkbox status=\\\"success\\\" class=\\\"col-sm-4\\\">Checkbox with Success</nb-checkbox> <nb-checkbox status=\\\"warning\\\" class=\\\"col-sm-4\\\">Checkbox with Warning</nb-checkbox> <nb-checkbox status=\\\"danger\\\" class=\\\"col-sm-4\\\">Checkbox with Danger</nb-checkbox> </div> <div class=\\\"form-group has-success\\\"> <input type=\\\"text\\\" placeholder=\\\"Input with Success Icon\\\" class=\\\"form-control form-control-success\\\"> </div> <div class=\\\"form-group has-warning\\\"> <input type=\\\"text\\\" placeholder=\\\"Input with Warning Icon\\\" class=\\\"form-control form-control-warning\\\"> </div> <div class=\\\"form-group has-danger\\\"> <input type=\\\"text\\\" placeholder=\\\"Input with Danger Icon\\\" class=\\\"form-control form-control-danger\\\"> </div> </nb-card-body> </nb-card> <nb-card> <nb-card-header>Checkboxes & Radios</nb-card-header> <nb-card-body> <div class=\\\"row demo-checkboxes-radio\\\"> <div class=\\\"demo-checkboxes col-sm-4\\\"> <nb-checkbox>Checkbox 1</nb-checkbox> <nb-checkbox [value]=\\\"true\\\">Checkbox 2</nb-checkbox> <div class=\\\"custom-control custom-checkbox\\\"> <input type=\\\"checkbox\\\" class=\\\"custom-control-input\\\" id=\\\"b-checkbox\\\"> <label class=\\\"custom-control-label\\\" for=\\\"b-checkbox\\\">Bootstrap Checkbox</label> </div> </div> <div class=\\\"demo-radio col-sm-4\\\"> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" name=\\\"customRadio\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Radio 1</span> </label> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" name=\\\"customRadio\\\" checked=\\\"checked\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Radio 2</span> </label> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" name=\\\"customRadio\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Radio 3</span> </label> </div> <div class=\\\"demo-disabled-checkbox-radio col-sm-4\\\"> <nb-checkbox disabled=\\\"disabled\\\">Disabled Checkbox</nb-checkbox> <label class=\\\"custom-control custom-radio\\\"> <input type=\\\"radio\\\" class=\\\"custom-control-input\\\" disabled=\\\"disabled\\\"> <span class=\\\"custom-control-indicator\\\"></span> <span class=\\\"custom-control-description\\\">Disabled Radio</span> </label> </div> </div> </nb-card-body> </nb-card> <nb-card> <nb-card-body class=\\\"demo-rating\\\"> <span class=\\\"rating-header\\\">Rating</span> <div> <ngb-rating [(rate)]=\\\"starRate\\\" max=\\\"5\\\"> <ng-template let-fill=\\\"fill\\\"> <span class=\\\"star fill\\\" [class.filled]=\\\"fill === 100\\\"> <i class=\\\"ion-android-star\\\" *ngIf=\\\"fill === 100\\\"></i> <i class=\\\"ion-android-star-outline\\\" *ngIf=\\\"fill !== 100\\\"></i> </span> </ng-template> </ngb-rating> <span class=\\\"current-rate\\\">{{ starRate }}</span> </div> <div> <ngb-rating [(rate)]=\\\"heartRate\\\" max=\\\"5\\\"> <ng-template let-fill=\\\"fill\\\"> <span class=\\\"star fill\\\" [class.filled]=\\\"fill === 100\\\"> <i class=\\\"ion-ios-heart\\\" *ngIf=\\\"fill === 100\\\"></i> <i class=\\\"ion-ios-heart-outline\\\" *ngIf=\\\"fill !== 100\\\"></i> </span> </ng-template> </ngb-rating> <span class=\\\"current-rate\\\">{{ heartRate }}</span> </div> </nb-card-body> </nb-card> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss":
/*!**********************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss ***!
  \**********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./form-inputs.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvZm9ybS1pbnB1dHMvZm9ybS1pbnB1dHMuY29tcG9uZW50LnNjc3M/YTI4NyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQ0EscUJBQXFCLG1CQUFPLENBQUMsd1RBQXdKOztBQUVyTDtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0EiLCJmaWxlIjoiLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvZm9ybS1pbnB1dHMvZm9ybS1pbnB1dHMuY29tcG9uZW50LnNjc3MuanMiLCJzb3VyY2VzQ29udGVudCI6WyJcbiAgICAgICAgdmFyIHJlc3VsdCA9IHJlcXVpcmUoXCIhIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2luZGV4LmpzIS4uLy4uLy4uLy4uLy4uLy4uLy4uLy4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9saWIvbG9hZGVyLmpzIS4vZm9ybS1pbnB1dHMuY29tcG9uZW50LnNjc3NcIik7XG5cbiAgICAgICAgaWYgKHR5cGVvZiByZXN1bHQgPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIG1vZHVsZS5leHBvcnRzID0gcmVzdWx0O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQudG9TdHJpbmcoKTtcbiAgICAgICAgfVxuICAgICJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.ts":
/*!********************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.ts ***!
  \********************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar FormInputsComponent = /** @class */ (function () {\n    function FormInputsComponent() {\n        this.starRate = 2;\n        this.heartRate = 4;\n    }\n    FormInputsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-form-inputs',\n            styles: [__webpack_require__(/*! ./form-inputs.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.scss\")],\n            template: __webpack_require__(/*! ./form-inputs.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.html\")\n        })\n    ], FormInputsComponent);\n    return FormInputsComponent;\n}());\nexports.FormInputsComponent = FormInputsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvZm9ybS1pbnB1dHMvZm9ybS1pbnB1dHMuY29tcG9uZW50LnRzPzEzMDAiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7O0FBQUEsb0dBQTBDO0FBTzFDO0lBTEE7UUFNSSxhQUFRLEdBQUcsQ0FBQyxDQUFDO1FBQ2IsY0FBUyxHQUFHLENBQUMsQ0FBQztJQUNsQixDQUFDO0lBSFksbUJBQW1CO1FBTC9CLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsaUJBQWlCO1lBQzNCLFNBQVMsbUJBQUcsNkhBQStCO1lBQzNDLDZCQUFhLDZIQUE4QjtTQUM5QyxDQUFDO09BQ1csbUJBQW1CLENBRy9CO0lBQUQsMEJBQUM7Q0FBQTtBQUhZLGtEQUFtQiIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9mb3JtLWlucHV0cy9mb3JtLWlucHV0cy5jb21wb25lbnQudHMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBDb21wb25lbnQgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtZm9ybS1pbnB1dHMnLFxuICAgIHN0eWxlVXJsczogWycuL2Zvcm0taW5wdXRzLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL2Zvcm0taW5wdXRzLmNvbXBvbmVudC5odG1sJ1xufSlcbmV4cG9ydCBjbGFzcyBGb3JtSW5wdXRzQ29tcG9uZW50IHtcbiAgICBzdGFyUmF0ZSA9IDI7XG4gICAgaGVhcnRSYXRlID0gNDtcbn1cbiJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/form-inputs/form-inputs.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modal/modal.component.ts":
/*!***************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modal/modal.component.ts ***!
  \***************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ng_bootstrap_1 = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ \"./node_modules/@ng-bootstrap/ng-bootstrap/fesm5/ng-bootstrap.js\");\nvar ModalComponent = /** @class */ (function () {\n    function ModalComponent(activeModal) {\n        this.activeModal = activeModal;\n        this.modalContent = \"Lorem ipsum dolor sit amet, consectetuer adipiscing elit, sed diam nonummy\\n    nibh euismod tincidunt ut laoreet dolore magna aliquam erat volutpat. Ut wisi enim ad minim veniam, quis\\n    nostrud exerci tation ullamcorper suscipit lobortis nisl ut aliquip ex ea commodo consequat.\";\n    }\n    ModalComponent.prototype.closeModal = function () {\n        this.activeModal.close();\n    };\n    var _a;\n    ModalComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-modal',\n            template: \"\\n    <div class=\\\"modal-header\\\">\\n      <span>{{ modalHeader }}</span>\\n      <button class=\\\"close\\\" aria-label=\\\"Close\\\" (click)=\\\"closeModal()\\\">\\n        <span aria-hidden=\\\"true\\\">&times;</span>\\n      </button>\\n    </div>\\n    <div class=\\\"modal-body\\\">\\n      {{ modalContent }}\\n    </div>\\n    <div class=\\\"modal-footer\\\">\\n      <button class=\\\"btn btn-md btn-primary\\\" (click)=\\\"closeModal()\\\">Save changes</button>\\n    </div>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbActiveModal !== \"undefined\" && ng_bootstrap_1.NgbActiveModal) === \"function\" ? _a : Object])\n    ], ModalComponent);\n    return ModalComponent;\n}());\nexports.ModalComponent = ModalComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvbW9kYWxzL21vZGFsL21vZGFsLmNvbXBvbmVudC50cz8xMmY2Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLG9HQUEwQztBQUMxQyw4SUFBNEQ7QUFtQjVEO0lBTUksd0JBQW9CLFdBQTJCO1FBQTNCLGdCQUFXLEdBQVgsV0FBVyxDQUFnQjtRQUovQyxpQkFBWSxHQUFHLDRSQUU4RSxDQUFDO0lBRTVDLENBQUM7SUFFbkQsbUNBQVUsR0FBVjtRQUNJLElBQUksQ0FBQyxXQUFXLENBQUMsS0FBSyxFQUFFLENBQUM7SUFDN0IsQ0FBQzs7SUFWUSxjQUFjO1FBakIxQixnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFdBQVc7WUFDckIsUUFBUSxFQUFFLCtiQWFYO1NBQ0YsQ0FBQztxRUFPbUMsNkJBQWMsb0JBQWQsNkJBQWM7T0FOdEMsY0FBYyxDQVcxQjtJQUFELHFCQUFDO0NBQUE7QUFYWSx3Q0FBYyIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9tb2RhbHMvbW9kYWwvbW9kYWwuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2JBY3RpdmVNb2RhbCB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcblxuQENvbXBvbmVudCh7XG4gICAgc2VsZWN0b3I6ICduZ3gtbW9kYWwnLFxuICAgIHRlbXBsYXRlOiBgXG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWhlYWRlclwiPlxuICAgICAgPHNwYW4+e3sgbW9kYWxIZWFkZXIgfX08L3NwYW4+XG4gICAgICA8YnV0dG9uIGNsYXNzPVwiY2xvc2VcIiBhcmlhLWxhYmVsPVwiQ2xvc2VcIiAoY2xpY2spPVwiY2xvc2VNb2RhbCgpXCI+XG4gICAgICAgIDxzcGFuIGFyaWEtaGlkZGVuPVwidHJ1ZVwiPiZ0aW1lczs8L3NwYW4+XG4gICAgICA8L2J1dHRvbj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibW9kYWwtYm9keVwiPlxuICAgICAge3sgbW9kYWxDb250ZW50IH19XG4gICAgPC9kaXY+XG4gICAgPGRpdiBjbGFzcz1cIm1vZGFsLWZvb3RlclwiPlxuICAgICAgPGJ1dHRvbiBjbGFzcz1cImJ0biBidG4tbWQgYnRuLXByaW1hcnlcIiAoY2xpY2spPVwiY2xvc2VNb2RhbCgpXCI+U2F2ZSBjaGFuZ2VzPC9idXR0b24+XG4gICAgPC9kaXY+XG4gIGBcbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxDb21wb25lbnQge1xuICAgIG1vZGFsSGVhZGVyOiBzdHJpbmc7XG4gICAgbW9kYWxDb250ZW50ID0gYExvcmVtIGlwc3VtIGRvbG9yIHNpdCBhbWV0LCBjb25zZWN0ZXR1ZXIgYWRpcGlzY2luZyBlbGl0LCBzZWQgZGlhbSBub251bW15XG4gICAgbmliaCBldWlzbW9kIHRpbmNpZHVudCB1dCBsYW9yZWV0IGRvbG9yZSBtYWduYSBhbGlxdWFtIGVyYXQgdm9sdXRwYXQuIFV0IHdpc2kgZW5pbSBhZCBtaW5pbSB2ZW5pYW0sIHF1aXNcbiAgICBub3N0cnVkIGV4ZXJjaSB0YXRpb24gdWxsYW1jb3JwZXIgc3VzY2lwaXQgbG9ib3J0aXMgbmlzbCB1dCBhbGlxdWlwIGV4IGVhIGNvbW1vZG8gY29uc2VxdWF0LmA7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFjdGl2ZU1vZGFsOiBOZ2JBY3RpdmVNb2RhbCkge31cblxuICAgIGNsb3NlTW9kYWwoKSB7XG4gICAgICAgIHRoaXMuYWN0aXZlTW9kYWwuY2xvc2UoKTtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modal/modal.component.ts\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.html":
/*!************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.html ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports) {

eval("module.exports = \"<div class=\\\"row\\\"> <div class=\\\"col-md-12\\\"> <nb-card> <nb-card-header>Modals</nb-card-header> <nb-card-body> <button class=\\\"btn btn-success\\\" (click)=\\\"showLargeModal()\\\">Large modal</button> <button class=\\\"btn btn-warning\\\" (click)=\\\"showSmallModal()\\\">Small modal</button> <button class=\\\"btn btn-primary\\\" (click)=\\\"showStaticModal()\\\">Static modal</button> </nb-card-body> </nb-card> </div> </div> \";//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvbW9kYWxzL21vZGFscy5jb21wb25lbnQuaHRtbD8zZjM1Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL21vZGFscy9tb2RhbHMuY29tcG9uZW50Lmh0bWwuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUuZXhwb3J0cyA9IFwiPGRpdiBjbGFzcz1cXFwicm93XFxcIj4gPGRpdiBjbGFzcz1cXFwiY29sLW1kLTEyXFxcIj4gPG5iLWNhcmQ+IDxuYi1jYXJkLWhlYWRlcj5Nb2RhbHM8L25iLWNhcmQtaGVhZGVyPiA8bmItY2FyZC1ib2R5PiA8YnV0dG9uIGNsYXNzPVxcXCJidG4gYnRuLXN1Y2Nlc3NcXFwiIChjbGljayk9XFxcInNob3dMYXJnZU1vZGFsKClcXFwiPkxhcmdlIG1vZGFsPC9idXR0b24+IDxidXR0b24gY2xhc3M9XFxcImJ0biBidG4td2FybmluZ1xcXCIgKGNsaWNrKT1cXFwic2hvd1NtYWxsTW9kYWwoKVxcXCI+U21hbGwgbW9kYWw8L2J1dHRvbj4gPGJ1dHRvbiBjbGFzcz1cXFwiYnRuIGJ0bi1wcmltYXJ5XFxcIiAoY2xpY2spPVxcXCJzaG93U3RhdGljTW9kYWwoKVxcXCI+U3RhdGljIG1vZGFsPC9idXR0b24+IDwvbmItY2FyZC1ib2R5PiA8L25iLWNhcmQ+IDwvZGl2PiA8L2Rpdj4gXCI7Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.html\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss":
/*!************************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss ***!
  \************************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

eval("\n        var result = __webpack_require__(/*! !../../../../../../../../node_modules/css-loader!../../../../../../../../node_modules/sass-loader/lib/loader.js!./modals.component.scss */ \"./node_modules/css-loader/index.js!./node_modules/sass-loader/lib/loader.js!./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss\");\n\n        if (typeof result === \"string\") {\n            module.exports = result;\n        } else {\n            module.exports = result.toString();\n        }\n    //# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvbW9kYWxzL21vZGFscy5jb21wb25lbnQuc2Nzcz9hYWM5Il0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFDQSxxQkFBcUIsbUJBQU8sQ0FBQyx5U0FBbUo7O0FBRWhMO0FBQ0E7QUFDQSxTQUFTO0FBQ1Q7QUFDQSIsImZpbGUiOiIuL3NyYy9tYWluL3dlYmFwcC9hcHAvbmd4LWFkbWluL3BhZ2VzL2Jvb3RzdHJhcC9tb2RhbHMvbW9kYWxzLmNvbXBvbmVudC5zY3NzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiXG4gICAgICAgIHZhciByZXN1bHQgPSByZXF1aXJlKFwiISEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9pbmRleC5qcyEuLi8uLi8uLi8uLi8uLi8uLi8uLi8uLi9ub2RlX21vZHVsZXMvc2Fzcy1sb2FkZXIvbGliL2xvYWRlci5qcyEuL21vZGFscy5jb21wb25lbnQuc2Nzc1wiKTtcblxuICAgICAgICBpZiAodHlwZW9mIHJlc3VsdCA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgICAgICAgbW9kdWxlLmV4cG9ydHMgPSByZXN1bHQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBtb2R1bGUuZXhwb3J0cyA9IHJlc3VsdC50b1N0cmluZygpO1xuICAgICAgICB9XG4gICAgIl0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss\n");

/***/ }),

/***/ "./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.ts":
/*!**********************************************************************************!*\
  !*** ./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.ts ***!
  \**********************************************************************************/
/*! no static exports found */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
eval("\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = __webpack_require__(/*! tslib */ \"./node_modules/tslib/tslib.es6.js\");\nvar core_1 = __webpack_require__(/*! @angular/core */ \"./node_modules/@angular/core/fesm5/core.js\");\nvar ng_bootstrap_1 = __webpack_require__(/*! @ng-bootstrap/ng-bootstrap */ \"./node_modules/@ng-bootstrap/ng-bootstrap/fesm5/ng-bootstrap.js\");\nvar modal_component_1 = __webpack_require__(/*! ./modal/modal.component */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modal/modal.component.ts\");\nvar ModalsComponent = /** @class */ (function () {\n    function ModalsComponent(modalService) {\n        this.modalService = modalService;\n    }\n    ModalsComponent.prototype.showLargeModal = function () {\n        var activeModal = this.modalService.open(modal_component_1.ModalComponent, { size: 'lg', container: 'nb-layout' });\n        activeModal.componentInstance.modalHeader = 'Large Modal';\n    };\n    ModalsComponent.prototype.showSmallModal = function () {\n        var activeModal = this.modalService.open(modal_component_1.ModalComponent, { size: 'sm', container: 'nb-layout' });\n        activeModal.componentInstance.modalHeader = 'Small Modal';\n    };\n    ModalsComponent.prototype.showStaticModal = function () {\n        var activeModal = this.modalService.open(modal_component_1.ModalComponent, {\n            size: 'sm',\n            backdrop: 'static',\n            container: 'nb-layout'\n        });\n        activeModal.componentInstance.modalHeader = 'Static modal';\n        activeModal.componentInstance.modalContent = \"This is static modal, backdrop click\\n                                                    will not close it. Click \\u00D7 or confirmation button to close modal.\";\n    };\n    var _a;\n    ModalsComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-modals',\n            styles: [__webpack_require__(/*! ./modals.component.scss */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.scss\")],\n            template: __webpack_require__(/*! ./modals.component.html */ \"./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.html\")\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof ng_bootstrap_1.NgbModal !== \"undefined\" && ng_bootstrap_1.NgbModal) === \"function\" ? _a : Object])\n    ], ModalsComponent);\n    return ModalsComponent;\n}());\nexports.ModalsComponent = ModalsComponent;\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vLi9zcmMvbWFpbi93ZWJhcHAvYXBwL25neC1hZG1pbi9wYWdlcy9ib290c3RyYXAvbW9kYWxzL21vZGFscy5jb21wb25lbnQudHM/NWJhMSJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxvR0FBMEM7QUFDMUMsOElBQXNEO0FBRXRELDhKQUF5RDtBQU96RDtJQUNJLHlCQUFvQixZQUFzQjtRQUF0QixpQkFBWSxHQUFaLFlBQVksQ0FBVTtJQUFHLENBQUM7SUFFOUMsd0NBQWMsR0FBZDtRQUNJLElBQU0sV0FBVyxHQUFHLElBQUksQ0FBQyxZQUFZLENBQUMsSUFBSSxDQUFDLGdDQUFjLEVBQUUsRUFBRSxJQUFJLEVBQUUsSUFBSSxFQUFFLFNBQVMsRUFBRSxXQUFXLEVBQUUsQ0FBQyxDQUFDO1FBRW5HLFdBQVcsQ0FBQyxpQkFBaUIsQ0FBQyxXQUFXLEdBQUcsYUFBYSxDQUFDO0lBQzlELENBQUM7SUFDRCx3Q0FBYyxHQUFkO1FBQ0ksSUFBTSxXQUFXLEdBQUcsSUFBSSxDQUFDLFlBQVksQ0FBQyxJQUFJLENBQUMsZ0NBQWMsRUFBRSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxDQUFDLENBQUM7UUFFbkcsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxhQUFhLENBQUM7SUFDOUQsQ0FBQztJQUVELHlDQUFlLEdBQWY7UUFDSSxJQUFNLFdBQVcsR0FBRyxJQUFJLENBQUMsWUFBWSxDQUFDLElBQUksQ0FBQyxnQ0FBYyxFQUFFO1lBQ3ZELElBQUksRUFBRSxJQUFJO1lBQ1YsUUFBUSxFQUFFLFFBQVE7WUFDbEIsU0FBUyxFQUFFLFdBQVc7U0FDekIsQ0FBQyxDQUFDO1FBRUgsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFdBQVcsR0FBRyxjQUFjLENBQUM7UUFDM0QsV0FBVyxDQUFDLGlCQUFpQixDQUFDLFlBQVksR0FBRyxrS0FDaUUsQ0FBQztJQUNuSCxDQUFDOztJQXhCUSxlQUFlO1FBTDNCLGdCQUFTLENBQUM7WUFDUCxRQUFRLEVBQUUsWUFBWTtZQUN0QixTQUFTLG1CQUFHLDhHQUEwQjtZQUN0Qyw2QkFBYSw4R0FBeUI7U0FDekMsQ0FBQztxRUFFb0MsdUJBQVEsb0JBQVIsdUJBQVE7T0FEakMsZUFBZSxDQXlCM0I7SUFBRCxzQkFBQztDQUFBO0FBekJZLDBDQUFlIiwiZmlsZSI6Ii4vc3JjL21haW4vd2ViYXBwL2FwcC9uZ3gtYWRtaW4vcGFnZXMvYm9vdHN0cmFwL21vZGFscy9tb2RhbHMuY29tcG9uZW50LnRzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgQ29tcG9uZW50IH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ2JNb2RhbCB9IGZyb20gJ0BuZy1ib290c3RyYXAvbmctYm9vdHN0cmFwJztcblxuaW1wb3J0IHsgTW9kYWxDb21wb25lbnQgfSBmcm9tICcuL21vZGFsL21vZGFsLmNvbXBvbmVudCc7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbmd4LW1vZGFscycsXG4gICAgc3R5bGVVcmxzOiBbJy4vbW9kYWxzLmNvbXBvbmVudC5zY3NzJ10sXG4gICAgdGVtcGxhdGVVcmw6ICcuL21vZGFscy5jb21wb25lbnQuaHRtbCdcbn0pXG5leHBvcnQgY2xhc3MgTW9kYWxzQ29tcG9uZW50IHtcbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIG1vZGFsU2VydmljZTogTmdiTW9kYWwpIHt9XG5cbiAgICBzaG93TGFyZ2VNb2RhbCgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlTW9kYWwgPSB0aGlzLm1vZGFsU2VydmljZS5vcGVuKE1vZGFsQ29tcG9uZW50LCB7IHNpemU6ICdsZycsIGNvbnRhaW5lcjogJ25iLWxheW91dCcgfSk7XG5cbiAgICAgICAgYWN0aXZlTW9kYWwuY29tcG9uZW50SW5zdGFuY2UubW9kYWxIZWFkZXIgPSAnTGFyZ2UgTW9kYWwnO1xuICAgIH1cbiAgICBzaG93U21hbGxNb2RhbCgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlTW9kYWwgPSB0aGlzLm1vZGFsU2VydmljZS5vcGVuKE1vZGFsQ29tcG9uZW50LCB7IHNpemU6ICdzbScsIGNvbnRhaW5lcjogJ25iLWxheW91dCcgfSk7XG5cbiAgICAgICAgYWN0aXZlTW9kYWwuY29tcG9uZW50SW5zdGFuY2UubW9kYWxIZWFkZXIgPSAnU21hbGwgTW9kYWwnO1xuICAgIH1cblxuICAgIHNob3dTdGF0aWNNb2RhbCgpIHtcbiAgICAgICAgY29uc3QgYWN0aXZlTW9kYWwgPSB0aGlzLm1vZGFsU2VydmljZS5vcGVuKE1vZGFsQ29tcG9uZW50LCB7XG4gICAgICAgICAgICBzaXplOiAnc20nLFxuICAgICAgICAgICAgYmFja2Ryb3A6ICdzdGF0aWMnLFxuICAgICAgICAgICAgY29udGFpbmVyOiAnbmItbGF5b3V0J1xuICAgICAgICB9KTtcblxuICAgICAgICBhY3RpdmVNb2RhbC5jb21wb25lbnRJbnN0YW5jZS5tb2RhbEhlYWRlciA9ICdTdGF0aWMgbW9kYWwnO1xuICAgICAgICBhY3RpdmVNb2RhbC5jb21wb25lbnRJbnN0YW5jZS5tb2RhbENvbnRlbnQgPSBgVGhpcyBpcyBzdGF0aWMgbW9kYWwsIGJhY2tkcm9wIGNsaWNrXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgd2lsbCBub3QgY2xvc2UgaXQuIENsaWNrIMOXIG9yIGNvbmZpcm1hdGlvbiBidXR0b24gdG8gY2xvc2UgbW9kYWwuYDtcbiAgICB9XG59XG4iXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///./src/main/webapp/app/ngx-admin/pages/bootstrap/modals/modals.component.ts\n");

/***/ })

}]);