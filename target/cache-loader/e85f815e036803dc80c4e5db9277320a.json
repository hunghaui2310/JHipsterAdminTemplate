{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/earning-card/front-side/earning-live-update-chart.component.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/earning-card/front-side/earning-live-update-chart.component.ts","mtime":1593660862956},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar operators_1 = require(\"rxjs/operators\");\nvar core_1 = require(\"@angular/core\");\nvar theme_1 = require(\"@nebular/theme\");\nvar layout_service_1 = require(\"../../../../@core/data/layout.service\");\nvar EarningLiveUpdateChartComponent = /** @class */ (function () {\n    function EarningLiveUpdateChartComponent(theme, layoutService) {\n        var _this = this;\n        this.theme = theme;\n        this.layoutService = layoutService;\n        this.alive = true;\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.resizeChart(); });\n    }\n    EarningLiveUpdateChartComponent.prototype.ngOnChanges = function () {\n        if (this.option) {\n            this.updateChartOptions(this.liveUpdateChartData);\n        }\n    };\n    EarningLiveUpdateChartComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.theme\n            .getJsTheme()\n            .pipe(operators_1.delay(1), operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function (config) {\n            var earningLineTheme = config.variables.earningLine;\n            _this.setChartOption(earningLineTheme);\n        });\n    };\n    EarningLiveUpdateChartComponent.prototype.setChartOption = function (earningLineTheme) {\n        this.option = {\n            grid: {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            },\n            xAxis: {\n                type: 'time',\n                axisLine: {\n                    show: false\n                },\n                axisLabel: {\n                    show: false\n                },\n                axisTick: {\n                    show: false\n                },\n                splitLine: {\n                    show: false\n                }\n            },\n            yAxis: {\n                boundaryGap: [0, '5%'],\n                axisLine: {\n                    show: false\n                },\n                axisLabel: {\n                    show: false\n                },\n                axisTick: {\n                    show: false\n                },\n                splitLine: {\n                    show: false\n                }\n            },\n            tooltip: {\n                axisPointer: {\n                    type: 'shadow'\n                },\n                textStyle: {\n                    color: earningLineTheme.tooltipTextColor,\n                    fontWeight: earningLineTheme.tooltipFontWeight,\n                    fontSize: earningLineTheme.tooltipFontSize\n                },\n                position: 'top',\n                backgroundColor: earningLineTheme.tooltipBg,\n                borderColor: earningLineTheme.tooltipBorderColor,\n                borderWidth: earningLineTheme.tooltipBorderWidth,\n                formatter: function (params) { return \"$ \" + Math.round(parseInt(params.value[1], 10)); },\n                extraCssText: earningLineTheme.tooltipExtraCss\n            },\n            series: [\n                {\n                    type: 'line',\n                    symbol: 'circle',\n                    sampling: 'average',\n                    itemStyle: {\n                        normal: {\n                            opacity: 0\n                        },\n                        emphasis: {\n                            opacity: 0\n                        }\n                    },\n                    lineStyle: {\n                        normal: {\n                            width: 0\n                        }\n                    },\n                    areaStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: earningLineTheme.gradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: earningLineTheme.gradTo\n                                }\n                            ]),\n                            opacity: 1\n                        }\n                    },\n                    data: this.liveUpdateChartData\n                }\n            ],\n            animation: true\n        };\n    };\n    EarningLiveUpdateChartComponent.prototype.updateChartOptions = function (chartData) {\n        this.echartsInstance.setOption({\n            series: [\n                {\n                    data: chartData\n                }\n            ]\n        });\n    };\n    EarningLiveUpdateChartComponent.prototype.onChartInit = function (ec) {\n        this.echartsInstance = ec;\n    };\n    EarningLiveUpdateChartComponent.prototype.resizeChart = function () {\n        if (this.echartsInstance) {\n            this.echartsInstance.resize();\n        }\n    };\n    EarningLiveUpdateChartComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    var _a, _b;\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Array)\n    ], EarningLiveUpdateChartComponent.prototype, \"liveUpdateChartData\", void 0);\n    EarningLiveUpdateChartComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-earning-live-update-chart',\n            styleUrls: ['earning-card-front.component.scss'],\n            template: \"\\n    <div echarts\\n         class=\\\"echart\\\"\\n         [options]=\\\"option\\\"\\n         (chartInit)=\\\"onChartInit($event)\\\"></div>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _a : Object, typeof (_b = typeof layout_service_1.LayoutService !== \"undefined\" && layout_service_1.LayoutService) === \"function\" ? _b : Object])\n    ], EarningLiveUpdateChartComponent);\n    return EarningLiveUpdateChartComponent;\n}());\nexports.EarningLiveUpdateChartComponent = EarningLiveUpdateChartComponent;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/earning-card/front-side/earning-live-update-chart.component.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/earning-card/front-side/earning-live-update-chart.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { delay, takeWhile } from 'rxjs/operators';\nimport { AfterViewInit, Component, Input, OnChanges, OnDestroy } from '@angular/core';\nimport { NbThemeService } from '@nebular/theme';\nimport { LayoutService } from '../../../../@core/data/layout.service';\n\n@Component({\n    selector: 'ngx-earning-live-update-chart',\n    styleUrls: ['earning-card-front.component.scss'],\n    template: `\n    <div echarts\n         class=\"echart\"\n         [options]=\"option\"\n         (chartInit)=\"onChartInit($event)\"></div>\n  `\n})\nexport class EarningLiveUpdateChartComponent implements AfterViewInit, OnDestroy, OnChanges {\n    private alive = true;\n\n    @Input() liveUpdateChartData: { value: [string, number] }[];\n\n    option: any;\n    echartsInstance;\n\n    constructor(private theme: NbThemeService, private layoutService: LayoutService) {\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(() => this.resizeChart());\n    }\n\n    ngOnChanges(): void {\n        if (this.option) {\n            this.updateChartOptions(this.liveUpdateChartData);\n        }\n    }\n\n    ngAfterViewInit() {\n        this.theme\n            .getJsTheme()\n            .pipe(delay(1), takeWhile(() => this.alive))\n            .subscribe(config => {\n                const earningLineTheme: any = config.variables.earningLine;\n\n                this.setChartOption(earningLineTheme);\n            });\n    }\n\n    setChartOption(earningLineTheme) {\n        this.option = {\n            grid: {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            },\n            xAxis: {\n                type: 'time',\n                axisLine: {\n                    show: false\n                },\n                axisLabel: {\n                    show: false\n                },\n                axisTick: {\n                    show: false\n                },\n                splitLine: {\n                    show: false\n                }\n            },\n            yAxis: {\n                boundaryGap: [0, '5%'],\n                axisLine: {\n                    show: false\n                },\n                axisLabel: {\n                    show: false\n                },\n                axisTick: {\n                    show: false\n                },\n                splitLine: {\n                    show: false\n                }\n            },\n            tooltip: {\n                axisPointer: {\n                    type: 'shadow'\n                },\n                textStyle: {\n                    color: earningLineTheme.tooltipTextColor,\n                    fontWeight: earningLineTheme.tooltipFontWeight,\n                    fontSize: earningLineTheme.tooltipFontSize\n                },\n                position: 'top',\n                backgroundColor: earningLineTheme.tooltipBg,\n                borderColor: earningLineTheme.tooltipBorderColor,\n                borderWidth: earningLineTheme.tooltipBorderWidth,\n                formatter: params => `$ ${Math.round(parseInt(params.value[1], 10))}`,\n                extraCssText: earningLineTheme.tooltipExtraCss\n            },\n            series: [\n                {\n                    type: 'line',\n                    symbol: 'circle',\n                    sampling: 'average',\n                    itemStyle: {\n                        normal: {\n                            opacity: 0\n                        },\n                        emphasis: {\n                            opacity: 0\n                        }\n                    },\n                    lineStyle: {\n                        normal: {\n                            width: 0\n                        }\n                    },\n                    areaStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: earningLineTheme.gradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: earningLineTheme.gradTo\n                                }\n                            ]),\n                            opacity: 1\n                        }\n                    },\n                    data: this.liveUpdateChartData\n                }\n            ],\n            animation: true\n        };\n    }\n\n    updateChartOptions(chartData: { value: [string, number] }[]) {\n        this.echartsInstance.setOption({\n            series: [\n                {\n                    data: chartData\n                }\n            ]\n        });\n    }\n\n    onChartInit(ec) {\n        this.echartsInstance = ec;\n    }\n\n    resizeChart() {\n        if (this.echartsInstance) {\n            this.echartsInstance.resize();\n        }\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n}\n"]}]}