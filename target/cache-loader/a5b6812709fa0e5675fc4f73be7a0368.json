{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/country-orders/chart/country-orders-chart.component.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/country-orders/chart/country-orders-chart.component.ts","mtime":1593660862956},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar theme_1 = require(\"@nebular/theme\");\nvar operators_1 = require(\"rxjs/operators\");\nvar layout_service_1 = require(\"../../../../@core/data/layout.service\");\nvar CountryOrdersChartComponent = /** @class */ (function () {\n    function CountryOrdersChartComponent(theme, layoutService) {\n        var _this = this;\n        this.theme = theme;\n        this.layoutService = layoutService;\n        this.alive = true;\n        this.option = {};\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.resizeChart(); });\n    }\n    CountryOrdersChartComponent.prototype.ngOnChanges = function (changes) {\n        var _this = this;\n        if (changes.data && !changes.data.isFirstChange()) {\n            this.echartsInstance.setOption({\n                series: [\n                    {\n                        data: this.data.map(function (v) { return _this.maxValue; })\n                    },\n                    {\n                        data: this.data\n                    },\n                    {\n                        data: this.data\n                    }\n                ]\n            });\n        }\n    };\n    CountryOrdersChartComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.theme\n            .getJsTheme()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function (config) {\n            var countriesTheme = config.variables.countryOrders;\n            _this.option = Object.assign({}, {\n                grid: {\n                    left: '3%',\n                    right: '3%',\n                    bottom: '3%',\n                    top: '3%',\n                    containLabel: true\n                },\n                xAxis: {\n                    axisLabel: {\n                        color: countriesTheme.chartAxisTextColor,\n                        fontSize: countriesTheme.chartAxisFontSize\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: countriesTheme.chartAxisLineColor,\n                            width: '2'\n                        }\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            color: countriesTheme.chartAxisSplitLine,\n                            width: '1'\n                        }\n                    }\n                },\n                yAxis: {\n                    data: _this.labels,\n                    axisLabel: {\n                        color: countriesTheme.chartAxisTextColor,\n                        fontSize: countriesTheme.chartAxisFontSize\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: countriesTheme.chartAxisLineColor,\n                            width: '2'\n                        }\n                    },\n                    axisTick: {\n                        show: false\n                    }\n                },\n                series: [\n                    {\n                        // For shadow\n                        type: 'bar',\n                        data: _this.data.map(function (v) { return _this.maxValue; }),\n                        cursor: 'default',\n                        itemStyle: {\n                            normal: {\n                                color: countriesTheme.chartInnerLineColor\n                            },\n                            opacity: 1\n                        },\n                        barWidth: '40%',\n                        barGap: '-100%',\n                        barCategoryGap: '30%',\n                        animation: false,\n                        z: 1\n                    },\n                    {\n                        // For bottom line\n                        type: 'bar',\n                        data: _this.data,\n                        cursor: 'default',\n                        itemStyle: {\n                            normal: {\n                                color: countriesTheme.chartLineBottomShadowColor\n                            },\n                            opacity: 1\n                        },\n                        barWidth: '40%',\n                        barGap: '-100%',\n                        barCategoryGap: '30%',\n                        z: 2\n                    },\n                    {\n                        type: 'bar',\n                        barWidth: '35%',\n                        data: _this.data,\n                        cursor: 'default',\n                        itemStyle: {\n                            normal: {\n                                color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [\n                                    {\n                                        offset: 0,\n                                        color: countriesTheme.chartGradientFrom\n                                    },\n                                    {\n                                        offset: 1,\n                                        color: countriesTheme.chartGradientTo\n                                    }\n                                ])\n                            }\n                        },\n                        z: 3\n                    }\n                ]\n            });\n        });\n    };\n    CountryOrdersChartComponent.prototype.onChartInit = function (ec) {\n        this.echartsInstance = ec;\n    };\n    CountryOrdersChartComponent.prototype.resizeChart = function () {\n        if (this.echartsInstance) {\n            this.echartsInstance.resize();\n        }\n    };\n    CountryOrdersChartComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    var _a, _b;\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", String)\n    ], CountryOrdersChartComponent.prototype, \"countryName\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Array)\n    ], CountryOrdersChartComponent.prototype, \"data\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Number)\n    ], CountryOrdersChartComponent.prototype, \"maxValue\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Array)\n    ], CountryOrdersChartComponent.prototype, \"labels\", void 0);\n    CountryOrdersChartComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-country-orders-chart',\n            styleUrls: ['./country-orders-chart.component.scss'],\n            template: \"\\n    <div class=\\\"header\\\">\\n      <span class=\\\"title\\\">Selected Country</span>\\n      <h2>{{countryName}}</h2>\\n    </div>\\n    <div echarts\\n         [options]=\\\"option\\\"\\n         class=\\\"echart\\\"\\n         (chartInit)=\\\"onChartInit($event)\\\">\\n    </div>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _a : Object, typeof (_b = typeof layout_service_1.LayoutService !== \"undefined\" && layout_service_1.LayoutService) === \"function\" ? _b : Object])\n    ], CountryOrdersChartComponent);\n    return CountryOrdersChartComponent;\n}());\nexports.CountryOrdersChartComponent = CountryOrdersChartComponent;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/country-orders/chart/country-orders-chart.component.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/country-orders/chart/country-orders-chart.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, Input, OnChanges, OnDestroy, SimpleChanges } from '@angular/core';\nimport { NbThemeService } from '@nebular/theme';\nimport { takeWhile } from 'rxjs/operators';\nimport { LayoutService } from '../../../../@core/data/layout.service';\n\n@Component({\n    selector: 'ngx-country-orders-chart',\n    styleUrls: ['./country-orders-chart.component.scss'],\n    template: `\n    <div class=\"header\">\n      <span class=\"title\">Selected Country</span>\n      <h2>{{countryName}}</h2>\n    </div>\n    <div echarts\n         [options]=\"option\"\n         class=\"echart\"\n         (chartInit)=\"onChartInit($event)\">\n    </div>\n  `\n})\nexport class CountryOrdersChartComponent implements AfterViewInit, OnDestroy, OnChanges {\n    @Input() countryName: string;\n    @Input() data: number[];\n    @Input() maxValue: number;\n    @Input() labels: string[];\n\n    private alive = true;\n\n    option: any = {};\n    echartsInstance;\n\n    constructor(private theme: NbThemeService, private layoutService: LayoutService) {\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(() => this.resizeChart());\n    }\n\n    ngOnChanges(changes: SimpleChanges): void {\n        if (changes.data && !changes.data.isFirstChange()) {\n            this.echartsInstance.setOption({\n                series: [\n                    {\n                        data: this.data.map(v => this.maxValue)\n                    },\n                    {\n                        data: this.data\n                    },\n                    {\n                        data: this.data\n                    }\n                ]\n            });\n        }\n    }\n\n    ngAfterViewInit() {\n        this.theme\n            .getJsTheme()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(config => {\n                const countriesTheme: any = config.variables.countryOrders;\n\n                this.option = Object.assign(\n                    {},\n                    {\n                        grid: {\n                            left: '3%',\n                            right: '3%',\n                            bottom: '3%',\n                            top: '3%',\n                            containLabel: true\n                        },\n                        xAxis: {\n                            axisLabel: {\n                                color: countriesTheme.chartAxisTextColor,\n                                fontSize: countriesTheme.chartAxisFontSize\n                            },\n                            axisLine: {\n                                lineStyle: {\n                                    color: countriesTheme.chartAxisLineColor,\n                                    width: '2'\n                                }\n                            },\n                            axisTick: {\n                                show: false\n                            },\n                            splitLine: {\n                                lineStyle: {\n                                    color: countriesTheme.chartAxisSplitLine,\n                                    width: '1'\n                                }\n                            }\n                        },\n                        yAxis: {\n                            data: this.labels,\n                            axisLabel: {\n                                color: countriesTheme.chartAxisTextColor,\n                                fontSize: countriesTheme.chartAxisFontSize\n                            },\n                            axisLine: {\n                                lineStyle: {\n                                    color: countriesTheme.chartAxisLineColor,\n                                    width: '2'\n                                }\n                            },\n                            axisTick: {\n                                show: false\n                            }\n                        },\n                        series: [\n                            {\n                                // For shadow\n                                type: 'bar',\n                                data: this.data.map(v => this.maxValue),\n                                cursor: 'default',\n                                itemStyle: {\n                                    normal: {\n                                        color: countriesTheme.chartInnerLineColor\n                                    },\n                                    opacity: 1\n                                },\n                                barWidth: '40%',\n                                barGap: '-100%',\n                                barCategoryGap: '30%',\n                                animation: false,\n                                z: 1\n                            },\n                            {\n                                // For bottom line\n                                type: 'bar',\n                                data: this.data,\n                                cursor: 'default',\n                                itemStyle: {\n                                    normal: {\n                                        color: countriesTheme.chartLineBottomShadowColor\n                                    },\n                                    opacity: 1\n                                },\n                                barWidth: '40%',\n                                barGap: '-100%',\n                                barCategoryGap: '30%',\n                                z: 2\n                            },\n                            {\n                                type: 'bar',\n                                barWidth: '35%',\n                                data: this.data,\n                                cursor: 'default',\n                                itemStyle: {\n                                    normal: {\n                                        color: new echarts.graphic.LinearGradient(1, 0, 0, 0, [\n                                            {\n                                                offset: 0,\n                                                color: countriesTheme.chartGradientFrom\n                                            },\n                                            {\n                                                offset: 1,\n                                                color: countriesTheme.chartGradientTo\n                                            }\n                                        ])\n                                    }\n                                },\n                                z: 3\n                            }\n                        ]\n                    }\n                );\n            });\n    }\n\n    onChartInit(ec) {\n        this.echartsInstance = ec;\n    }\n\n    resizeChart() {\n        if (this.echartsInstance) {\n            this.echartsInstance.resize();\n        }\n    }\n\n    ngOnDestroy() {\n        this.alive = false;\n    }\n}\n"]}]}