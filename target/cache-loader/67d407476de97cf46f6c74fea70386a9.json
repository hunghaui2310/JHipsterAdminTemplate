{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/dashboard/temperature/temperature-dragger/temperature-dragger.component.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/dashboard/temperature/temperature-dragger/temperature-dragger.component.ts","mtime":1593660862952},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar VIEW_BOX_SIZE = 300;\nvar TemperatureDraggerComponent = /** @class */ (function () {\n    function TemperatureDraggerComponent() {\n        this.fillColors = '#2ec6ff';\n        this.disableArcColor = '#999999';\n        this.bottomAngle = 90;\n        this.arcThickness = 18; // CSS pixels\n        this.thumbRadius = 16; // CSS pixels\n        this.thumbBorder = 3;\n        this.maxLeap = 0.4;\n        this.value = 50;\n        this.valueChange = new core_1.EventEmitter();\n        this.min = 0; // min output value\n        this.max = 100; // max output value\n        this.step = 0.1;\n        this.power = new core_1.EventEmitter();\n        this.off = false;\n        this.svgControlId = new Date().getTime();\n        this.scaleFactor = 1;\n        this.bottomAngleRad = 0;\n        this.radius = 100;\n        this.translateXValue = 0;\n        this.translateYValue = 0;\n        this.thickness = 6;\n        this.pinRadius = 10;\n        this.colors = [];\n        this.styles = {\n            viewBox: '0 0 300 300',\n            arcTranslateStr: 'translate(0, 0)',\n            clipPathStr: '',\n            gradArcs: [],\n            nonSelectedArc: {},\n            thumbPosition: { x: 0, y: 0 },\n            blurRadius: 15\n        };\n        this.isMouseDown = false;\n        this.init = false;\n        this.oldValue = this.value;\n    }\n    TemperatureDraggerComponent_1 = TemperatureDraggerComponent;\n    Object.defineProperty(TemperatureDraggerComponent.prototype, \"setValue\", {\n        set: function (value) {\n            this.value = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    TemperatureDraggerComponent.prototype.onMouseUp = function (event) {\n        this.recalculateValue(event);\n        this.isMouseDown = false;\n    };\n    TemperatureDraggerComponent.prototype.onMouseMove = function (event) {\n        this.recalculateValue(event);\n    };\n    TemperatureDraggerComponent.prototype.onResize = function (event) {\n        this.invalidate();\n    };\n    TemperatureDraggerComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        // IE fix\n        setTimeout(function () {\n            _this.invalidate();\n            _this.init = true;\n        });\n    };\n    TemperatureDraggerComponent.prototype.ngOnChanges = function () {\n        if (this.init) {\n            this.invalidate();\n        }\n    };\n    TemperatureDraggerComponent.prototype.mouseDown = function (event) {\n        this.isMouseDown = true;\n        if (!this.off) {\n            this.recalculateValue(event, true);\n        }\n    };\n    TemperatureDraggerComponent.prototype.switchPower = function () {\n        this.off = !this.off;\n        this.power.emit(!this.off);\n        if (this.off) {\n            this.oldValue = this.value;\n            this.value = this.min;\n        }\n        else {\n            this.value = this.oldValue;\n        }\n        this.invalidatePinPosition();\n    };\n    TemperatureDraggerComponent.prototype.invalidate = function () {\n        var _this = this;\n        this.bottomAngleRad = TemperatureDraggerComponent_1.toRad(this.bottomAngle);\n        this.calculateVars();\n        this.invalidateClipPathStr();\n        this.invalidatePinPosition();\n        // Chrome fix, temporary solution\n        // TODO: review set data to styles object\n        setTimeout(function () {\n            _this.invalidateGradientArcs();\n        });\n    };\n    TemperatureDraggerComponent.prototype.calculateVars = function () {\n        this.bottomAngleRad = TemperatureDraggerComponent_1.toRad(this.bottomAngle);\n        this.colors = typeof this.fillColors === 'string' ? [this.fillColors] : this.fillColors;\n        var halfAngle = this.bottomAngleRad / 2;\n        var svgBoundingRect = this.svgRoot.nativeElement.getBoundingClientRect();\n        var svgAreaFactor = (svgBoundingRect.height && svgBoundingRect.width / svgBoundingRect.height) || 1;\n        var svgHeight = VIEW_BOX_SIZE / svgAreaFactor;\n        var thumbMaxRadius = this.thumbRadius + this.thumbBorder;\n        var thumbMargin = 2 * thumbMaxRadius > this.arcThickness ? (thumbMaxRadius - this.arcThickness / 2) / this.scaleFactor : 0;\n        this.scaleFactor = svgBoundingRect.width / VIEW_BOX_SIZE || 1;\n        this.styles.viewBox = \"0 0 \" + VIEW_BOX_SIZE + \" \" + svgHeight;\n        var circleFactor = this.bottomAngleRad <= Math.PI ? 2 / (1 + Math.cos(halfAngle)) : 2 * Math.sin(halfAngle) / (1 + Math.cos(halfAngle));\n        if (circleFactor > svgAreaFactor) {\n            if (this.bottomAngleRad > Math.PI) {\n                this.radius = (VIEW_BOX_SIZE - 2 * thumbMargin) / (2 * Math.sin(halfAngle));\n            }\n            else {\n                this.radius = VIEW_BOX_SIZE / 2 - thumbMargin;\n            }\n        }\n        else {\n            this.radius = (svgHeight - 2 * thumbMargin) / (1 + Math.cos(halfAngle));\n        }\n        this.translateXValue = VIEW_BOX_SIZE / 2 - this.radius;\n        this.translateYValue = svgHeight / 2 - this.radius * (1 + Math.cos(halfAngle)) / 2;\n        this.styles.arcTranslateStr = \"translate(\" + this.translateXValue + \", \" + this.translateYValue + \")\";\n        this.thickness = this.arcThickness / this.scaleFactor;\n        this.pinRadius = this.thumbRadius / this.scaleFactor;\n    };\n    TemperatureDraggerComponent.prototype.calculateClipPathSettings = function () {\n        var halfAngle = this.bottomAngleRad / 2;\n        var innerRadius = this.radius - this.thickness;\n        var xStartMultiplier = 1 - Math.sin(halfAngle);\n        var yMultiplier = 1 + Math.cos(halfAngle);\n        var xEndMultiplier = 1 + Math.sin(halfAngle);\n        return {\n            outer: {\n                start: {\n                    x: xStartMultiplier * this.radius,\n                    y: yMultiplier * this.radius\n                },\n                end: {\n                    x: xEndMultiplier * this.radius,\n                    y: yMultiplier * this.radius\n                },\n                radius: this.radius\n            },\n            inner: {\n                start: {\n                    x: xStartMultiplier * innerRadius + this.thickness,\n                    y: yMultiplier * innerRadius + this.thickness\n                },\n                end: {\n                    x: xEndMultiplier * innerRadius + this.thickness,\n                    y: yMultiplier * innerRadius + this.thickness\n                },\n                radius: innerRadius\n            },\n            thickness: this.thickness,\n            big: this.bottomAngleRad < Math.PI ? '1' : '0'\n        };\n    };\n    TemperatureDraggerComponent.prototype.invalidateClipPathStr = function () {\n        var s = this.calculateClipPathSettings();\n        var path = \"M \" + s.outer.start.x + \",\" + s.outer.start.y; // Start at startangle top\n        // Outer arc\n        // Draw an arc of radius 'radius'\n        // Arc details...\n        path += \" A \" + s.outer.radius + \",\" + s.outer.radius + \"\\n       0 \" + s.big + \" 1\\n       \" + s.outer.end.x + \",\" + s.outer.end.y; // Arc goes to top end angle coordinate\n        // Outer to inner connector\n        path += \" A \" + s.thickness / 2 + \",\" + s.thickness / 2 + \"\\n       0 1 1\\n       \" + s.inner.end.x + \",\" + s.inner.end.y;\n        // Inner arc\n        path += \" A \" + s.inner.radius + \",\" + s.inner.radius + \"\\n       1 \" + s.big + \" 0\\n       \" + s.inner.start.x + \",\" + s.inner.start.y;\n        // Outer to inner connector\n        path += \" A \" + s.thickness / 2 + \",\" + s.thickness / 2 + \"\\n       0 1 1\\n       \" + s.outer.start.x + \",\" + s.outer.start.y;\n        // Close path\n        path += ' Z';\n        this.styles.clipPathStr = path;\n    };\n    TemperatureDraggerComponent.prototype.calculateGradientConePaths = function (angleStep) {\n        var radius = this.radius;\n        function calcX(angle) {\n            return radius * (1 - 2 * Math.sin(angle));\n        }\n        function calcY(angle) {\n            return radius * (1 + 2 * Math.cos(angle));\n        }\n        var gradArray = [];\n        for (var i = 0, currentAngle = this.bottomAngleRad / 2; i < this.colors.length; i++, currentAngle += angleStep) {\n            gradArray.push({\n                start: { x: calcX(currentAngle), y: calcY(currentAngle) },\n                end: { x: calcX(currentAngle + angleStep), y: calcY(currentAngle + angleStep) },\n                big: Math.PI <= angleStep ? 1 : 0\n            });\n        }\n        return gradArray;\n    };\n    TemperatureDraggerComponent.prototype.invalidateGradientArcs = function () {\n        var radius = this.radius;\n        function getArc(des) {\n            return \"M \" + radius + \",\" + radius + \"\\n         L \" + des.start.x + \",\" + des.start.y + \"\\n         A \" + 2 * radius + \",\" + 2 * radius + \"\\n         0 \" + des.big + \" 1\\n         \" + des.end.x + \",\" + des.end.y + \"\\n         Z\";\n        }\n        var angleStep = (2 * Math.PI - this.bottomAngleRad) / this.colors.length;\n        var s = this.calculateGradientConePaths(angleStep);\n        this.styles.gradArcs = [];\n        for (var i = 0; i < s.length; i++) {\n            var si = s[i];\n            var arcValue = getArc(si);\n            this.styles.gradArcs.push({\n                color: this.colors[i],\n                d: arcValue\n            });\n        }\n        this.styles.blurRadius = 2 * radius * Math.sin(angleStep / 6);\n    };\n    TemperatureDraggerComponent.prototype.invalidateNonSelectedArc = function () {\n        var angle = this.bottomAngleRad / 2 + (1 - this.getValuePercentage()) * (2 * Math.PI - this.bottomAngleRad);\n        this.styles.nonSelectedArc = {\n            color: this.disableArcColor,\n            d: \"M \" + this.radius + \",\" + this.radius + \"\\n       L \" + this.radius + \",\" + 3 * this.radius + \"\\n       A \" + 2 * this.radius + \",\" + 2 * this.radius + \"\\n       1 \" + (angle > Math.PI ? '1' : '0') + \" 0\\n       \" + (this.radius + this.radius * 2 * Math.sin(angle)) + \",\" + (this.radius + this.radius * 2 * Math.cos(angle)) + \"\\n       Z\"\n        };\n    };\n    TemperatureDraggerComponent.prototype.invalidatePinPosition = function () {\n        var radiusOffset = this.thickness / 2;\n        var curveRadius = this.radius - radiusOffset;\n        var actualAngle = (2 * Math.PI - this.bottomAngleRad) * this.getValuePercentage() + this.bottomAngleRad / 2;\n        this.styles.thumbPosition = {\n            x: curveRadius * (1 - Math.sin(actualAngle)) + radiusOffset,\n            y: curveRadius * (1 + Math.cos(actualAngle)) + radiusOffset\n        };\n        this.invalidateNonSelectedArc();\n    };\n    TemperatureDraggerComponent.prototype.recalculateValue = function (event, allowJumping) {\n        if (allowJumping === void 0) { allowJumping = false; }\n        if (this.isMouseDown && !this.off) {\n            var rect = this.svgRoot.nativeElement.getBoundingClientRect();\n            var center = {\n                x: rect.left + VIEW_BOX_SIZE * this.scaleFactor / 2,\n                y: rect.top + (this.translateYValue + this.radius) * this.scaleFactor\n            };\n            var actualAngle = Math.atan2(center.x - event.clientX, event.clientY - center.y);\n            if (actualAngle < 0) {\n                actualAngle = actualAngle + 2 * Math.PI;\n            }\n            var previousRelativeValue = this.getValuePercentage();\n            var relativeValue = 0;\n            if (actualAngle < this.bottomAngleRad / 2) {\n                relativeValue = 0;\n            }\n            else if (actualAngle > 2 * Math.PI - this.bottomAngleRad / 2) {\n                relativeValue = 1;\n            }\n            else {\n                relativeValue = (actualAngle - this.bottomAngleRad / 2) / (2 * Math.PI - this.bottomAngleRad);\n            }\n            var value = this.toValueNumber(relativeValue);\n            if (this.value !== value && (allowJumping || Math.abs(relativeValue - previousRelativeValue) < this.maxLeap)) {\n                this.value = value;\n                this.valueChange.emit(this.value);\n                this.invalidatePinPosition();\n            }\n        }\n    };\n    TemperatureDraggerComponent.prototype.getValuePercentage = function () {\n        return (this.value - this.min) / (this.max - this.min);\n    };\n    TemperatureDraggerComponent.prototype.toValueNumber = function (factor) {\n        return Math.round(factor * (this.max - this.min) / this.step) * this.step + this.min;\n    };\n    TemperatureDraggerComponent.toRad = function (angle) {\n        return Math.PI * angle / 180;\n    };\n    var TemperatureDraggerComponent_1, _a, _b;\n    tslib_1.__decorate([\n        core_1.ViewChild('svgRoot'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _a : Object)\n    ], TemperatureDraggerComponent.prototype, \"svgRoot\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"fillColors\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"disableArcColor\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"bottomAngle\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"arcThickness\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"thumbRadius\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"thumbBorder\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"maxLeap\", void 0);\n    tslib_1.__decorate([\n        core_1.Output(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"valueChange\", void 0);\n    tslib_1.__decorate([\n        core_1.Input('value'),\n        tslib_1.__metadata(\"design:type\", Object),\n        tslib_1.__metadata(\"design:paramtypes\", [Object])\n    ], TemperatureDraggerComponent.prototype, \"setValue\", null);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"min\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"max\", void 0);\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"step\", void 0);\n    tslib_1.__decorate([\n        core_1.Output(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], TemperatureDraggerComponent.prototype, \"power\", void 0);\n    tslib_1.__decorate([\n        core_1.HostListener('window:mouseup', ['$event']),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], TemperatureDraggerComponent.prototype, \"onMouseUp\", null);\n    tslib_1.__decorate([\n        core_1.HostListener('window:mousemove', ['$event']),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof MouseEvent !== \"undefined\" && MouseEvent) === \"function\" ? _b : Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], TemperatureDraggerComponent.prototype, \"onMouseMove\", null);\n    tslib_1.__decorate([\n        core_1.HostListener('window:resize', ['$event']),\n        tslib_1.__metadata(\"design:type\", Function),\n        tslib_1.__metadata(\"design:paramtypes\", [Object]),\n        tslib_1.__metadata(\"design:returntype\", void 0)\n    ], TemperatureDraggerComponent.prototype, \"onResize\", null);\n    TemperatureDraggerComponent = TemperatureDraggerComponent_1 = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-temperature-dragger',\n            templateUrl: './temperature-dragger.component.html',\n            styleUrls: ['./temperature-dragger.component.scss']\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [])\n    ], TemperatureDraggerComponent);\n    return TemperatureDraggerComponent;\n}());\nexports.TemperatureDraggerComponent = TemperatureDraggerComponent;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/dashboard/temperature/temperature-dragger/temperature-dragger.component.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/dashboard/temperature/temperature-dragger/temperature-dragger.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, HostListener, ViewChild, ElementRef, Input, Output, EventEmitter, AfterViewInit, OnChanges } from '@angular/core';\n\nconst VIEW_BOX_SIZE = 300;\n\n@Component({\n    selector: 'ngx-temperature-dragger',\n    templateUrl: './temperature-dragger.component.html',\n    styleUrls: ['./temperature-dragger.component.scss']\n})\nexport class TemperatureDraggerComponent implements AfterViewInit, OnChanges {\n    @ViewChild('svgRoot') svgRoot: ElementRef;\n\n    @Input() fillColors: string | string[] = '#2ec6ff';\n    @Input() disableArcColor = '#999999';\n    @Input() bottomAngle = 90;\n    @Input() arcThickness = 18; // CSS pixels\n    @Input() thumbRadius = 16; // CSS pixels\n    @Input() thumbBorder = 3;\n    @Input() maxLeap = 0.4;\n\n    value = 50;\n    @Output() valueChange = new EventEmitter<Number>();\n    @Input('value')\n    set setValue(value) {\n        this.value = value;\n    }\n\n    @Input() min = 0; // min output value\n    @Input() max = 100; // max output value\n    @Input() step = 0.1;\n\n    @Output() power = new EventEmitter<boolean>();\n\n    @HostListener('window:mouseup', ['$event'])\n    onMouseUp(event) {\n        this.recalculateValue(event);\n        this.isMouseDown = false;\n    }\n\n    @HostListener('window:mousemove', ['$event'])\n    onMouseMove(event: MouseEvent) {\n        this.recalculateValue(event);\n    }\n\n    @HostListener('window:resize', ['$event'])\n    onResize(event) {\n        this.invalidate();\n    }\n\n    off = false;\n    oldValue: number;\n\n    svgControlId = new Date().getTime();\n    scaleFactor = 1;\n    bottomAngleRad = 0;\n    radius = 100;\n    translateXValue = 0;\n    translateYValue = 0;\n    thickness = 6;\n    pinRadius = 10;\n    colors: any = [];\n\n    styles = {\n        viewBox: '0 0 300 300',\n        arcTranslateStr: 'translate(0, 0)',\n        clipPathStr: '',\n        gradArcs: [],\n        nonSelectedArc: {},\n        thumbPosition: { x: 0, y: 0 },\n        blurRadius: 15\n    };\n\n    private isMouseDown = false;\n    private init = false;\n\n    constructor() {\n        this.oldValue = this.value;\n    }\n\n    ngAfterViewInit(): void {\n        // IE fix\n        setTimeout(() => {\n            this.invalidate();\n            this.init = true;\n        });\n    }\n\n    ngOnChanges(): void {\n        if (this.init) {\n            this.invalidate();\n        }\n    }\n\n    mouseDown(event) {\n        this.isMouseDown = true;\n        if (!this.off) {\n            this.recalculateValue(event, true);\n        }\n    }\n\n    switchPower() {\n        this.off = !this.off;\n        this.power.emit(!this.off);\n\n        if (this.off) {\n            this.oldValue = this.value;\n            this.value = this.min;\n        } else {\n            this.value = this.oldValue;\n        }\n\n        this.invalidatePinPosition();\n    }\n\n    private invalidate(): void {\n        this.bottomAngleRad = TemperatureDraggerComponent.toRad(this.bottomAngle);\n        this.calculateVars();\n\n        this.invalidateClipPathStr();\n        this.invalidatePinPosition();\n\n        // Chrome fix, temporary solution\n        // TODO: review set data to styles object\n        setTimeout(() => {\n            this.invalidateGradientArcs();\n        });\n    }\n\n    private calculateVars() {\n        this.bottomAngleRad = TemperatureDraggerComponent.toRad(this.bottomAngle);\n        this.colors = typeof this.fillColors === 'string' ? [this.fillColors] : this.fillColors;\n\n        const halfAngle = this.bottomAngleRad / 2;\n\n        const svgBoundingRect = this.svgRoot.nativeElement.getBoundingClientRect();\n        const svgAreaFactor = (svgBoundingRect.height && svgBoundingRect.width / svgBoundingRect.height) || 1;\n        const svgHeight = VIEW_BOX_SIZE / svgAreaFactor;\n        const thumbMaxRadius = this.thumbRadius + this.thumbBorder;\n        const thumbMargin = 2 * thumbMaxRadius > this.arcThickness ? (thumbMaxRadius - this.arcThickness / 2) / this.scaleFactor : 0;\n\n        this.scaleFactor = svgBoundingRect.width / VIEW_BOX_SIZE || 1;\n        this.styles.viewBox = `0 0 ${VIEW_BOX_SIZE} ${svgHeight}`;\n\n        const circleFactor =\n            this.bottomAngleRad <= Math.PI ? 2 / (1 + Math.cos(halfAngle)) : 2 * Math.sin(halfAngle) / (1 + Math.cos(halfAngle));\n        if (circleFactor > svgAreaFactor) {\n            if (this.bottomAngleRad > Math.PI) {\n                this.radius = (VIEW_BOX_SIZE - 2 * thumbMargin) / (2 * Math.sin(halfAngle));\n            } else {\n                this.radius = VIEW_BOX_SIZE / 2 - thumbMargin;\n            }\n        } else {\n            this.radius = (svgHeight - 2 * thumbMargin) / (1 + Math.cos(halfAngle));\n        }\n\n        this.translateXValue = VIEW_BOX_SIZE / 2 - this.radius;\n        this.translateYValue = svgHeight / 2 - this.radius * (1 + Math.cos(halfAngle)) / 2;\n\n        this.styles.arcTranslateStr = `translate(${this.translateXValue}, ${this.translateYValue})`;\n\n        this.thickness = this.arcThickness / this.scaleFactor;\n        this.pinRadius = this.thumbRadius / this.scaleFactor;\n    }\n\n    private calculateClipPathSettings() {\n        const halfAngle = this.bottomAngleRad / 2;\n        const innerRadius = this.radius - this.thickness;\n\n        const xStartMultiplier = 1 - Math.sin(halfAngle);\n        const yMultiplier = 1 + Math.cos(halfAngle);\n        const xEndMultiplier = 1 + Math.sin(halfAngle);\n\n        return {\n            outer: {\n                start: {\n                    x: xStartMultiplier * this.radius,\n                    y: yMultiplier * this.radius\n                },\n                end: {\n                    x: xEndMultiplier * this.radius,\n                    y: yMultiplier * this.radius\n                },\n                radius: this.radius\n            },\n            inner: {\n                start: {\n                    x: xStartMultiplier * innerRadius + this.thickness,\n                    y: yMultiplier * innerRadius + this.thickness\n                },\n                end: {\n                    x: xEndMultiplier * innerRadius + this.thickness,\n                    y: yMultiplier * innerRadius + this.thickness\n                },\n                radius: innerRadius\n            },\n            thickness: this.thickness,\n            big: this.bottomAngleRad < Math.PI ? '1' : '0'\n        };\n    }\n\n    private invalidateClipPathStr() {\n        const s = this.calculateClipPathSettings();\n\n        let path = `M ${s.outer.start.x},${s.outer.start.y}`; // Start at startangle top\n\n        // Outer arc\n        // Draw an arc of radius 'radius'\n        // Arc details...\n        path += ` A ${s.outer.radius},${s.outer.radius}\n       0 ${s.big} 1\n       ${s.outer.end.x},${s.outer.end.y}`; // Arc goes to top end angle coordinate\n\n        // Outer to inner connector\n        path += ` A ${s.thickness / 2},${s.thickness / 2}\n       0 1 1\n       ${s.inner.end.x},${s.inner.end.y}`;\n\n        // Inner arc\n        path += ` A ${s.inner.radius},${s.inner.radius}\n       1 ${s.big} 0\n       ${s.inner.start.x},${s.inner.start.y}`;\n\n        // Outer to inner connector\n        path += ` A ${s.thickness / 2},${s.thickness / 2}\n       0 1 1\n       ${s.outer.start.x},${s.outer.start.y}`;\n\n        // Close path\n        path += ' Z';\n        this.styles.clipPathStr = path;\n    }\n\n    private calculateGradientConePaths(angleStep) {\n        const radius = this.radius;\n\n        function calcX(angle) {\n            return radius * (1 - 2 * Math.sin(angle));\n        }\n\n        function calcY(angle) {\n            return radius * (1 + 2 * Math.cos(angle));\n        }\n\n        const gradArray = [];\n\n        for (let i = 0, currentAngle = this.bottomAngleRad / 2; i < this.colors.length; i++, currentAngle += angleStep) {\n            gradArray.push({\n                start: { x: calcX(currentAngle), y: calcY(currentAngle) },\n                end: { x: calcX(currentAngle + angleStep), y: calcY(currentAngle + angleStep) },\n                big: Math.PI <= angleStep ? 1 : 0\n            });\n        }\n        return gradArray;\n    }\n\n    private invalidateGradientArcs() {\n        const radius = this.radius;\n\n        function getArc(des) {\n            return `M ${radius},${radius}\n         L ${des.start.x},${des.start.y}\n         A ${2 * radius},${2 * radius}\n         0 ${des.big} 1\n         ${des.end.x},${des.end.y}\n         Z`;\n        }\n\n        const angleStep = (2 * Math.PI - this.bottomAngleRad) / this.colors.length;\n        const s = this.calculateGradientConePaths(angleStep);\n\n        this.styles.gradArcs = [];\n        for (let i = 0; i < s.length; i++) {\n            const si = s[i];\n            const arcValue = getArc(si);\n            this.styles.gradArcs.push({\n                color: this.colors[i],\n                d: arcValue\n            });\n        }\n\n        this.styles.blurRadius = 2 * radius * Math.sin(angleStep / 6);\n    }\n\n    private invalidateNonSelectedArc() {\n        const angle = this.bottomAngleRad / 2 + (1 - this.getValuePercentage()) * (2 * Math.PI - this.bottomAngleRad);\n        this.styles.nonSelectedArc = {\n            color: this.disableArcColor,\n            d: `M ${this.radius},${this.radius}\n       L ${this.radius},${3 * this.radius}\n       A ${2 * this.radius},${2 * this.radius}\n       1 ${angle > Math.PI ? '1' : '0'} 0\n       ${this.radius + this.radius * 2 * Math.sin(angle)},${this.radius + this.radius * 2 * Math.cos(angle)}\n       Z`\n        };\n    }\n\n    private invalidatePinPosition() {\n        const radiusOffset = this.thickness / 2;\n        const curveRadius = this.radius - radiusOffset;\n        const actualAngle = (2 * Math.PI - this.bottomAngleRad) * this.getValuePercentage() + this.bottomAngleRad / 2;\n        this.styles.thumbPosition = {\n            x: curveRadius * (1 - Math.sin(actualAngle)) + radiusOffset,\n            y: curveRadius * (1 + Math.cos(actualAngle)) + radiusOffset\n        };\n        this.invalidateNonSelectedArc();\n    }\n\n    private recalculateValue(event, allowJumping = false) {\n        if (this.isMouseDown && !this.off) {\n            const rect = this.svgRoot.nativeElement.getBoundingClientRect();\n            const center = {\n                x: rect.left + VIEW_BOX_SIZE * this.scaleFactor / 2,\n                y: rect.top + (this.translateYValue + this.radius) * this.scaleFactor\n            };\n            let actualAngle = Math.atan2(center.x - event.clientX, event.clientY - center.y);\n            if (actualAngle < 0) {\n                actualAngle = actualAngle + 2 * Math.PI;\n            }\n\n            const previousRelativeValue = this.getValuePercentage();\n            let relativeValue = 0;\n            if (actualAngle < this.bottomAngleRad / 2) {\n                relativeValue = 0;\n            } else if (actualAngle > 2 * Math.PI - this.bottomAngleRad / 2) {\n                relativeValue = 1;\n            } else {\n                relativeValue = (actualAngle - this.bottomAngleRad / 2) / (2 * Math.PI - this.bottomAngleRad);\n            }\n\n            const value = this.toValueNumber(relativeValue);\n\n            if (this.value !== value && (allowJumping || Math.abs(relativeValue - previousRelativeValue) < this.maxLeap)) {\n                this.value = value;\n                this.valueChange.emit(this.value);\n                this.invalidatePinPosition();\n            }\n        }\n    }\n\n    private getValuePercentage() {\n        return (this.value - this.min) / (this.max - this.min);\n    }\n\n    private toValueNumber(factor) {\n        return Math.round(factor * (this.max - this.min) / this.step) * this.step + this.min;\n    }\n\n    private static toRad(angle) {\n        return Math.PI * angle / 180;\n    }\n}\n"]}]}