{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/@core/data/traffic-list.service.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/@core/data/traffic-list.service.ts","mtime":1593660862916},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar rxjs_1 = require(\"rxjs\");\nvar periods_service_1 = require(\"./periods.service\");\nvar TrafficList = /** @class */ (function () {\n    function TrafficList() {\n    }\n    return TrafficList;\n}());\nexports.TrafficList = TrafficList;\nvar TrafficListService = /** @class */ (function () {\n    function TrafficListService(period) {\n        this.period = period;\n        this.getRandom = function (roundTo) { return Math.round(Math.random() * roundTo); };\n        this.data = {};\n        this.data = {\n            week: this.getDataWeek(),\n            month: this.getDataMonth(),\n            year: this.getDataYear()\n        };\n    }\n    TrafficListService.prototype.getDataWeek = function () {\n        var _this = this;\n        var getFirstDateInPeriod = function () {\n            var weeks = _this.period.getWeeks();\n            return weeks[weeks.length - 1];\n        };\n        return this.reduceData(this.period.getWeeks(), getFirstDateInPeriod);\n    };\n    TrafficListService.prototype.getDataMonth = function () {\n        var _this = this;\n        var getFirstDateInPeriod = function () {\n            var months = _this.period.getMonths();\n            var date = new Date();\n            var prevYear = date.getFullYear() - 1;\n            return months[months.length - 1] + \", \" + prevYear;\n        };\n        return this.reduceData(this.period.getMonths(), getFirstDateInPeriod);\n    };\n    TrafficListService.prototype.getDataYear = function () {\n        var _this = this;\n        var getFirstDateInPeriod = function () {\n            var years = _this.period.getYears();\n            return \"\" + (parseInt(years[0], 10) - 1);\n        };\n        return this.reduceData(this.period.getYears(), getFirstDateInPeriod);\n    };\n    TrafficListService.prototype.reduceData = function (timePeriods, getFirstDateInPeriod) {\n        var _this = this;\n        return timePeriods.reduce(function (result, timePeriod, index) {\n            var hasResult = result[index - 1];\n            var prevDate = hasResult ? result[index - 1].comparison.nextDate : getFirstDateInPeriod();\n            var prevValue = hasResult ? result[index - 1].comparison.nextValue : _this.getRandom(100);\n            var nextValue = _this.getRandom(100);\n            var deltaValue = prevValue - nextValue;\n            var item = {\n                date: timePeriod,\n                value: _this.getRandom(1000),\n                delta: {\n                    up: deltaValue <= 0,\n                    value: Math.abs(deltaValue)\n                },\n                comparison: {\n                    prevDate: prevDate,\n                    prevValue: prevValue,\n                    nextDate: timePeriod,\n                    nextValue: nextValue\n                }\n            };\n            return result.concat([item]);\n        }, []);\n    };\n    TrafficListService.prototype.getTrafficListData = function (period) {\n        return rxjs_1.of(this.data[period]);\n    };\n    var _a;\n    TrafficListService = tslib_1.__decorate([\n        core_1.Injectable(),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof periods_service_1.PeriodsService !== \"undefined\" && periods_service_1.PeriodsService) === \"function\" ? _a : Object])\n    ], TrafficListService);\n    return TrafficListService;\n}());\nexports.TrafficListService = TrafficListService;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/@core/data/traffic-list.service.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/@core/data/traffic-list.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable } from '@angular/core';\nimport { of as observableOf, Observable } from 'rxjs';\nimport { PeriodsService } from './periods.service';\n\nexport class TrafficList {\n    date: string;\n    value: number;\n    delta: {\n        up: boolean;\n        value: number;\n    };\n    comparison: {\n        prevDate: string;\n        prevValue: number;\n        nextDate: string;\n        nextValue: number;\n    };\n}\n\n@Injectable()\nexport class TrafficListService {\n    private getRandom = (roundTo: number) => Math.round(Math.random() * roundTo);\n    private data = {};\n\n    constructor(private period: PeriodsService) {\n        this.data = {\n            week: this.getDataWeek(),\n            month: this.getDataMonth(),\n            year: this.getDataYear()\n        };\n    }\n\n    private getDataWeek(): TrafficList[] {\n        const getFirstDateInPeriod = () => {\n            const weeks = this.period.getWeeks();\n\n            return weeks[weeks.length - 1];\n        };\n\n        return this.reduceData(this.period.getWeeks(), getFirstDateInPeriod);\n    }\n\n    private getDataMonth(): TrafficList[] {\n        const getFirstDateInPeriod = () => {\n            const months = this.period.getMonths();\n            const date = new Date();\n            const prevYear = date.getFullYear() - 1;\n\n            return `${months[months.length - 1]}, ${prevYear}`;\n        };\n\n        return this.reduceData(this.period.getMonths(), getFirstDateInPeriod);\n    }\n\n    private getDataYear(): TrafficList[] {\n        const getFirstDateInPeriod = () => {\n            const years = this.period.getYears();\n\n            return `${parseInt(years[0], 10) - 1}`;\n        };\n\n        return this.reduceData(this.period.getYears(), getFirstDateInPeriod);\n    }\n\n    private reduceData(timePeriods: string[], getFirstDateInPeriod: () => string): TrafficList[] {\n        return timePeriods.reduce((result, timePeriod, index) => {\n            const hasResult = result[index - 1];\n            const prevDate = hasResult ? result[index - 1].comparison.nextDate : getFirstDateInPeriod();\n            const prevValue = hasResult ? result[index - 1].comparison.nextValue : this.getRandom(100);\n            const nextValue = this.getRandom(100);\n            const deltaValue = prevValue - nextValue;\n\n            const item = {\n                date: timePeriod,\n                value: this.getRandom(1000),\n                delta: {\n                    up: deltaValue <= 0,\n                    value: Math.abs(deltaValue)\n                },\n                comparison: {\n                    prevDate,\n                    prevValue,\n                    nextDate: timePeriod,\n                    nextValue\n                }\n            };\n\n            return [...result, item];\n        }, []);\n    }\n\n    getTrafficListData(period: string): Observable<TrafficList> {\n        return observableOf(this.data[period]);\n    }\n}\n"]}]}