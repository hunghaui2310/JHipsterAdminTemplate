{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/profit-card/front-side/stats-bar-animation-chart.component.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/profit-card/front-side/stats-bar-animation-chart.component.ts","mtime":1593660862956},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar theme_1 = require(\"@nebular/theme\");\nvar operators_1 = require(\"rxjs/operators\");\nvar layout_service_1 = require(\"../../../../@core/data/layout.service\");\nvar StatsBarAnimationChartComponent = /** @class */ (function () {\n    function StatsBarAnimationChartComponent(theme, layoutService) {\n        var _this = this;\n        this.theme = theme;\n        this.layoutService = layoutService;\n        this.alive = true;\n        this.linesData = {\n            firstLine: [],\n            secondLine: []\n        };\n        this.options = {};\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.resizeChart(); });\n    }\n    StatsBarAnimationChartComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.theme\n            .getJsTheme()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function (config) {\n            var profitBarAnimationEchart = config.variables.profitBarAnimationEchart;\n            _this.setChartOption(profitBarAnimationEchart);\n        });\n    };\n    StatsBarAnimationChartComponent.prototype.setChartOption = function (chartVariables) {\n        this.options = {\n            color: [chartVariables.firstAnimationBarColor, chartVariables.secondAnimationBarColor],\n            grid: {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            },\n            legend: {\n                data: ['transactions', 'orders'],\n                borderWidth: 0,\n                borderRadius: 0,\n                itemWidth: 15,\n                itemHeight: 15,\n                textStyle: {\n                    color: chartVariables.textColor\n                }\n            },\n            tooltip: {\n                axisPointer: {\n                    type: 'shadow'\n                },\n                textStyle: {\n                    color: chartVariables.tooltipTextColor,\n                    fontWeight: chartVariables.tooltipFontWeight,\n                    fontSize: chartVariables.tooltipFontSize\n                },\n                position: 'top',\n                backgroundColor: chartVariables.tooltipBg,\n                borderColor: chartVariables.tooltipBorderColor,\n                borderWidth: chartVariables.tooltipBorderWidth,\n                formatter: function (params) { return \"$ \" + Math.round(parseInt(params.value, 10)); },\n                extraCssText: chartVariables.tooltipExtraCss\n            },\n            xAxis: [\n                {\n                    data: this.linesData.firstLine.map(function (_, index) { return index; }),\n                    silent: false,\n                    axisLine: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    }\n                }\n            ],\n            yAxis: [\n                {\n                    axisLine: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: chartVariables.splitLineStyleColor,\n                            opacity: chartVariables.splitLineStyleOpacity,\n                            width: chartVariables.splitLineStyleWidth\n                        }\n                    }\n                }\n            ],\n            series: [\n                {\n                    name: 'transactions',\n                    type: 'bar',\n                    data: this.linesData.firstLine,\n                    animationDelay: function (idx) { return idx * 10; }\n                },\n                {\n                    name: 'orders',\n                    type: 'bar',\n                    data: this.linesData.secondLine,\n                    animationDelay: function (idx) { return idx * 10 + 100; }\n                }\n            ],\n            animationEasing: 'elasticOut',\n            animationDelayUpdate: function (idx) { return idx * 5; }\n        };\n    };\n    StatsBarAnimationChartComponent.prototype.onChartInit = function (echarts) {\n        this.echartsIntance = echarts;\n    };\n    StatsBarAnimationChartComponent.prototype.resizeChart = function () {\n        if (this.echartsIntance) {\n            this.echartsIntance.resize();\n        }\n    };\n    StatsBarAnimationChartComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    var _a, _b;\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], StatsBarAnimationChartComponent.prototype, \"linesData\", void 0);\n    StatsBarAnimationChartComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-stats-bar-animation-chart',\n            template: \"\\n    <div echarts\\n         [options]=\\\"options\\\"\\n         class=\\\"echart\\\"\\n         (chartInit)=\\\"onChartInit($event)\\\">\\n    </div>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_a = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _a : Object, typeof (_b = typeof layout_service_1.LayoutService !== \"undefined\" && layout_service_1.LayoutService) === \"function\" ? _b : Object])\n    ], StatsBarAnimationChartComponent);\n    return StatsBarAnimationChartComponent;\n}());\nexports.StatsBarAnimationChartComponent = StatsBarAnimationChartComponent;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/profit-card/front-side/stats-bar-animation-chart.component.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/profit-card/front-side/stats-bar-animation-chart.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, Input, OnDestroy } from '@angular/core';\nimport { NbThemeService } from '@nebular/theme';\nimport { takeWhile } from 'rxjs/operators';\nimport { LayoutService } from '../../../../@core/data/layout.service';\n\n@Component({\n    selector: 'ngx-stats-bar-animation-chart',\n    template: `\n    <div echarts\n         [options]=\"options\"\n         class=\"echart\"\n         (chartInit)=\"onChartInit($event)\">\n    </div>\n  `\n})\nexport class StatsBarAnimationChartComponent implements AfterViewInit, OnDestroy {\n    private alive = true;\n\n    @Input()\n    linesData: { firstLine: number[]; secondLine: number[] } = {\n        firstLine: [],\n        secondLine: []\n    };\n\n    echartsIntance: any;\n    options: any = {};\n\n    constructor(private theme: NbThemeService, private layoutService: LayoutService) {\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(() => this.resizeChart());\n    }\n\n    ngAfterViewInit() {\n        this.theme\n            .getJsTheme()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(config => {\n                const profitBarAnimationEchart: any = config.variables.profitBarAnimationEchart;\n\n                this.setChartOption(profitBarAnimationEchart);\n            });\n    }\n\n    setChartOption(chartVariables) {\n        this.options = {\n            color: [chartVariables.firstAnimationBarColor, chartVariables.secondAnimationBarColor],\n            grid: {\n                left: 0,\n                top: 0,\n                right: 0,\n                bottom: 0\n            },\n            legend: {\n                data: ['transactions', 'orders'],\n                borderWidth: 0,\n                borderRadius: 0,\n                itemWidth: 15,\n                itemHeight: 15,\n                textStyle: {\n                    color: chartVariables.textColor\n                }\n            },\n            tooltip: {\n                axisPointer: {\n                    type: 'shadow'\n                },\n                textStyle: {\n                    color: chartVariables.tooltipTextColor,\n                    fontWeight: chartVariables.tooltipFontWeight,\n                    fontSize: chartVariables.tooltipFontSize\n                },\n                position: 'top',\n                backgroundColor: chartVariables.tooltipBg,\n                borderColor: chartVariables.tooltipBorderColor,\n                borderWidth: chartVariables.tooltipBorderWidth,\n                formatter: params => `$ ${Math.round(parseInt(params.value, 10))}`,\n                extraCssText: chartVariables.tooltipExtraCss\n            },\n            xAxis: [\n                {\n                    data: this.linesData.firstLine.map((_, index) => index),\n                    silent: false,\n                    axisLine: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    }\n                }\n            ],\n            yAxis: [\n                {\n                    axisLine: {\n                        show: false\n                    },\n                    axisLabel: {\n                        show: false\n                    },\n                    axisTick: {\n                        show: false\n                    },\n                    splitLine: {\n                        show: true,\n                        lineStyle: {\n                            color: chartVariables.splitLineStyleColor,\n                            opacity: chartVariables.splitLineStyleOpacity,\n                            width: chartVariables.splitLineStyleWidth\n                        }\n                    }\n                }\n            ],\n            series: [\n                {\n                    name: 'transactions',\n                    type: 'bar',\n                    data: this.linesData.firstLine,\n                    animationDelay: idx => idx * 10\n                },\n                {\n                    name: 'orders',\n                    type: 'bar',\n                    data: this.linesData.secondLine,\n                    animationDelay: idx => idx * 10 + 100\n                }\n            ],\n            animationEasing: 'elasticOut',\n            animationDelayUpdate: idx => idx * 5\n        };\n    }\n\n    onChartInit(echarts) {\n        this.echartsIntance = echarts;\n    }\n\n    resizeChart() {\n        if (this.echartsIntance) {\n            this.echartsIntance.resize();\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.alive = false;\n    }\n}\n"]}]}