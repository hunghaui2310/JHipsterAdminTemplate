{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/charts-panel/charts/profit-chart.component.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/charts-panel/charts/profit-chart.component.ts","mtime":1593660862952},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar theme_1 = require(\"@nebular/theme\");\nvar operators_1 = require(\"rxjs/operators\");\nvar profit_chart_service_1 = require(\"../../../../@core/data/profit-chart.service\");\nvar layout_service_1 = require(\"../../../../@core/data/layout.service\");\nvar ProfitChartComponent = /** @class */ (function () {\n    function ProfitChartComponent(theme, layoutService) {\n        var _this = this;\n        this.theme = theme;\n        this.layoutService = layoutService;\n        this.alive = true;\n        this.options = {};\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function () { return _this.resizeChart(); });\n    }\n    ProfitChartComponent.prototype.ngOnChanges = function () {\n        if (this.echartsIntance) {\n            this.updateProfitChartOptions(this.profitChartData);\n        }\n    };\n    ProfitChartComponent.prototype.ngAfterViewInit = function () {\n        var _this = this;\n        this.theme\n            .getJsTheme()\n            .pipe(operators_1.takeWhile(function () { return _this.alive; }))\n            .subscribe(function (config) {\n            var eTheme = config.variables.profit;\n            _this.setOptions(eTheme);\n        });\n    };\n    ProfitChartComponent.prototype.setOptions = function (eTheme) {\n        this.options = {\n            backgroundColor: eTheme.bg,\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    type: 'shadow',\n                    shadowStyle: {\n                        color: 'rgba(0, 0, 0, 0.3)'\n                    }\n                }\n            },\n            grid: {\n                left: '3%',\n                right: '4%',\n                bottom: '3%',\n                containLabel: true\n            },\n            xAxis: [\n                {\n                    type: 'category',\n                    data: this.profitChartData.chartLabel,\n                    axisTick: {\n                        alignWithLabel: true\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: eTheme.axisLineColor\n                        }\n                    },\n                    axisLabel: {\n                        color: eTheme.axisTextColor,\n                        fontSize: eTheme.axisFontSize\n                    }\n                }\n            ],\n            yAxis: [\n                {\n                    type: 'value',\n                    axisLine: {\n                        lineStyle: {\n                            color: eTheme.axisLineColor\n                        }\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            color: eTheme.splitLineColor\n                        }\n                    },\n                    axisLabel: {\n                        color: eTheme.axisTextColor,\n                        fontSize: eTheme.axisFontSize\n                    }\n                }\n            ],\n            series: [\n                {\n                    name: 'Canceled',\n                    type: 'bar',\n                    barGap: 0,\n                    barWidth: '20%',\n                    itemStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: eTheme.firstLineGradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: eTheme.firstLineGradTo\n                                }\n                            ])\n                        }\n                    },\n                    data: this.profitChartData.data[0]\n                },\n                {\n                    name: 'Payment',\n                    type: 'bar',\n                    barWidth: '20%',\n                    itemStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: eTheme.secondLineGradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: eTheme.secondLineGradTo\n                                }\n                            ])\n                        }\n                    },\n                    data: this.profitChartData.data[1]\n                },\n                {\n                    name: 'All orders',\n                    type: 'bar',\n                    barWidth: '20%',\n                    itemStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: eTheme.thirdLineGradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: eTheme.thirdLineGradTo\n                                }\n                            ])\n                        }\n                    },\n                    data: this.profitChartData.data[2]\n                }\n            ]\n        };\n    };\n    ProfitChartComponent.prototype.updateProfitChartOptions = function (profitChartData) {\n        var options = this.options;\n        var series = this.getNewSeries(options.series, profitChartData.data);\n        this.echartsIntance.setOption({\n            series: series,\n            xAxis: {\n                data: this.profitChartData.chartLabel\n            }\n        });\n    };\n    ProfitChartComponent.prototype.getNewSeries = function (series, data) {\n        return series.map(function (line, index) {\n            return tslib_1.__assign({}, line, { data: data[index] });\n        });\n    };\n    ProfitChartComponent.prototype.onChartInit = function (echarts) {\n        this.echartsIntance = echarts;\n    };\n    ProfitChartComponent.prototype.resizeChart = function () {\n        var _this = this;\n        if (this.echartsIntance) {\n            // Fix recalculation chart size\n            // TODO: investigate more deeply\n            setTimeout(function () {\n                _this.echartsIntance.resize();\n            }, 0);\n        }\n    };\n    ProfitChartComponent.prototype.ngOnDestroy = function () {\n        this.alive = false;\n    };\n    var _a, _b, _c;\n    tslib_1.__decorate([\n        core_1.Input(),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof profit_chart_service_1.ProfitChart !== \"undefined\" && profit_chart_service_1.ProfitChart) === \"function\" ? _a : Object)\n    ], ProfitChartComponent.prototype, \"profitChartData\", void 0);\n    ProfitChartComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-profit-chart',\n            styleUrls: ['./charts-common.component.scss'],\n            template: \"\\n    <div echarts [options]=\\\"options\\\" class=\\\"echart\\\" (chartInit)=\\\"onChartInit($event)\\\"></div>\\n  \"\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof theme_1.NbThemeService !== \"undefined\" && theme_1.NbThemeService) === \"function\" ? _b : Object, typeof (_c = typeof layout_service_1.LayoutService !== \"undefined\" && layout_service_1.LayoutService) === \"function\" ? _c : Object])\n    ], ProfitChartComponent);\n    return ProfitChartComponent;\n}());\nexports.ProfitChartComponent = ProfitChartComponent;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/charts-panel/charts/profit-chart.component.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/e-commerce/charts-panel/charts/profit-chart.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { AfterViewInit, Component, Input, OnChanges, OnDestroy } from '@angular/core';\nimport { NbThemeService } from '@nebular/theme';\nimport { takeWhile } from 'rxjs/operators';\n\nimport { ProfitChart } from '../../../../@core/data/profit-chart.service';\nimport { LayoutService } from '../../../../@core/data/layout.service';\n\n@Component({\n    selector: 'ngx-profit-chart',\n    styleUrls: ['./charts-common.component.scss'],\n    template: `\n    <div echarts [options]=\"options\" class=\"echart\" (chartInit)=\"onChartInit($event)\"></div>\n  `\n})\nexport class ProfitChartComponent implements AfterViewInit, OnDestroy, OnChanges {\n    @Input() profitChartData: ProfitChart;\n\n    private alive = true;\n\n    echartsIntance: any;\n    options: any = {};\n\n    constructor(private theme: NbThemeService, private layoutService: LayoutService) {\n        this.layoutService\n            .onChangeLayoutSize()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(() => this.resizeChart());\n    }\n\n    ngOnChanges(): void {\n        if (this.echartsIntance) {\n            this.updateProfitChartOptions(this.profitChartData);\n        }\n    }\n\n    ngAfterViewInit() {\n        this.theme\n            .getJsTheme()\n            .pipe(takeWhile(() => this.alive))\n            .subscribe(config => {\n                const eTheme: any = config.variables.profit;\n\n                this.setOptions(eTheme);\n            });\n    }\n\n    setOptions(eTheme) {\n        this.options = {\n            backgroundColor: eTheme.bg,\n            tooltip: {\n                trigger: 'axis',\n                axisPointer: {\n                    type: 'shadow',\n                    shadowStyle: {\n                        color: 'rgba(0, 0, 0, 0.3)'\n                    }\n                }\n            },\n            grid: {\n                left: '3%',\n                right: '4%',\n                bottom: '3%',\n                containLabel: true\n            },\n            xAxis: [\n                {\n                    type: 'category',\n                    data: this.profitChartData.chartLabel,\n                    axisTick: {\n                        alignWithLabel: true\n                    },\n                    axisLine: {\n                        lineStyle: {\n                            color: eTheme.axisLineColor\n                        }\n                    },\n                    axisLabel: {\n                        color: eTheme.axisTextColor,\n                        fontSize: eTheme.axisFontSize\n                    }\n                }\n            ],\n            yAxis: [\n                {\n                    type: 'value',\n                    axisLine: {\n                        lineStyle: {\n                            color: eTheme.axisLineColor\n                        }\n                    },\n                    splitLine: {\n                        lineStyle: {\n                            color: eTheme.splitLineColor\n                        }\n                    },\n                    axisLabel: {\n                        color: eTheme.axisTextColor,\n                        fontSize: eTheme.axisFontSize\n                    }\n                }\n            ],\n            series: [\n                {\n                    name: 'Canceled',\n                    type: 'bar',\n                    barGap: 0,\n                    barWidth: '20%',\n                    itemStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: eTheme.firstLineGradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: eTheme.firstLineGradTo\n                                }\n                            ])\n                        }\n                    },\n                    data: this.profitChartData.data[0]\n                },\n                {\n                    name: 'Payment',\n                    type: 'bar',\n                    barWidth: '20%',\n                    itemStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: eTheme.secondLineGradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: eTheme.secondLineGradTo\n                                }\n                            ])\n                        }\n                    },\n                    data: this.profitChartData.data[1]\n                },\n                {\n                    name: 'All orders',\n                    type: 'bar',\n                    barWidth: '20%',\n                    itemStyle: {\n                        normal: {\n                            color: new echarts.graphic.LinearGradient(0, 0, 0, 1, [\n                                {\n                                    offset: 0,\n                                    color: eTheme.thirdLineGradFrom\n                                },\n                                {\n                                    offset: 1,\n                                    color: eTheme.thirdLineGradTo\n                                }\n                            ])\n                        }\n                    },\n                    data: this.profitChartData.data[2]\n                }\n            ]\n        };\n    }\n\n    updateProfitChartOptions(profitChartData: ProfitChart) {\n        const options = this.options;\n        const series = this.getNewSeries(options.series, profitChartData.data);\n\n        this.echartsIntance.setOption({\n            series: series,\n            xAxis: {\n                data: this.profitChartData.chartLabel\n            }\n        });\n    }\n\n    getNewSeries(series, data: number[][]) {\n        return series.map((line, index) => {\n            return {\n                ...line,\n                data: data[index]\n            };\n        });\n    }\n\n    onChartInit(echarts) {\n        this.echartsIntance = echarts;\n    }\n\n    resizeChart() {\n        if (this.echartsIntance) {\n            // Fix recalculation chart size\n            // TODO: investigate more deeply\n            setTimeout(() => {\n                this.echartsIntance.resize();\n            }, 0);\n        }\n    }\n\n    ngOnDestroy(): void {\n        this.alive = false;\n    }\n}\n"]}]}