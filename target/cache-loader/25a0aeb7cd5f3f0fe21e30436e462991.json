{"remainingRequest":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js??ref--10-2!/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js??ref--10-3!/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts","dependencies":[{"path":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts","mtime":1593660862968},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular2-template-loader/index.js","mtime":1486570058000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/cache-loader/dist/cjs.js","mtime":1593666990470},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/thread-loader/dist/cjs.js","mtime":1593666988914},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/ts-loader/index.js","mtime":1519365772000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js","mtime":1512749902000},{"path":"/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js","mtime":1519899048000}],"contextDependencies":[],"result":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar tslib_1 = require(\"tslib\");\nvar core_1 = require(\"@angular/core\");\nvar core_2 = require(\"@agm/core\");\nvar Location_1 = require(\"../entity/Location\");\nvar SearchComponent = /** @class */ (function () {\n    function SearchComponent(mapsAPILoader, ngZone) {\n        this.mapsAPILoader = mapsAPILoader;\n        this.ngZone = ngZone;\n        this.positionChanged = new core_1.EventEmitter();\n    }\n    SearchComponent.prototype.ngOnInit = function () {\n        var _this = this;\n        // load Places Autocomplete\n        this.mapsAPILoader.load().then(function () {\n            var autocomplete = new google.maps.places.Autocomplete(_this.searchElementRef.nativeElement, {\n                types: ['address']\n            });\n            autocomplete.addListener('place_changed', function () {\n                _this.ngZone.run(function () {\n                    // get the place result\n                    var place = autocomplete.getPlace();\n                    // verify result\n                    if (place.geometry === undefined || place.geometry === null) {\n                        return;\n                    }\n                    _this.positionChanged.emit(new Location_1.Location(place.geometry.location.lat(), place.geometry.location.lng()));\n                });\n            });\n        });\n    };\n    var _a, _b, _c;\n    tslib_1.__decorate([\n        core_1.Output(),\n        tslib_1.__metadata(\"design:type\", Object)\n    ], SearchComponent.prototype, \"positionChanged\", void 0);\n    tslib_1.__decorate([\n        core_1.ViewChild('search'),\n        tslib_1.__metadata(\"design:type\", typeof (_a = typeof core_1.ElementRef !== \"undefined\" && core_1.ElementRef) === \"function\" ? _a : Object)\n    ], SearchComponent.prototype, \"searchElementRef\", void 0);\n    SearchComponent = tslib_1.__decorate([\n        core_1.Component({\n            selector: 'ngx-search',\n            templateUrl: './search.component.html'\n        }),\n        tslib_1.__metadata(\"design:paramtypes\", [typeof (_b = typeof core_2.MapsAPILoader !== \"undefined\" && core_2.MapsAPILoader) === \"function\" ? _b : Object, typeof (_c = typeof core_1.NgZone !== \"undefined\" && core_1.NgZone) === \"function\" ? _c : Object])\n    ], SearchComponent);\n    return SearchComponent;\n}());\nexports.SearchComponent = SearchComponent;\n",{"version":3,"file":"/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts","sourceRoot":"","sources":["/home/hungnn/Documents/angular/dashboard/node_modules/angular-router-loader/src/index.js!/home/hungnn/Documents/angular/dashboard/node_modules/tslint-loader/index.js!/home/hungnn/Documents/angular/dashboard/src/main/webapp/app/ngx-admin/pages/maps/search-map/search/search.component.ts"],"names":[],"mappings":";;;AAAA,sCAAuG;AACvG,kCAA0C;AAC1C,+CAA8C;AAM9C;IAKI,yBAAoB,aAA4B,EAAU,MAAc;QAApD,kBAAa,GAAb,aAAa,CAAe;QAAU,WAAM,GAAN,MAAM,CAAQ;QAJ9D,oBAAe,GAAG,IAAI,mBAAY,EAAY,CAAC;IAIkB,CAAC;IAE5E,kCAAQ,GAAR;QAAA,iBAoBC;QAnBG,2BAA2B;QAC3B,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;YAC3B,IAAM,YAAY,GAAG,IAAI,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,YAAY,CAAC,KAAI,CAAC,gBAAgB,CAAC,aAAa,EAAE;gBAC1F,KAAK,EAAE,CAAC,SAAS,CAAC;aACrB,CAAC,CAAC;YACH,YAAY,CAAC,WAAW,CAAC,eAAe,EAAE;gBACtC,KAAI,CAAC,MAAM,CAAC,GAAG,CAAC;oBACZ,uBAAuB;oBACvB,IAAM,KAAK,GAAmC,YAAY,CAAC,QAAQ,EAAE,CAAC;oBAEtE,gBAAgB;oBAChB,IAAI,KAAK,CAAC,QAAQ,KAAK,SAAS,IAAI,KAAK,CAAC,QAAQ,KAAK,IAAI,EAAE;wBACzD,OAAO;qBACV;oBAED,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,IAAI,mBAAQ,CAAC,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;gBAC1G,CAAC,CAAC,CAAC;YACP,CAAC,CAAC,CAAC;QACP,CAAC,CAAC,CAAC;IACP,CAAC;;IA1BS;QAAT,aAAM,EAAE;;4DAAgD;IAEpC;QAApB,gBAAS,CAAC,QAAQ,CAAC;8DAA0B,iBAAU,oBAAV,iBAAU;6DAAC;IAHhD,eAAe;QAJ3B,gBAAS,CAAC;YACP,QAAQ,EAAE,YAAY;YACtB,WAAW,EAAE,yBAAyB;SACzC,CAAC;qEAMqC,oBAAa,oBAAb,oBAAa,oDAAkB,aAAM,oBAAN,aAAM;OAL/D,eAAe,CA4B3B;IAAD,sBAAC;CAAA,AA5BD,IA4BC;AA5BY,0CAAe","sourcesContent":["import { Component, ElementRef, EventEmitter, NgZone, OnInit, Output, ViewChild } from '@angular/core';\nimport { MapsAPILoader } from '@agm/core';\nimport { Location } from '../entity/Location';\n\n@Component({\n    selector: 'ngx-search',\n    templateUrl: './search.component.html'\n})\nexport class SearchComponent implements OnInit {\n    @Output() positionChanged = new EventEmitter<Location>();\n\n    @ViewChild('search') public searchElementRef: ElementRef;\n\n    constructor(private mapsAPILoader: MapsAPILoader, private ngZone: NgZone) {}\n\n    ngOnInit() {\n        // load Places Autocomplete\n        this.mapsAPILoader.load().then(() => {\n            const autocomplete = new google.maps.places.Autocomplete(this.searchElementRef.nativeElement, {\n                types: ['address']\n            });\n            autocomplete.addListener('place_changed', () => {\n                this.ngZone.run(() => {\n                    // get the place result\n                    const place: google.maps.places.PlaceResult = autocomplete.getPlace();\n\n                    // verify result\n                    if (place.geometry === undefined || place.geometry === null) {\n                        return;\n                    }\n\n                    this.positionChanged.emit(new Location(place.geometry.location.lat(), place.geometry.location.lng()));\n                });\n            });\n        });\n    }\n}\n"]}]}